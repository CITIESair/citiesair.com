{"version":3,"file":"static/js/585.8f849920.chunk.js","mappings":"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","sources":["hooks/useSchoolMetadata.jsx","Graphs/Subchart/SubchartUtils/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Utils/Gradient/GradientUtils.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/ValueRangeBox.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/TooltipCalendarChart.jsx","Graphs/Subchart/NivoCharts/NivoChartHelper.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/NivoCalendarChart.jsx","Components/DateRangePicker/DateRangePickerUtils.jsx","Components/DateRangePicker/AggregationTypeToggle.jsx","hooks/useChartData.jsx","Components/DateRangePicker/CustomDateRangePicker.jsx","ContextProviders/AxesPickerContext.jsx","Components/AxesPicker/AxesPicker.jsx","Graphs/Subchart/NoChartToRender.jsx","Components/TimeRange/TimeRangeUtils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker.jsx","Components/TimeRange/TimeRangeSelector.jsx","Components/TimeRange/TimeRangeSelectorWrapperForDataHook.jsx","Graphs/Subchart/SubChart.jsx","Components/CollapsibleSubtitle.jsx","Graphs/DataTypeDropDown.jsx","Components/StyledTabs.jsx","Graphs/ChartComponentWrapper.jsx","Components/AirQuality/AirQualityIndexLegendQuickGlance.jsx","Components/AirQuality/AirQualityScreen/ScreenDropDownMenu.jsx","Components/CustomDialog/CustomDialog.jsx","Components/Account/useLoginHandler.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/AirQuality/AirQualityAlerts/EmailsInput.jsx","Components/AirQuality/AirQualityAlerts/AlertTypes.jsx","Components/AirQuality/AirQualityAlerts/AlertUtils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertDeletionDialog.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/DialogData.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/OptionalMessage.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MultiDaysCalendarPicker.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DaySelector.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdSlider.jsx","ContextProviders/AirQualityAlertContext.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdComponentWrapper.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MaxOnceADayCheckbox.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdTypeToggle.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/AlertPropertyComponents.jsx","hooks/alerts/useEditAlertMutation.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertModificationDialog.jsx","hooks/alerts/useCreateAlertMutation.jsx","hooks/alerts/useDeleteAlertMutation.jsx","Components/AirQuality/AirQualityAlerts/AlertsTable.jsx","Components/AirQuality/AirQualityAlerts/AlertsTabs.jsx","hooks/alerts/useAlerts.jsx","Components/AirQuality/AirQualityAlerts/AirQualityAlert.jsx","Components/Account/LoginPopupHandler.jsx","Pages/Project/ProjectReservedArea.jsx","Components/CustomChip.jsx","Components/SchoolSelector.jsx","Pages/Project/GridOfMetadataChips.jsx","Pages/Project/ProjectDescription.jsx","Pages/Project/LoadMoreButton.jsx","Pages/Project/Project.jsx","Pages/Dashboard.jsx","Components/UppercaseTitle.jsx","Components/AirQuality/AirQualityIndexTable.jsx","Components/ExpandableSection/ExpandableSection.jsx","Components/AirQuality/AQIexplanation.jsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from '../API/Utils';\n\nconst useSchoolMetadata = () => {\n    const { currentSchoolID } = useContext(DashboardContext);\n\n    return useQuery({\n        queryKey: [GeneralAPIendpoints.schoolmetadata, currentSchoolID],\n        queryFn: async () => {\n            const url = getApiUrl({\n                endpoint: GeneralAPIendpoints.schoolmetadata,\n                school_id: currentSchoolID\n            })\n\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID, // only run when ready\n        staleTime: 1000 * 60 * 60, // 1-hour cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useSchoolMetadata;","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch, useMediaQuery } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Show All Sensors';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart,\n    selectorID,\n    allowMultiple,\n    seriesLabel,\n    onSeriesSelection,\n    displayChip = true\n  } = props;\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  // When parent/props change, reconcile selections:\n  // - If the incoming item has an explicit `selected` boolean, prefer it (parent-controlled change).\n  // - Otherwise preserve the previous selection for matching labels.\n  useEffect(() => {\n    setItems(prevItems => {\n      const prevMap = new Map(prevItems.map(i => [i.label, i.selected]));\n      return itemsFromChart.map(newIt => {\n        const incomingHasSelected = typeof newIt.selected === 'boolean';\n        if (incomingHasSelected) {\n          // Prefer parent's selection (keeps component in sync when parent updates selection)\n          return { ...newIt };\n        } else {\n          // No explicit selected flag from parent — preserve previous selection if available\n          return { ...newIt, selected: prevMap.has(newIt.label) ? prevMap.get(newIt.label) : !!newIt.selected };\n        }\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [itemsFromChart])\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection({ newDataColumns: updatedItems });\n  };\n\n  const renderedLabel = (selected) => {\n    const returnNumSeriesDisplayed = () => {\n      return `${selected.length}/${items.length} ${seriesLabel || \"\"} shown`;\n    };\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {/* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? returnNumSeriesDisplayed() : selected}\n        </Typography>\n      </Stack>\n    );\n  };\n\n  return (\n    <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n      {\n        isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Show/Hide</Typography> : null\n      }\n\n      <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n        <FormControl\n          sx={{\n            width: \"100%\",\n            minWidth: '10rem',\n            '& .MuiInputBase-root': { borderRadius: `${theme.shape.borderRadius}px` }\n          }}\n          size=\"small\"\n        >\n          <Select\n            labelId={`${selectorID}-label`}\n            id={selectorID}\n            multiple={allowMultiple}\n            value={items.filter(item => item.selected).map(item => item.label)}\n            onChange={handleChange}\n            MenuProps={MenuProps}\n            renderValue={(selected) => renderedLabel(selected)}\n            sx={{\n              fontSize: '0.75em',\n              '& .MuiSelect-select': { py: \"6.5px\" },\n              '& .MuiSvgIcon-root': { color: 'text.secondary' }\n            }}\n          >\n            {/* Display all available items, together with checkbox for each item to select from */}\n            {items.map((item) => (\n              <MenuItem\n                disabled={\n                  // If there is only 1 selected item and this is the selected item\n                  // Then, prevent user from de-select this item too\n                  // To ensure at least there is 1 selected item at all times\n                  (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n                }\n                key={item.label}\n                value={item.label}\n                sx={{\n                  backgroundColor: 'unset !important',\n                  \"&:hover\": {\n                    backgroundColor: 'inherit !important',\n                  }\n                }}\n              >\n                { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n                {allowMultiple ? <Checkbox\n                  checked={item.selected}\n                  onClick={() => handleItemToggle(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                  : <Radio\n                    checked={item.selected}\n                    onChange={() => handleChange(item)}\n\n                    sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                }\n                <Typography variant='caption'>{item.label}</Typography>\n              </MenuItem>\n            ))}\n\n            {/* Show the option to select all if multiSelect is true*/}\n            {allowMultiple ?\n              (\n                <MenuItem\n                  key={SELECT_ALL}\n                  value={SELECT_ALL}\n                  sx={{\n                    borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n                    position: 'sticky', bottom: 0, zIndex: 1, marginBottom: theme.spacing(-1),\n                    background: theme.palette.customAlternateBackground,\n                    \"&:hover\": {\n                      background: theme.palette.customAlternateBackground\n                    }\n                  }}\n                >\n                  <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n                    <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n                    <Switch\n                      checked={selectAll}\n                      onClick={() => handleItemToggle(SELECT_ALL)}\n                      sx={{ transform: 'scale(0.8)' }}\n                    />\n                  </Stack>\n                </MenuItem>\n              ) : null\n            }\n          </Select>\n        </FormControl>\n\n        {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n        {(displayChip && allowMultiple) && <Grid container spacing={1}\n          sx={{\n            [theme.breakpoints.down('sm')]: {\n              display: 'none'\n            },\n          }}\n        >\n          {items.filter(item => item.selected).map((item) => (\n            <Grid item key={item.label}>\n              <Chip\n                label={<Typography variant='caption'>{item.label}</Typography>}\n                size=\"small\"\n                {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n              />\n            </Grid>\n          ))}\n        </Grid>}\n      </Stack>\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex]?.options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: chartData.options?.backgroundColor?.fill || 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '80%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '80%'),\n      top: !isPortrait && 20\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n      max: options.vAxis?.viewWindow?.max ?? null,\n      max: options.vAxis?.viewWindow?.max ?? null,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break\n      // If not any of the above, then the colorAxis should be from the chart (aqi/temperature/humidity...)\n      default:\n        try {\n          options.colorAxis = theme.palette.chart.colorAxes[options.colorAxis.colors]\n        } catch {\n          options.colorAxis = []\n        }\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  if (isPortrait && chartData?.chartType === \"LineChart\") {\n    options.pointSize = 0;\n  }\n\n  return options;\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        hAxis: {\n          ...mainChartOptions.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) },\n          title: null\n        },\n        vAxis: {\n          ...mainChartOptions.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n        pointSize: 0\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { isValidArray } from \"../UtilFunctions\";\n\nconst normalizeColorStopOffsets = ({ offsets, minOffset, maxOffset }) => {\n  return offsets.map(offset => (offset - minOffset) / (maxOffset - minOffset));\n}\n\nconst normalizeColorStops = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  if (!isValidArray(colors)) return [\n    { color: \"#fff\", offset: 0 },\n    { color: \"#fff\", offset: 1 }\n  ];\n\n  // No offsets provided, generate equally spaced offsets\n  if (typeof colors[0] === 'string') {\n    const totalColors = colors.length;\n    return colors.map((color, index) => ({\n      color: color,\n      offset: index / (totalColors - 1)\n    }));\n  }\n  // Offsets are provided, normalize them\n  else {\n    let clampedStops = colors;\n    if (optionalMinValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset >= optionalMinValue);\n    }\n    if (optionalMaxValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset <= optionalMaxValue);\n    }\n    const offsets = clampedStops.map(colorStop => colorStop.offset);\n\n    const minOffset = optionalMinValue || Math.min(...offsets);\n    const maxOffset = optionalMaxValue || Math.max(...offsets);\n\n    const normalizedOffsets = normalizeColorStopOffsets({ offsets, minOffset, maxOffset });\n\n    return clampedStops.map((colorStop, index) => ({\n      color: colorStop.color,\n      offset: normalizedOffsets[index]\n    }));\n  }\n}\n\n// Function to return an array of STEPS discrete colors in a gradient from an array of starting colors\n// Used for NivoCalendarChart\nfunction hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n    : [null, null, null];\n}\nfunction rgbToHex(r, g, b) {\n  return \"#\" + [r, g, b].map(x => {\n    const hex = x.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  }).join('');\n}\nfunction interpolateColor(color1, color2, factor) {\n  // Return immediately if the 2 colors are the same\n  if (color1.every((element, index) => element === color2[index])) return color1;\n\n  // Else, calculate the middle of the 2 colors\n  let result = color1.slice();\n  for (let i = 0; i < 3; i++) {\n    result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n  }\n  return result;\n}\nexport const generateDiscreteColorGradientArray = ({ colors, numSteps = 100 }) => {\n  const normalizedColors = normalizeColorStops({ colors });\n  normalizedColors.forEach((colorStop) => {\n    colorStop.color = hexToRgb(colorStop.color)\n  });\n\n  let colorArray = [];\n  const stepPositions = Array.from({ length: numSteps }, (_, i) => i / (numSteps - 1));\n\n  for (let i = 0; i < stepPositions.length; i++) {\n    const pos = stepPositions[i];\n    let color1, color2, offset1, offset2;\n\n    for (let j = 0; j < normalizedColors.length - 1; j++) {\n      if (pos >= normalizedColors[j].offset && pos <= normalizedColors[j + 1].offset) {\n        color1 = normalizedColors[j].color;\n        color2 = normalizedColors[j + 1].color;\n        offset1 = normalizedColors[j].offset;\n        offset2 = normalizedColors[j + 1].offset;\n        break;\n      }\n    }\n\n    const localFactor = (pos - offset1) / (offset2 - offset1);\n    const interpolatedColor = interpolateColor(color1, color2, localFactor);\n    colorArray.push(rgbToHex(...interpolatedColor));\n  }\n\n  return colorArray;\n};\n\n// Function to return CSS background from an array of colors (with or without offsets)\nexport const generateCssBackgroundGradient = ({ gradientDirection, colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return `linear-gradient(${gradientDirection}, ${normalizedColors.map(colorStop => `${colorStop.color} ${colorStop.offset * 100}%`).join(', ')})`;\n}\n\nexport const generateSvgFillGradient = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return normalizedColors.map(colorStop => ({\n    color: colorStop.color,\n    offset: colorStop.offset * 100 + '%'\n  }));\n};\n\n// Gradient for background of the Google Charts\nexport const BackgroundGradient = ({ id, colors }) => (\n  <svg width={0} height={0} visibility=\"hidden\">\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n        {colors.map((colorStop, index) => (\n          <stop key={index} offset={colorStop.offset} stopColor={colorStop.color} />\n        ))}\n      </linearGradient>\n    </defs>\n  </svg>\n);","import { useTheme } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport { generateCssBackgroundGradient } from '../../../../Utils/Gradient/GradientUtils';\n\nconst ValueRangeBox = ({ title, valueRange, colorAxis, isPortrait }) => {\n  const theme = useTheme();\n\n  if (valueRange?.min === null || valueRange?.max === null) return null;\n\n  const { colors, minValue, maxValue } = colorAxis;\n  let rangeBoxMinValue = minValue, rangeBoxMaxValue = maxValue;\n\n  if (minValue === undefined) rangeBoxMinValue = valueRange.min;\n  if (maxValue === undefined) rangeBoxMaxValue = valueRange.max;\n\n  if (valueRange.min < rangeBoxMinValue) rangeBoxMinValue = valueRange.min;\n  if (valueRange.max > rangeBoxMaxValue) rangeBoxMaxValue = valueRange.max;\n\n  const calculateMarkerPositionOnRangeBox = (value) => {\n    const position = ((value - rangeBoxMinValue) / (rangeBoxMaxValue - rangeBoxMinValue)) * 100;\n    return `${position}%`;\n  };\n\n  const labelStyle = {\n    position: 'absolute',\n    fontSize: '0.75rem',\n    color: theme.palette.text.secondary,\n    lineHeight: 1,\n    textAlign: 'center',\n    transform: 'translateX(-50%)',\n    minWidth: '75px',\n    whiteSpace: 'nowrap',\n  };\n  const topLabelStyle = {\n    top: '-1.5rem',\n    transform: 'translateX(-50%)'\n  };\n  const bottomLabelStyle = {\n    bottom: '-1.25rem',\n    transform: isPortrait ? 'translateX(-100%)' : 'translateX(-50%)'\n  };\n\n  const triangleStyle = {\n    position: 'absolute',\n    width: 0,\n    height: 0,\n    borderLeft: '0.25rem solid transparent',\n    borderRight: '0.25rem solid transparent',\n    transform: 'translateX(-50%)',\n  };\n  const topTriangleStyle = {\n    top: '-0.5rem',\n    borderTop: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n  const bottomTriangleStyle = {\n    bottom: '-0.5rem',\n    borderBottom: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n\n  return (\n    <Box sx={{\n      position: 'sticky',\n      width: 'fit-content',\n      my: 4,\n      float: 'right',\n      right: (isPortrait ? '0' : '50px')\n    }}>\n      <Typography sx={{\n        display: 'inline',\n        position: 'absolute',\n        textAlign: 'right',\n        transform: 'translateX(calc(-100% - 0.5rem))',\n        fontSize: '0.75rem',\n        lineHeight: 1.25,\n        fontWeight: 500,\n        color: 'text.secondary'\n      }}>\n        {title}\n      </Typography>\n      <Box sx={{\n        background: generateCssBackgroundGradient({ gradientDirection: 'to right', colors: colors, optionalMaxValue: rangeBoxMaxValue }),\n        color: theme.palette.text.secondary,\n        border: `1px solid ${theme.palette.text.secondary}`,\n        width: isPortrait ? '250px' : '300px',\n        height: '1rem',\n        position: 'relative',\n        justifyContent: 'space-between',\n      }}>\n        <span style={{ ...labelStyle, ...topLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}>min: {Math.round(valueRange.min)}</span>\n        <span style={{ ...labelStyle, ...bottomLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}>max: {Math.round(valueRange.max)}</span>\n        <div style={{ ...triangleStyle, ...topTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}></div>\n        <div style={{ ...triangleStyle, ...bottomTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}></div>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ValueRangeBox;","import { useEffect, useRef } from 'react';\nimport { Box, Chip } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../../../Utils/UtilFunctions';\n\nconst TooltipCalendarChart = ({ day, color, tooltipText, dateRange, inFirstTwoRowsOfChart }) => {\n  const tooltipBoxRef = useRef(null);\n\n  // If the cell hovered over is in the first two rows of the chart,\n  // move the tooltip to the bottom of the chart\n  // Read subsequent comments to understand why we need to do this\n  useEffect(() => {\n    if (tooltipBoxRef.current && inFirstTwoRowsOfChart(day, dateRange)) {\n      const parentDiv = tooltipBoxRef.current.parentElement;\n      if (parentDiv) {\n        parentDiv.style.top = '11vh';\n      }\n    }\n  }, [tooltipBoxRef, inFirstTwoRowsOfChart]);\n\n\n  // Note that our Box is just a container 'inside' the tooltip\n  // The tooltip itself is actually the Box's parent div\n  return (\n    <Box ref={tooltipBoxRef} className='nivo-tooltip'>\n      <Chip sx={{ backgroundColor: color, mr: 0.5, height: '10px', width: '10px', borderRadius: '50%' }} />\n      {parse(tooltipText, { replace: replacePlainHTMLWithMuiComponents })}\n    </Box>\n  );\n};\n\nexport default TooltipCalendarChart;","\nexport const getDateRangeForCalendarChart = (dateStrings) => {\n  return {\n    min: dateStrings.reduce((min, current) => (current < min ? current : min)),\n    max: dateStrings.reduce((max, current) => (current > max ? current : max))\n  }\n};\n\nexport const getValueRangeForCalendarChart = (values) => {\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\nexport const getCalendarChartMargin = (isPortrait) => {\n  return isPortrait\n    ? { top: 30, right: 0, bottom: 20, left: 20 }\n    : { top: 30, right: 40, bottom: 20, left: 40 };\n};\n\nexport const calculateValueRange = (data) => {\n  const values = data.map((item) => item.value);\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\n","/* eslint-disable */\nimport { ResponsiveCalendar } from '@nivo/calendar';\nimport { useTheme } from '@mui/material/styles';\nimport { generateDiscreteColorGradientArray } from '../../../../Utils/Gradient/GradientUtils';\n\nimport ValueRangeBox from './ValueRangeBox';\nimport TooltipCalendarChart from './TooltipCalendarChart';\nimport { getCalendarChartMargin, getDateRangeForCalendarChart, getValueRangeForCalendarChart } from '../NivoChartHelper';\nimport { useEffect, useState } from 'react';\nimport { isValidArray } from '../../../../Utils/UtilFunctions';\nimport GoogleChartStyleWrapper from '../../SubchartUtils/GoogleChartStyleWrapper';\nimport { Box } from '@mui/material';\n\nconst YEAR_SPACING = 40;\n\nconst NivoCalendarChart = (props) => {\n    const { dataArray, valueRangeBoxTitle, isPortrait, options, windowSize } = props;\n\n    const [dateRange, setDateRange] = useState({ min: null, max: null });\n    const [valueRange, setValueRange] = useState({ min: null, max: null });\n    const [calendarHeight, setCalendarHeight] = useState(400);\n\n    useEffect(() => {\n        if (!isValidArray(dataArray)) return;\n\n        const dateStrings = dataArray.map(item => item.day);\n        const thisDateRange = getDateRangeForCalendarChart(dateStrings)\n        setDateRange(thisDateRange);\n\n        const values = dataArray.map(item => item.value);\n        setValueRange(getValueRangeForCalendarChart(values));\n\n        // Get the number of years we have data for and the number of years to display\n        const lastYear = new Date(thisDateRange.max).getFullYear();\n        const firstYear = new Date(thisDateRange.min).getFullYear();\n        const numberOfYears = lastYear - firstYear + 1;\n        const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n        const cellSize = Math.min(windowSize[0] / 60, 20); // windowSize[0]: innerWidth\n        // max cell size of 20\n        const yearHeight = cellSize * 7; // Height for one year\n        const totalHeight = numberOfYears * (yearHeight + YEAR_SPACING) + calendarChartMargin.top + calendarChartMargin.bottom;\n        setCalendarHeight(totalHeight);\n    }, [dataArray, windowSize]);\n\n    const displayLegend = options?.legend?.position && options.legend.position !== \"none\";\n\n    const calendarChartMargin = getCalendarChartMargin(isPortrait, displayLegend);\n\n    const theme = useTheme();\n\n    // Function to extract tooltip text from HTML tooltip\n    const extractTooltipText = (tooltip) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(tooltip, 'text/html');\n        return doc.body.innerHTML;\n    };\n\n    // Function to check if a date is in the first two rows of the chart\n    // Used to anchor the tooltip to the bottom while hovering over\n    // the first two rows of the chart\n    const inFirstTwoRowsOfChart = (dateStr, dateRange) => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.getDay();\n\n        // Check if the date is Sunday (0) or Monday (1)\n        const isFirstTwoDaysOfWeek = dayOfWeek === 0 || dayOfWeek === 1;\n\n        // Extract the first year from the date range once\n        const firstYear = new Date(dateRange.min).getFullYear();\n\n        // Check if the date is in the first year of the date range\n        const isInFirstYear = date.getFullYear() === firstYear;\n\n        return isFirstTwoDaysOfWeek && isInFirstYear;\n    };\n\n    const calendarCellColors = generateDiscreteColorGradientArray({\n        colors: options?.colorAxis?.colors,\n        numSteps: options?.colorAxis?.gradientSteps\n    });\n\n    return (\n        <GoogleChartStyleWrapper\n            isPortrait={isPortrait}\n            className=\"Calendar\"\n            position=\"relative\"\n            minWidth=\"550px\"\n            height=\"100%\"\n        >\n            {displayLegend ? (\n                <ValueRangeBox\n                    title={valueRangeBoxTitle}\n                    valueRange={valueRange}\n                    colorAxis={options?.colorAxis}\n                    isPortrait={isPortrait}\n                />\n            ) : null}\n\n\n            <Box sx={{\n                height: `${calendarHeight}px`,\n                maxHeight: \"450px\",\n                overflowY: 'auto',\n                width: '100%',\n                position: 'relative'\n            }}>\n                <Box sx={{\n                    height: `${calendarHeight}px`,\n                    position: 'absolute',\n                    width: '100%'\n                }}>\n                    <ResponsiveCalendar\n                        data={dataArray}\n                        from={dateRange.min}\n                        to={dateRange.max}\n                        emptyColor=\"transparent\"\n                        align=\"top\"\n                        theme={{\n                            text: {\n                                fill: theme.palette.text.secondary,\n                            },\n                            fontSize: '0.75rem'\n                        }}\n                        colors={calendarCellColors}\n                        minValue={options?.colorAxis?.minValue}\n                        maxValue={options?.colorAxis?.maxValue}\n                        margin={calendarChartMargin}\n                        yearSpacing={YEAR_SPACING}\n                        monthBorderColor={theme.palette.text.primary}\n                        monthBorderWidth={1}\n                        daySpacing={0.25}\n                        dayBorderWidth={0}\n                        tooltip={({ day, value, color }) => {\n                            const tooltipData = dataArray.find(item => item.day === day);\n                            const tooltipText = tooltipData ? extractTooltipText(tooltipData.tooltip) : '';\n\n                            return (\n                                <TooltipCalendarChart\n                                    day={day}\n                                    color={color}\n                                    tooltipText={tooltipText}\n                                    dateRange={dateRange}\n                                    inFirstTwoRowsOfChart={inFirstTwoRowsOfChart}\n                                />\n                            );\n                        }}\n                    />\n                </Box>\n            </Box>\n\n        </GoogleChartStyleWrapper>\n    );\n};\n\nexport default NivoCalendarChart;\n\n","/* eslint-disable */\n\nimport { styled } from '@mui/material/styles';\nimport { Paper } from '@mui/material';\n\nimport { addDays, endOfDay, startOfDay, format, addHours } from \"date-fns\";\nimport AggregationType from './AggregationType';\n\nconst today = new Date();\n\nconst yesterday = {\n  label: \"Yesterday\",\n  range: () => ({\n    startDate: startOfDay(addHours(today, -48)),\n    endDate: today\n  })\n};\n\nconst last14Days = {\n  label: \"Last 14d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -14)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last30Days = {\n  label: \"Last 30d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -30)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last365Days = {\n  label: \"Last 365d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -365)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst allTime = ({ minDateOfDataset }) => {\n  const formattedMinDate = format(minDateOfDataset, \"MMM yyyy\");\n  return {\n    label: `All Time (${formattedMinDate} - Now)`,\n    range: () => ({\n      startDate: minDateOfDataset,\n      endDate: endOfDay(today)\n    })\n  }\n};\n\nexport const returnCustomStaticRanges = ({ minDateOfDataset, aggregationType }) => {\n  switch (aggregationType) {\n    case AggregationType.minute:\n      return [yesterday];\n    case AggregationType.day:\n      return [last30Days, last365Days];\n    case AggregationType.month:\n    case AggregationType.year:\n      return [allTime({ minDateOfDataset })];\n    default:\n      return [last14Days, last30Days];\n  }\n};\n\nexport const AggregationTypeMetadata = {\n  [AggregationType.minute]: {\n    maxDays: 2,\n    label: \"Live\"\n  },\n  [AggregationType.hour]: {\n    maxDays: 30,\n    label: \"Hourly\"\n  },\n  [AggregationType.day]: {\n    maxDays: 365,\n    label: \"Daily\"\n  },\n  [AggregationType.month]: {\n    maxDays: Infinity,\n    label: \"Monthly\"\n  },\n  [AggregationType.year]: {\n    maxDays: Infinity,\n    label: \"Yearly\"\n  }\n}\n\nexport const StyledDateRangePicker = styled(Paper, {\n  shouldForwardProp: (prop) => prop !== 'showPickerPanel' && prop !== 'smallScreen',\n})(({ theme, showPickerPanel, smallScreen }) => ({\n  zIndex: showPickerPanel === true && 1,\n  position: \"relative\",\n  padding: showPickerPanel ? theme.spacing(1) : 0,\n  margin: (showPickerPanel && !smallScreen) ? theme.spacing(-1) : 0,\n  maxWidth: '100%',\n  background: showPickerPanel ? theme.palette.customAlternateBackground : 'transparent',\n  boxShadow: showPickerPanel === false && 'none',\n  '& .rdrDateInput::before': {\n    display: \"none !important\"\n  },\n  '& .rdrDateInput': {\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: 'none',\n    padding: 0\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary\n  },\n  '& .rdrDateDisplayWrapper, .rdrCalendarWrapper, .rdrDefinedRangesWrapper, .rdrStaticRange, .rdrDateDisplayItem': {\n    background: 'transparent'\n  },\n  '& .rdrDateDisplayItemActive': {\n    border: showPickerPanel === false && 'none'\n  },\n  '& .rdrDateDisplay': {\n    margin: 0,\n    minWidth: \"10rem\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"2rem\"\n  },\n  '& .rdrDateDisplayItem': {\n    margin: 0,\n    borderRadius: showPickerPanel ? theme.shape.borderRadius : 0,\n    \"&:hover:not(.rdrDateDisplayItemActive)\": {\n      border: showPickerPanel ? `1px solid ${theme.palette.action.disabled}` : \"none\"\n    }\n  },\n  '& .rdrDateDisplayItem:hover:not(.rdrDateDisplayItemActive)': {\n    border: showPickerPanel === false && '1px solid transparent'\n  },\n  '& .rdrDateDisplayItem + .rdrDateDisplayItem': {\n    margin: 0\n  },\n  '& .rdrDateDisplayItem:first-of-type': {\n    borderRight: showPickerPanel === false && `1px solid ${theme.palette.action.disabled} !important`\n  },\n  '& .rdrMonthAndYearWrapper, .rdrInputRanges': {\n    display: showPickerPanel === false && 'none !important',\n    padding: 0\n  },\n  '& .rdrMonthName': {\n    display: 'none',\n  },\n  '& .rdrDefinedRangesWrapper, .rdrMonths': {\n    display: showPickerPanel === false && 'none'\n  },\n  '&  .rdrInfiniteMonths': {\n    visibility: showPickerPanel === false && 'hidden',\n    width: \"100% !important\",\n    maxWidth: \"675px\",\n    margin: \"auto\"\n  },\n  '& .rdrDateDisplayWrapper': {\n    minWidth: '9rem',\n    height: '2rem',\n    borderRadius: theme.shape.borderRadius,\n    border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.action.disabled}`,\n    \"&:hover\": {\n      border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.text.primary}`,\n    }\n  },\n  '& .rdrDateRangePickerWrapper': {\n    width: '100%',\n    flexDirection: 'column-reverse'\n  },\n  '& .rdrStaticRanges': {\n    flexDirection: 'row',\n    minWidth: '10.5rem'\n  },\n  '& .rdrStaticRangeLabel': {\n    color: theme.palette.text.secondary,\n    borderRadius: theme.shape.borderRadius,\n    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`\n  },\n  '& .rdrDefinedRangesWrapper': {\n    border: 'none',\n    width: '100%'\n  },\n  '& .rdrNextPrevButton': {\n    background: theme.palette.primary.main,\n    borderRadius: theme.shape.borderRadius,\n    opacity: 1,\n    '&:hover': {\n      opacity: 0.5,\n      background: theme.palette.primary.main\n    }\n  },\n  '& .rdrNextPrevButton > i': {\n    color: \"white\"\n  },\n  '& .rdrNextButton > i': {\n    borderColor: `transparent transparent transparent white`\n  },\n  '& .rdrPprevButton > i': {\n    borderColor: `transparent white transparent transparent`\n  },\n  '& .rdrStaticRange': {\n    border: 'none'\n  },\n  '& .rdrStaticRangeSelected > .rdrStaticRangeLabel, .rdrMonthAndYearPickers': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrMonthAndYearPickers': {\n    fontSize: '1rem'\n  },\n  '& .rdrStaticRange:hover .rdrStaticRangeLabel, .rdrStaticRange:focus .rdrStaticRangeLabel': {\n    background: theme.palette.customBackground.toString()\n  },\n  '& .rdrDayNumber span': {\n    color: theme.palette.text.primary.toString()\n  },\n  '& .rdrDayPassive .rdrDayNumber span': {\n    opacity: 0.5\n  },\n  '& .rdrMonthAndYearWrapper select': {\n    color: theme.palette.text.secondary.toString(),\n    background: 'none',\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette.text.secondary}`\n    }\n  },\n  '& .rdrDateDisplayItem input': {\n    color: theme.palette.text.secondary\n  },\n  '& .rdrDayDisabled': {\n    backgroundColor: theme.palette.customBackground\n  },\n  '& .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfMonth .rdrStartEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge, .rdrEndEdge, .rdrDayEndOfMonth .rdrDayInPreview, .rdrDayEndOfMonth .rdrDayStartPreview, .rdrDayEndOfWeek .rdrDayInPreview, .rdrDayEndOfWeek .rdrDayStartPreview, .rdrDayEndPreview': {\n    borderTopRightRadius: '2rem',\n    borderBottomRightRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfWeek .rdrEndEdge, .rdrDayStartOfMonth .rdrDayInPreview, .rdrDayStartOfMonth .rdrDayEndPreview, .rdrDayStartOfWeek .rdrDayInPreview, .rdrDayStartOfWeek .rdrDayEndPreview, .rdrDayStartPreview': {\n    borderTopLeftRadius: '2rem',\n    borderBottomLeftRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrEndEdge': {\n    left: 0\n  },\n  '& .rdrEndEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge': {\n    right: 0\n  },\n  '& .rdrSelected, .rdrInRange, .rdrStartEdge, .rdrEndEdge': {\n    top: '0px',\n    bottom: '0px',\n  },\n  '& .rdrMonths': {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  '& .rdrDay': {\n    marginBottom: \"1px\",\n    '& span': {\n      top: '0px',\n      bottom: '0px'\n    }\n  },\n  '& .rdrMonthsHorizontal': {\n    overflowY: 'hidden'\n  },\n  '& .rdrDateInput:first-of-type:before': {\n    content: '\"\"',\n    backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='MuiSvgIcon-root' focusable='false' aria-hidden='true' viewBox='0 0 24 24' data-testid='DateRangeIcon'%3E%3Cpath d='M9 11H7v2h2zm4 0h-2v2h2zm4 0h-2v2h2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V9h14z' fill='${theme.palette.text.secondary}'/%3E%3C/svg%3E\")`,\n    width: \"0.75rem\",\n    height: \"0.75rem\",\n    display: \"block\",\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    left: \"0.75rem\"\n  },\n  '& .rdrStaticRangeSelected span': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary.main,\n    width: \"0.25rem\",\n    height: \"0.25rem\",\n    borderRadius: \"50%\"\n  }\n}));\n\nexport const returnFormattedDates = ({ startDateObject, endDateObject }) => {\n  return {\n    startDate: format(startDateObject, 'yyyy-MM-dd'),\n    endDate: format(endDateObject, 'yyyy-MM-dd')\n  }\n}","import { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { useMediaQuery } from '@mui/material';\nimport { keyframes } from '@mui/system';\n\nimport AggregationType from './AggregationType';\nimport { AggregationTypeMetadata } from './DateRangePickerUtils';\nimport { useTheme } from '@emotion/react';\nimport RadioButtonCheckedIcon from '@mui/icons-material/RadioButtonChecked';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\n\nconst pulse = keyframes`\n  0% { opacity: 1; }\n  50% { opacity: 0.6; }\n  100% { opacity: 1; }\n`;\n\nexport default function AggregationTypeToggle({ aggregationType, setAggregationType }) {\n  const theme = useTheme();\n\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n  const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const handleChange = (_, newType) => {\n    if (newType !== null) {\n      setAggregationType(newType);\n    }\n  };\n\n\n  return (\n    <ToggleButtonGroup\n      fullWidth={extraSmallScreen}\n      color=\"primary\"\n      value={aggregationType}\n      exclusive\n      onChange={handleChange}\n      aria-label=\"aggregation type toggle for graph average\"\n      size=\"small\"\n      sx={{ height: \"100%\", [theme.breakpoints.down('sm')]: { width: '100%' } }}\n      orientation={isLargeScreen ? \"vertical\" : \"horizontal\"}\n    >\n      {Object.values(AggregationType).map(type => (\n        <ToggleButton\n          key={type}\n          size=\"small\"\n          sx={{ textTransform: \"capitalize !important\", px: 1.25, py: 0.5, color: \"text.secondary\" }}\n          value={type}\n          aria-label={type}\n        >\n          {/* Show pulsing red icon if type === AggregationType.minute */}\n          {type === AggregationType.minute && (\n            <RadioButtonCheckedIcon\n              sx={{\n                ...(isLargeScreen ? {\n                  position: 'absolute',\n                  left: '50%',\n                  transform: 'translateX(calc(-50% - 2.5rem))',\n                } : {\n                  mr: 0.3,\n                }),\n                color: AQI_Database[3].color.Light,\n                fontSize: \"0.75rem\",\n                animation: `${pulse} 2s infinite ease-in-out`,\n              }}\n            />\n          )}\n\n          {AggregationTypeMetadata[type]?.label || \"\"}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  );\n}","import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from '../API/Utils';\n\nconst useChartData = (chartID) => {\n    const { allChartsConfigs, currentSchoolID } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartID];\n\n    return useQuery({\n        queryKey: [GeneralAPIendpoints.chartdata, chartID, chartConfig, currentSchoolID],\n        queryFn: async () => {\n            const url = getApiUrl({\n                endpoint: chartConfig.endpoint,\n                school_id: currentSchoolID,\n                queryParams: chartConfig.queryParams\n            });\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID && !!chartConfig?.endpoint, // only run when ready\n        staleTime: 1000 * 60 * 10, // 10-minute cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useChartData;\n","import { useState, useRef, useEffect, useContext } from 'react';\n\nimport { DateRangePicker, createStaticRanges } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport { Box, Grid, Stack, Typography, useMediaQuery, useTheme } from '@mui/material';\n\nimport { AggregationTypeMetadata, StyledDateRangePicker, returnCustomStaticRanges, returnFormattedDates } from './DateRangePickerUtils';\nimport AggregationTypeToggle from './AggregationTypeToggle';\nimport AggregationType from './AggregationType';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport { differenceInDays, isSameDay } from 'date-fns';\n\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport useChartData from '../../hooks/useChartData';\n\nconst CustomDateRangePicker = (props) => {\n  const { minDateOfDataset, chartIndex } = props;\n  const [isFirstRequest, setIsFirstRequest] = useState(true)\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { isFetching } = useChartData(chartIndex);\n\n  const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n  const chartConfig = allChartsConfigs[chartIndex] || {};\n  const queryParams = chartConfig.queryParams || {};\n\n  const [aggregationType, setAggregationType] = useState(queryParams.aggregationType || AggregationType.hour);\n  const [dateRange, setDateRange] = useState(() => {\n    const { startDate, endDate } = queryParams;\n    if (startDate && endDate) {\n      return {\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        key: 'selection',\n      };\n    }\n    // Default if not set\n    return {\n      startDate: null,\n      endDate: null,\n      key: 'selection',\n    };\n  });\n\n  const today = new Date();\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  // Set aggregationType\n  useEffect(() => {\n    // Initialize with the range of the first static range (default)\n    const defaultRange = {\n      ...returnCustomStaticRanges({\n        aggregationType: aggregationType || AggregationType.hour,\n        minDateOfDataset\n      })[0].range(), key: 'selection'\n    };\n    setDateRange(defaultRange);\n  }, [aggregationType]);\n\n  // Handle date range change → update DashboardContext queryParams\n  useEffect(() => {\n    // Early return if this is the first request (already fetched by useChartData hook)\n    if (isFirstRequest) {\n      setIsFirstRequest(false);\n      return;\n    }\n\n    const { startDate, endDate } = dateRange || {};\n    if (!startDate || !endDate) return;\n\n    // Start date and end date can't be the same date\n    if (isSameDay(startDate, endDate)) {\n      // No need to display error message as this is usually caused when only the start date is selected\n      return;\n    }\n\n    // Restrict the selection to only max days per aggregationType\n    const maxAllowedDays = AggregationTypeMetadata[aggregationType]?.maxDays;\n    if (differenceInDays(endDate, startDate) > maxAllowedDays) {\n      enqueueSnackbar(`${AggregationTypeMetadata[aggregationType].label} data is limited to maximum ${maxAllowedDays} day${maxAllowedDays > 1 ? \"s\" : \"\"}`, SnackbarMetadata.error);\n      return;\n    }\n\n    // Change the config\n    const formattedDates = returnFormattedDates({\n      startDateObject: startDate,\n      endDateObject: endDate\n    });\n    updateIndividualChartConfigQueryParams(chartIndex, {\n      aggregationType,\n      startDate: formattedDates.startDate,\n      endDate: formattedDates.endDate\n    });\n\n  }, [dateRange]);\n\n  // Control displaying / hiding of the date range picker\n  const [showPickerPanel, setShowPickerPanel] = useState(false);\n  const paperRef = useRef(null);\n\n  // Hide or show the date-range-picker panel on user's manual input\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (paperRef.current && !paperRef.current.contains(event.target)) {\n        setShowPickerPanel(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [paperRef]);\n\n  // Hide the panel on data fetching done\n  useEffect(() => {\n    if (!isFetching && showPickerPanel) {\n      setShowPickerPanel(false);\n    }\n  }, [isFetching]);\n\n  return (\n    <>\n      <Grid item alignItems={showPickerPanel ? \"start\" : \"stretch\"} xs sm=\"auto\" lg>\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Averaging Period</Typography> : null\n          }\n          <AggregationTypeToggle\n            aggregationType={aggregationType}\n            setAggregationType={setAggregationType}\n            smallScreen={smallScreen}\n          />\n        </Stack>\n      </Grid>\n\n      <Grid\n        item\n        sx={{\n          height: \"2rem\",\n          flex: 1,\n          [theme.breakpoints.up('lg')]: { minHeight: '4rem' }\n          // width: { [theme.breakpoints.down(\"sm\")]: { width: \"100%\" } },\n        }}\n      >\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5}>\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Date Range</Typography> : null\n          }\n          <StyledDateRangePicker\n            showPickerPanel={showPickerPanel}\n            smallScreen={smallScreen}\n            ref={paperRef}\n            elevation={8}\n            onClick={() => setShowPickerPanel(true)}\n            sx={{ position: \"relative\" }}\n          >\n\n            <Box\n              sx={{\n                transition: \"filter 0.2s ease-in-out\"\n              }}\n            >\n              <DateRangePicker\n                ranges={[dateRange]}\n                onChange={(ranges) => {\n                  if (!ranges) return;\n                  setDateRange(ranges.selection);\n                }}\n                staticRanges={createStaticRanges(\n                  returnCustomStaticRanges({ minDateOfDataset, aggregationType })\n                )}\n                inputRanges={[]}\n                rangeColors={[\n                  theme.palette.primary.main,\n                  theme.palette.secondary.main,\n                  theme.palette.text.secondary,\n                ]}\n                minDate={minDateOfDataset}\n                maxDate={today}\n                months={1}\n                showMonthAndYearPickers={true}\n                direction=\"vertical\"\n                fixedHeight={true}\n                preventSnapRefocus={true}\n                startDatePlaceholder=\"Start Date\"\n                endDatePlaceholder=\"End Date\"\n                editableDateInputs={true}\n                showMonthArrow={true}\n                weekStartsOn={1}\n              />\n            </Box>\n          </StyledDateRangePicker>\n        </Stack>\n      </Grid >\n\n    </>\n  );\n};\n\nexport default CustomDateRangePicker;\n","import { createContext, useMemo, useState, useContext } from 'react';\n\nconst AxesPickerContext = createContext();\n\nexport function AxesPickerProvider({ children }) {\n    const [hAxis, setHAxis] = useState();\n    const [vAxis, setVAxis] = useState();\n\n    const contextValue = useMemo(() => ({\n        hAxis, setHAxis,\n        vAxis, setVAxis\n    }), [hAxis, vAxis]);\n\n    return (\n        <AxesPickerContext.Provider value={contextValue}>\n            {children}\n        </AxesPickerContext.Provider>\n    );\n}\n\n// Custom hook \nexport const useAxesPicker = () => useContext(AxesPickerContext);","import { useContext, useEffect, useState } from 'react';\nimport { Select, MenuItem, FormControl, InputLabel, Button, Grid, CircularProgress, Stack, useMediaQuery, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useAxesPicker } from '../../ContextProviders/AxesPickerContext';\nimport { ChartAPIendpointsOrder } from \"../../API/Utils\";\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport useChartData from '../../hooks/useChartData';\n\nconst SELECT_MIN_WIDTH = \"150px\";\n\n// Define custom styled components for shared border radius\nconst LeftSelect = styled(FormControl)(({ theme }) => ({\n  textTransform: 'capitalize',\n  minWidth: SELECT_MIN_WIDTH,\n\n  // Only between sm–lg: stitched (merge right side)\n  [theme.breakpoints.between('sm', 'lg')]: {\n    '& .MuiOutlinedInput-root': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n    '& .MuiOutlinedInput-notchedOutline': {\n      borderRight: 'none',\n    },\n  },\n\n  // Focused border fix (optional highlight)\n  '& .Mui-focused .MuiOutlinedInput-notchedOutline': {\n    borderRight: `2px solid ${theme.palette.primary.main}`,\n  },\n}));\n\n\nconst RightSelect = styled(FormControl)(({ theme }) => ({\n  textTransform: 'capitalize',\n  minWidth: SELECT_MIN_WIDTH,\n\n  // Only between sm–lg: stitched (merge left side)\n  [theme.breakpoints.between('sm', 'lg')]: {\n    '& .MuiOutlinedInput-root': {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n    '& .MuiOutlinedInput-notchedOutline': {\n      borderLeft: 'none',\n    },\n  },\n}));\n\n\n\nconst AxesPicker = (props) => {\n  const { currentSchoolID, setIndividualChartConfig } = useContext(DashboardContext);\n  const { chartID, allowedAxes, selectedAxes, dataType } = props;\n  const { hAxis, vAxis, setHAxis, setVAxis } = useAxesPicker();\n\n  const { isFetching } = useChartData(chartID);\n  const [shouldDisableApplyButton, setShouldDisableApplyButton] = useState(true);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes || {};\n\n    if (!(receivedHAxis && receivedVAxis)) {\n      setShouldDisableApplyButton(true);\n      return;\n    }\n\n    setHAxis(receivedHAxis);\n    setVAxis(receivedVAxis);\n  }, [selectedAxes, setHAxis, setVAxis]);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes;\n    if (!(receivedHAxis && receivedVAxis)) {\n      return;\n    };\n\n    setShouldDisableApplyButton(hAxis === receivedHAxis && vAxis === receivedVAxis);\n\n  }, [hAxis, vAxis, selectedAxes]);\n\n  const applyChanges = () => {\n    if (!(vAxis && hAxis)) return;\n\n    setIndividualChartConfig(chartID, {\n      endpoint: ChartAPIendpointsOrder[chartID],\n      school_id: currentSchoolID,\n      queryParams: {\n        dataType: dataType,\n        sensorX: hAxis,\n        sensorY: vAxis\n      }\n    });\n  }\n\n  // Disable option if the current dataType isn't in its allowedDataTypes array\n  const shouldDisableOption = (option) => {\n    return !option.allowedDataTypes.includes(dataType);\n  }\n\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  return (\n    <Stack direction=\"column\" alignItems=\"stretch\" gap={1.5} width=\"100%\">\n      {\n        isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Sensor Pair Selection</Typography> : null\n      }\n      <Grid container item rowGap={1.5} columnGap={1} alignItems=\"center\">\n        <Grid container item rowGap={1.5}>\n          <Grid item xs={12} sm=\"auto\" lg>\n            <LeftSelect fullWidth size=\"small\">\n              <InputLabel id=\"x-axis-select-label\">Horizontal Axis</InputLabel>\n              <Select\n                labelId=\"x-axis-select-label\"\n                value={hAxis || selectedAxes?.hAxis || null}\n                label=\"Horizontal Axis\"\n                onChange={(event) => {\n                  setHAxis(event.target.value)\n                }}\n                autoWidth\n              >\n                {allowedAxes?.map(option => (\n                  <MenuItem\n                    key={option.sensor}\n                    value={option.sensor}\n                    disabled={option.sensor === vAxis || shouldDisableOption(option)}\n                    sx={{ textTransform: 'capitalize' }}\n                  >\n                    {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                  </MenuItem>\n                ))}\n              </Select>\n            </LeftSelect>\n          </Grid>\n          <Grid item xs={12} sm=\"auto\" lg>\n            <RightSelect fullWidth size=\"small\">\n              <InputLabel id=\"y-axis-select-label\">Vertical Axis</InputLabel>\n              <Select\n                labelId=\"y-axis-select-label\"\n                value={vAxis || selectedAxes?.vAxis || null}\n                label=\"Vertical Axis\"\n                onChange={(event) => {\n                  setVAxis(event.target.value)\n                }}\n                autoWidth\n              >\n                {allowedAxes?.map(option => (\n                  <MenuItem\n                    key={option.sensor}\n                    value={option.sensor}\n                    disabled={option.sensor === hAxis || shouldDisableOption(option)}\n                    sx={{ textTransform: 'capitalize' }}\n                  >\n                    {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                  </MenuItem>\n                ))}\n              </Select>\n            </RightSelect>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12} sm=\"auto\" lg>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            sx={{ height: \"100%\" }}\n            onClick={applyChanges}\n            disabled={shouldDisableApplyButton || isFetching}\n          >\n            APPLY\n          </Button>\n        </Grid>\n      </Grid>\n    </Stack>\n  );\n};\n\nexport default AxesPicker;\n","import { Alert, Box } from \"@mui/material\";\n\nconst NoChartToRender = ({ customMessage, dataType, height, selectableAxes }) => {\n    let messagePrefix = \"This sensor \";\n    let messageSuffix = \" data. Choose a different sensor or data type.\";\n\n    if (selectableAxes) {\n        messagePrefix = \"This pair of sensors \";\n        messageSuffix = \" correlation data. Choose another pair or a different data type.\"\n    }\n\n    return (\n        <Box height={height}>\n            <Alert severity=\"error\" sx={{ my: 2 }}>\n                {\n                    customMessage ? customMessage : (\n                        <>\n                            {messagePrefix}\n                            does not have&nbsp;\n                            <Box component=\"span\" textTransform=\"capitalize\">\n                                {dataType}\n                            </Box>\n                            {messageSuffix}\n                        </>\n                    )\n                }\n            </Alert>\n        </Box>\n    )\n}\n\nexport default NoChartToRender;","export const returnHoursFromMinutesPastMidnight = (minutes) => {\n  const hoursPastMidnight = Math.floor(minutes / 60);\n  return hoursPastMidnight.toString().padStart(2, '0') + ':00';\n};\n\nexport const HOURS = Array.from({ length: 24 }, (_, i) => {\n  const minutesPastMidnight = i * 60;\n  return {\n    label: returnHoursFromMinutesPastMidnight(minutesPastMidnight),\n    value: minutesPastMidnight\n  };\n});\n\nexport const PREDEFINED_TIMERANGES = {\n  allday: { id: \"allday\", label: \"All Day\", start: HOURS[0].value, end: HOURS[HOURS.length - 1].value, timeRangeLabel: \"0-23h\" },\n  schoolHour: { id: \"schoolHour\", label: \"School Hour\", start: HOURS[7].value, end: HOURS[17].value, timeRangeLabel: \"7-17h\" },\n  custom: { id: \"custom\", label: \"Custom\" }\n};\n\n\n\n","import { Box, FormControl, InputLabel, Select, MenuItem, Stack } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport { isValidArray } from '../../../../../Utils/UtilFunctions';\n\nexport const SimplePicker = (props) => {\n  const { icon, label, value, options, handleChange, disabled, isExtraSmall, ...otherProps } = props;\n  const theme = useTheme();\n\n  return (\n    <Stack\n      direction=\"row\"\n      gap={icon ? 1 : 0}\n      alignItems=\"center\"\n      {...otherProps}\n    >\n      <Box\n        aria-hidden={true}\n        sx={{\n          '& .MuiSvgIcon-root': {\n            color: disabled ? theme.palette.text.secondary : theme.palette.primary.main,\n            verticalAlign: \"middle\"\n          }\n        }}\n      >\n        {icon}\n      </Box>\n\n      <FormControl\n        fullWidth\n        size='small'\n        disabled={disabled}\n        sx={{\n          minWidth: \"5rem\",\n          marginLeft: \"0 !important\",\n          \"& .MuiInputBase-root\": {\n            [theme.breakpoints.down('sm')]: {\n              fontSize: isExtraSmall ?? \"0.75rem\"\n            }\n          }\n        }}\n      >\n        <InputLabel id={`${label}-picker-label`}>{label}</InputLabel>\n        <Select\n          labelId={`${label}-picker-label`}\n          id={`${label}-picker`}\n          value={value}\n          label={label}\n          onChange={handleChange}\n        >\n          {isValidArray(options) &&\n            options.map((option) => (\n              <MenuItem key={option.value} value={option.value} is>\n                {option.label}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n    </Stack >\n  );\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { Box, Stack, ToggleButtonGroup, ToggleButton, useMediaQuery, useTheme, Typography } from \"@mui/material\";\nimport WatchLaterIcon from '@mui/icons-material/WatchLater';\nimport { SimplePicker } from \"../AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker\";\nimport { HOURS } from \"./TimeRangeUtils\";\nimport { isValidArray } from \"../../Utils/UtilFunctions\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelector = (props) => {\n    const { timeRange, defaultTimeRange, disabled, handleChange, isResponsive = false, hasTitle = false } = props;\n\n    const theme = useTheme();\n    const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n    const [displayFromToPickers, setDisplayFromToPickers] = useState(false);\n\n    // Always normalize into a [string, string]\n    const [startTime, endTime] = isValidArray(timeRange) ? timeRange : defaultTimeRange;\n\n    const [predefinedRange, setPredefinedRange] = useState(() => {\n        // Sync initial toggle‑button state\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        return match ? match.id : PREDEFINED_TIMERANGES.custom.id;\n    });\n\n    // When `timeRange` actually changes, keep buttons in sync:\n    useEffect(() => {\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        setPredefinedRange(match ? match.id : PREDEFINED_TIMERANGES.custom.id);\n    }, [startTime, endTime]);\n\n    const handleModeChange = useCallback((_, newMode) => {\n        if (!newMode) return;\n        setPredefinedRange(newMode);\n        const range = PREDEFINED_TIMERANGES[newMode];\n        if (range.start != null && range.end != null) {\n            handleChange([range.start, range.end]);\n        }\n\n        // only display the hour pickers if custom time is used\n        setDisplayFromToPickers(newMode === PREDEFINED_TIMERANGES.custom.id);\n    }, [handleChange]);\n\n    // Add useMediaQuery to detect xs screens\n    const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n    return (\n        <Stack direction={hasTitle ? \"column\" : \"row\"} alignItems=\"start\" gap={0.5} width=\"100%\">\n            {\n                hasTitle ?\n                    (isLargeScreen && isResponsive ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Time Range</Typography> : null)\n                    : (\n                        <Box\n                            aria-hidden\n                            sx={{\n                                '& .MuiSvgIcon-root': {\n                                    color: disabled\n                                        ? theme.palette.text.secondary\n                                        : theme.palette.primary.main,\n                                    verticalAlign: \"-webkit-baseline-middle\"\n                                }\n                            }}\n                        >\n                            <WatchLaterIcon sx={{ mt: 0.75 }} />\n                        </Box>\n                    )\n            }\n\n            <Stack direction=\"column\" width=\"100%\" gap={1.5}>\n                <ToggleButtonGroup\n                    fullWidth={extraSmallScreen}\n                    color={disabled ? \"standard\" : \"primary\"}\n                    value={predefinedRange}\n                    exclusive\n                    onChange={handleModeChange}\n                    size=\"small\"\n                    disabled={disabled}\n                    orientation={isResponsive ?\n                        (isLargeScreen ? \"vertical\" : \"horizontal\") :\n                        \"horizontal\"\n                    }\n                >\n                    {Object.values(PREDEFINED_TIMERANGES).map((range, idx, arr) => (\n                        <ToggleButton\n                            key={range.id}\n                            value={range.id}\n                            aria-label={range.label}\n                            sx={{\n                                color: \"text.secondary\",\n                                textTransform: 'none',\n                                px: (idx === arr.length - 1) ? 2 : 1,\n                                py: 0.5,\n                                flex: (idx === arr.length - 1) ? 1 : undefined\n                            }}\n                            size=\"small\"\n                        >\n                            {range.label}\n                            {range.timeRangeLabel && (\n                                <>\n                                    &nbsp;({range.timeRangeLabel})\n                                </>\n                            )\n                            }\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n\n                {\n                    displayFromToPickers ? (\n                        <Stack direction=\"row\" flex={1} gap={1}>\n                            <SimplePicker\n                                label=\"From\"\n                                value={startTime}\n                                options={HOURS}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={(e) => {\n                                    // Set toValue to null if new startTime is larger than endTime's current value\n                                    if (e.target.value > endTime) {\n                                        handleChange([e.target.value, null]);\n                                    }\n                                    // Else, proceed with startTime\n                                    else {\n                                        handleChange([e.target.value, endTime])\n                                    }\n                                }}\n                                flex={1}\n                            />\n                            <SimplePicker\n                                label=\"To\"\n                                value={endTime}\n                                options={HOURS.filter(h => h.value > startTime)}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={e => handleChange([startTime, e.target.value])}\n                                flex={1}\n                            />\n                        </Stack>\n                    ) : null\n                }\n            </Stack>\n        </Stack>\n    );\n};\n\n\nexport default TimeRangeSelector;\n","import { useContext, useState } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport TimeRangeSelector from \"./TimeRangeSelector\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelectorWrapperForDataHook = (props) => {\n    const { defaultTimeRange, isResponsive, hasTitle, chartIndex } = props;\n\n    const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartIndex] || {};\n    const queryParams = chartConfig.queryParams || {};\n    const { startTime, endTime } = queryParams;\n\n    const [timeRange, setTimeRange] = useState([\n        startTime ?? defaultTimeRange.startTime,\n        endTime ?? defaultTimeRange.endTime,\n    ]);\n\n    return (\n        <TimeRangeSelector\n            timeRange={timeRange}\n            defaultTimeRange={defaultTimeRange}\n            handleChange={(newRange) => {\n                // Handle timeRange change → update DashboardContext queryParams\n                setTimeRange(newRange);\n\n                const [startTime, endTime] = newRange || [];\n                if (startTime === null || endTime === null || startTime > endTime) return;\n\n                // Change the config\n                if (startTime === PREDEFINED_TIMERANGES.allday.start && endTime === PREDEFINED_TIMERANGES.allday.end) {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime: null,\n                        endTime: null\n                    });\n                } else {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime,\n                        endTime\n                    });\n                }\n            }}\n            isResponsive={isResponsive}\n            hasTitle={hasTitle}\n        />\n    );\n}\n\nexport default TimeRangeSelectorWrapperForDataHook;","/* eslint-disable */\n\nimport { useContext, useEffect, useMemo, useState, useCallback } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Grid, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SubchartUtils/SeriesSelector';\nimport { generateRandomID, returnGenericOptions, returnChartControlUI, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './SubchartUtils/GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport NivoCalendarChart from './NivoCharts/NivoCalendarChart/NivoCalendarChart';\nimport { generateSvgFillGradient, BackgroundGradient } from '../../Utils/Gradient/GradientUtils';\n\nimport CustomDateRangePicker from '../../Components/DateRangePicker/CustomDateRangePicker'\nimport { isValidArray } from '../../Utils/UtilFunctions';\nimport { returnSelectedDataType } from '../../Utils/AirQuality/DataTypes';\n\nimport AxesPicker from '../../Components/AxesPicker/AxesPicker';\n\nimport NoChartToRender from './NoChartToRender';\nimport { PREDEFINED_TIMERANGES } from '../../Components/TimeRange/TimeRangeUtils';\nimport TimeRangeSelectorWrapperForDataHook from '../../Components/TimeRange/TimeRangeSelectorWrapperForDataHook';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, height, maxHeight, selectedDataType, allowedDataTypes } = props;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const google = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  const [previousChartData, setPreviousChartData] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // To determine if the charts should be rendered or not\n  const [shouldRenderChart, setShouldRenderChart] = useState(true);\n  const [renderChartNow, setRenderChartNow] = useState(false);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Get the options object for chart\n  const options = useMemo(() => {\n    return returnGenericOptions({ ...props, theme });\n  }, [props, theme, chartData.chartType]);\n\n  // State to store transformed data for CalendarChart\n  const [calendarDataArray, setCalendarDataArray] = useState(null);\n\n  // Early exit for 'Calendar' chartType\n  if (chartData.chartType === 'Calendar') {\n    useEffect(() => {\n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      if (!isValidArray(dataArray)) {\n        setShouldRenderChart(false);\n        return; // early return if there is no data to render\n      }\n\n      setCalendarDataArray(dataArray)\n      setShouldRenderChart(true);\n    }, [chartData]);\n\n    if (!calendarDataArray) {\n      return (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )\n    }\n\n    return (\n      shouldRenderChart ? (\n        <NivoCalendarChart\n          dataArray={calendarDataArray}\n          valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n          isPortrait={isPortrait}\n          options={options}\n          windowSize={windowSize}\n        />\n      ) : (\n        <>\n          <NoChartToRender dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })} />\n          <NivoCalendarChart\n            dataArray={[]}\n            valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n            isPortrait={isPortrait}\n            options={options}\n            windowSize={windowSize}\n          />\n        </>\n      )\n    );\n  }\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Properties for date-range-picker and time range selector\n  const dateRangePicker = options.dateRangePicker || null;\n  const timeRangeSelector = options.timeRangeSelector || null;\n\n  // Properties for data formatters\n  const formatters = options.formatters || null;\n\n  // Properties for selectableAxes\n  let selectableAxes = chartData.selectableAxes || null;\n  if (selectableAxes) {\n    if (isValidArray(selectableAxes.allowedAxes)) {\n      if (selectableAxes.allowedAxes.length <= 2) selectableAxes = null; // don't display selectableAxes if number of allowedSensors is less than 3\n    }\n  }\n\n  const hasAtLeastOneAuxillaryControl = seriesSelector || dateRangePicker || selectableAxes || timeRangeSelector;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection({ newDataColumns: dataColumns }); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection({ newDataColumns: dataColumns });\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    const prevSelections = dataColumns?.map(c => ({ label: c.label, selected: c.selected })) || [];\n\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    let initialView = chartWrapper.getView();\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({ columns: viewFromDataTable.columns });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') {\n        col = {\n          role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n          sourceColumn: col,\n        };\n      }\n\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n      shouldAssignDomainRoleToFistColumn = false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // First, try to restore previous selection by label\n        const prev = prevSelections.find(p => p.label === col.label);\n        if (prev) {\n          col.selected = prev.selected;\n        } else {\n          // Else, fallback to default logic if new series or first load (if defaultSeriesToDisplayInitially is available)\n          if (seriesSelector.defaultSeriesToDisplayInitially) {\n            col.selected = seriesSelector.defaultSeriesToDisplayInitially.includes(index);\n          }\n          // Else of no defaultSeriesToDisplayInitially is presented, then, all data columns are selected if multiple series are selectable\n          else if (seriesSelector.allowMultiple) {\n            col.selected = true;\n          } else {\n            // Else, for single serie selector, only first data column is selected\n            col.selected = (dataSeriesIndex === 0);\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n\n      return col;\n    });\n\n    setAllInitialColumns(allInitialColumns);\n\n    const initialVAxisRange = getInitialVAxisRange({ dataTable, allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n\n    const dataCols = allInitialColumns.filter(col => col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false);\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataCols });\n\n    setDataColumns(dataCols);\n\n    return { initAllInitialColumns: allInitialColumns, initDataColumns: dataCols };\n  };\n\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = useCallback(({\n    newDataColumns,\n    _allInitialColumns = allInitialColumns,\n    _chartWrapper = chartWrapper,\n    _controlWrapper = controlWrapper\n  }) => {\n    if (!_allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              series: {\n                ...options.series,\n                ...hiddenSeriesObject\n              }\n            }\n          }\n        });\n      }\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          if (isValidArray(_allInitialColumns)) {\n            for (let i = dataColumn.indexIn_ + 1; i < _allInitialColumns.length; i++) {\n              if (_allInitialColumns[i].role !== 'data') {\n                newViewColumns.push(_allInitialColumns[i]);\n              }\n              // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n              else {\n                break;\n              }\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              colors: newOptions.colors,\n              series: newOptions.series\n            },\n            chartView: {\n              columns: newViewColumns\n            }\n          }\n        });\n      }\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      _controlWrapper?.draw();\n    }\n  }, [allInitialColumns, options, seriesSelector, chartWrapper, controlWrapper, initialVAxisRange, hasChartControl]);\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n  // Prepare to draw the chart if there is any change in chartData\n  // but only set flag renderChartNow if the chart should draw in the next rendering cycle\n  // to prevent chartID container not being mounted on time\n  useEffect(() => {\n    if (google && chartData) {\n      // Do not draw again if deep comparison between current chartData and previousChartData is true\n      if (JSON.stringify(chartData) === JSON.stringify(previousChartData)) return;\n      setPreviousChartData(chartData);\n\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      const _shouldRenderChart = isValidArray(dataArray);\n      setShouldRenderChart(_shouldRenderChart);\n      if (_shouldRenderChart === true) {\n        setRenderChartNow(true);\n        const dataTable = google.visualization.arrayToDataTable(dataArray);\n\n        // Call functions for formatting the number if numberFormat/dateFormat is specified \n        if (formatters && typeof formatters === 'object') {\n          if (formatters.hasOwnProperty(\"numberFormatter\")) {\n            const numberFormat = new google.visualization.NumberFormat(formatters.numberFormatter.numberFormat);\n            formatters.numberFormatter.columns.forEach(col => numberFormat.format(dataTable, col));\n          }\n        }\n        setDataTable(dataTable);\n      }\n    }\n  }, [google, chartData]);\n\n  // Actually draw the chart now because chartID container is already mounted from shouldRenderChart flag\n  useEffect(() => {\n    if (renderChartNow === true) {\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? dataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      let thisControlWrapper;\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `${chartControl.controlType === \"CategoryFilter\" ? \"CategoryFilter\" : \"other-chart-control\"}-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(dataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const { initAllInitialColumns, initDataColumns } = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: dataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection({\n          _allInitialColumns: initAllInitialColumns,\n          newDataColumns: initDataColumns,\n          _chartWrapper: thisChartWrapper,\n          _controlWrapper: thisControlWrapper\n        });\n      }\n\n      setRenderChartNow(false);\n    }\n  }, [renderChartNow])\n\n  const renderChart = () => {\n    return (\n      <Grid id={`dashboard-${chartID}`} container alignItems=\"start\">\n        {hasAtLeastOneAuxillaryControl && (\n          <Grid lg={2} container item\n            sx={{\n              mt: 1,\n              ml: 2,\n              gap: 2,\n              [theme.breakpoints.down('lg')]: { gap: 1, ml: 0 }\n            }}\n          >\n            {\n              isFirstRender === false && (\n                <>\n                  {seriesSelector &&\n                    <Grid item xs=\"auto\" lg={12}\n                      sx={{\n                        [theme.breakpoints.down('sm')]: { width: '100%' }\n                      }}\n                    >\n                      <SeriesSelector\n                        items={dataColumns}\n                        allowMultiple={seriesSelector.allowMultiple}\n                        seriesLabel={seriesSelector.seriesLabel}\n                        selectorID={`${chartData.title}-selector`}\n                        onSeriesSelection={handleSeriesSelection}\n                        displayChip={false}\n                      />\n                    </Grid>\n                  }\n\n                  {\n                    dateRangePicker &&\n                    <CustomDateRangePicker\n                      minDateOfDataset={new Date(dateRangePicker.minDate)}\n                      chartIndex={chartData.id}\n                    />\n                  }\n\n                  {selectableAxes &&\n                    <AxesPicker\n                      chartID={chartData.id}\n                      allowedAxes={selectableAxes.allowedAxes}\n                      selectedAxes={selectableAxes.selectedAxes}\n                      dataType={selectedDataType}\n                    />\n                  }\n\n                  {\n                    timeRangeSelector &&\n                    <Grid item xs=\"auto\" lg={12}\n                      sx={{\n                        [theme.breakpoints.down('sm')]: { width: '100%' }\n                      }}\n                    >\n                      <TimeRangeSelectorWrapperForDataHook\n                        defaultTimeRange={[PREDEFINED_TIMERANGES.allday.start, PREDEFINED_TIMERANGES.allday.end]}\n                        handleChange={() => {\n                          return null;\n                        }}\n                        isResponsive\n                        hasTitle\n                        chartIndex={chartData.id}\n                      />\n                    </Grid>\n                  }\n                </>\n              )\n            }\n\n            <Grid item xs=\"auto\" lg={12}\n              sx={{\n                [theme.breakpoints.down('sm')]: { width: '100%' }\n              }}\n            >\n              {/* Special div for CategoryFilter to align its position with other auxillary controls */}\n              <Box\n                id={`CategoryFilter-${chartID}`} sx={{\n                  display: hasChartControl && chartControl.controlType === 'CategoryFilter' ? \"block\" : \"none\"\n                }} />\n            </Grid>\n          </Grid>\n        )}\n\n        <Grid item xs>\n          <Stack>\n            <Box\n              id={chartID}\n              sx={{ height: height, maxHeight: maxHeight }}\n            />\n\n            {/* Div for all other types of chart control */}\n            <Box\n              id={`other-chart-control-${chartID}`}\n              sx={{\n                display: (hasChartControl && chartControl.controlType !== 'CategoryFilter') ? \"block\" : \"none\",\n                height: `calc(${height} / 8)`,\n                filter: 'saturate(0.3)',\n                opacity: 0.7\n              }}\n            />\n          </Stack>\n        </Grid>\n      </Grid>\n    )\n  };\n\n  // Generate the gradient background if it exists in options parameter\n  const gradientBackgroundColor = options.gradientBackgroundColor;\n  let gradientBackgroundId, svgFillGradient;\n  if (gradientBackgroundColor) {\n    gradientBackgroundId = `${chartID}-backgroundGradient`;\n    svgFillGradient = generateSvgFillGradient({\n      colors: theme.palette.chart.colorAxes[gradientBackgroundColor].colors,\n      optionalMinValue: options.vAxis?.viewWindow?.min,\n      optionalMaxValue: options.vAxis?.viewWindow?.max\n    });\n  }\n\n  const onChartReady = () => {\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  const showAuxiliaryControls = () => {\n    if (!isFirstRender) {\n      return (\n        <>\n\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    shouldRenderChart ?\n      (\n        <GoogleChartStyleWrapper\n          isPortrait={isPortrait}\n          gradientBackgroundId={gradientBackgroundId}\n          className={chartData.chartType}\n          position=\"relative\"\n          height=\"100%\"\n          minHeight={chartData.chartType === 'Calendar' && '200px'}\n        >\n          {/* Conditionally display loading animation here */}\n          {isFirstRender && (\n            <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n              <LoadingAnimation />\n            </Box>\n          )}\n          {renderChart()}\n          {gradientBackgroundColor ? <BackgroundGradient id={gradientBackgroundId} colors={svgFillGradient} /> : null}\n        </GoogleChartStyleWrapper>\n      ) :\n      (\n        <NoChartToRender\n          dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })}\n          selectableAxes={selectableAxes}\n          // If the visualization has a series selector or control, we need to account for its height\n          // And since the height is a string, we need to parse it to a number before adding to it\n          height={seriesSelector || hasChartControl ? (parseFloat(height) * 1.2 + 'vw') : height}\n\n        />\n      )\n  );\n}","import { useState, useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport parse from 'html-react-parser';\nimport { useMediaQuery, useTheme } from '@mui/material';\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/UtilFunctions';\n\nfunction CollapsibleSubtitle({ text, wordLimit = 40, reference }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const subtitleRef = useRef(null);\n\n  const words = text.split(' ');\n\n  // If not on mobile or words are within limit, just display the full text\n  if (!isMobile || words.length / wordLimit <= 1.4) {\n    return (\n      <Box>\n        <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n        {reference && (\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {parse(reference, { replace: replacePlainHTMLWithMuiComponents })}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  let displayText = words.slice(0, wordLimit).join(' ');\n  const lastFullStop = displayText.lastIndexOf('.');\n\n  if (lastFullStop !== -1) {\n    displayText = displayText.slice(0, lastFullStop + 1);\n  }\n\n  // Do not collapse if the user clicks on the chart associated with the subtitle\n  const isClickWithinSharedParent = (event) => {\n    let { target } = event;\n    // .MuiContainer-root - Container for both the subtitle and the chart\n    const subtitleParent = subtitleRef.current.closest('.MuiContainer-root');\n    // Elements used to detect if the click is on a chart\n    const chartElements = new Set(['rect', 'path', 'svg', 'circle']);\n\n    while (target != null) {\n      // Check if a chart is clicked\n      if (chartElements.has(target?.tagName)) {\n        // If the chart element and the subtitle element share the same container\n        // it means that the click is on the chart associated with the subtitle\n        // As such, we should not collapse the subtitle\n        const targetParent = target.closest('.MuiContainer-root');\n        return targetParent === subtitleParent;\n      }\n      target = target.parentNode; // Move up the DOM tree\n    }\n    return false;\n  };\n\n  // Custom onClickAway handler\n  const handleOnClickAway = (event) => {\n    if (!isClickWithinSharedParent(event)) {\n      setIsExpanded(false);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleOnClickAway}>\n      <Box ref={subtitleRef} onClick={() => setIsExpanded(!isExpanded)} style={{ cursor: 'pointer' }}>\n        {isExpanded ? (\n          <>\n            <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n            {reference && <Typography variant=\"caption\" color=\"text.secondary\">{parse(reference, { replace: replacePlainHTMLWithMuiComponents })}</Typography>}\n          </>\n        ) : (\n          <>\n            <Typography display=\"inline\">\n              {parse(displayText, { replace: replacePlainHTMLWithMuiComponents })}\n              ...\n            </Typography>\n            <Typography display=\"inline\" color=\"text.primary\" fontWeight=\"500\" sx={{ ml: 0.5, '& :hover': { textDecoration: 'underline' } }}>\n              See more\n            </Typography>\n          </>\n        )}\n      </Box>\n    </ClickAwayListener>\n  );\n}\n\nexport default CollapsibleSubtitle;\n","import { useContext, useState } from \"react\";\nimport { Button, Menu, MenuItem, Typography } from \"@mui/material\";\nimport { isValidArray } from \"../Utils/UtilFunctions\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { returnSelectedDataType } from \"../Utils/AirQuality/DataTypes\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst DataTypeDropDownMenu = ({ selectedDataType, dataTypes, chartID }) => {\n  const { updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  if (!isValidArray(dataTypes)) return null;\n\n  // If there is only 1 dataType, display it as a string of text\n  if (dataTypes.length <= 1) {\n    return (\n      <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n        {dataTypes[0].name_title}\n      </Typography>\n    )\n  }\n\n  // If there are more than 1 dataTypes to choose from, display a popup dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuItemClick = (dataType) => {\n    updateIndividualChartConfigQueryParams(chartID, { dataType })\n    handleClose();\n  };\n\n  return (\n    <>\n      <Button\n        id=\"data-type-drop-down-menu-button\"\n        aria-controls={open ? 'data-type-drop-down-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n        variant=\"text\"\n        size=\"small\"\n        sx={{\n          p: 0,\n          minWidth: 'unset',\n          borderRadius: 0,\n          verticalAlign: 'top',\n          textTransform: 'unset'\n        }}\n      >\n        <Typography display=\"inline\" variant=\"h6\" borderBottom=\"dotted\">\n          {returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: dataTypes, showUnit: true })}\n        </Typography>\n        <ArrowDropDownIcon />\n      </Button>\n      <Menu\n        id=\"data-type-drop-down-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'data-type-drop-down-menu-button',\n        }}\n      >\n\n        {dataTypes.map((dataType, index) => (\n          <MenuItem\n            key={index}\n            sx={{ fontSize: '0.8rem' }}\n            onClick={() => handleMenuItemClick(dataType.key)}\n          >\n            {dataType.name_title}\n          </MenuItem>\n        ))}\n\n      </Menu>\n    </>\n  );\n};\n\nexport default DataTypeDropDownMenu;","import { styled } from '@mui/material/styles';\nimport { Tabs } from '@mui/material/';\n\nexport const StyledTabs = styled(Tabs, {\n  shouldForwardProp: (prop) => prop !== 'smallFontSize',\n})(({ theme, smallFontSize = '0.625rem' }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: smallFontSize,\n      padding: theme.spacing(0.5)\n    },\n  },\n  '& .MuiSvgIcon-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: \"1rem\"\n    }\n  }\n}));\n\nexport default StyledTabs;","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tab, useMediaQuery, Typography, Menu, MenuItem, Stack } from '@mui/material/';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nimport SubChart from './Subchart/SubChart';\n\nimport CollapsibleSubtitle from '../Components/CollapsibleSubtitle';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DataTypeDropDownMenu from './DataTypeDropDown';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport StyledTabs from '../Components/StyledTabs';\nimport NoChartToRender from './Subchart/NoChartToRender';\nimport useChartData from '../hooks/useChartData';\nimport LoadingAnimation from '../Components/LoadingAnimation';\n\nconst DEBOUNCE_IN_MILLISECONDS = 100;\n\nconst MAX_NUM_TABS_TO_DISPLAY = 3;\nconst INITIAL_DROPDOWN_MENU_TAB_INDEX = -1;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledMenuItem = styled(MenuItem)(({ theme }) => ({\n  '& .MuiBox-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem'\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponentWrapper({ chartID }) {\n  const { data: chartData, isLoading, isFetching, error } = useChartData(chartID);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  // Props for tab panels (multiple data visualizations in the same chart area, navigate with tab panels)\n  const [currentTab, setCurrentTab] = useState(0); // start with the first tab\n  const [previousTab, setPreviousTab] = useState(0); // keep tracking of previous tab to keep displaying it if the currentTab = initialDropdownMenuTabIndex (selecting the dropdown menu tab)\n  const [dropdownMenuTabIndex, setDropdownMenuTabIndex] = useState(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n  const [dropdownMenuCurrentTitle, setDropdownMenuCurrentTitle] = useState();\n  const [anchorEl, setAnchorEl] = useState(null); // Define anchorEl state for dropdown menu of the tabs\n\n  // Props for dataType management\n  const [allowedDataTypes, setAllowedDataTypes] = useState([]);\n  const [selectedDataType, setSelectedDataType] = useState(null);\n\n  const initializeAllowedDataTypes = (chartData, setAllowedDataTypes, setSelectedDataType) => {\n    if (!chartData?.allowedDataTypes) return;\n\n    const dataTypesArr = chartData.allowedDataTypes.map((dataType) => {\n      const { name_title, name_short, unit } = DataTypes[dataType];\n      return {\n        key: dataType,\n        name_title,\n        name_short,\n        unit,\n      };\n    });\n\n    setAllowedDataTypes(dataTypesArr);\n    setSelectedDataType(chartData.selectedDataType);\n  };\n\n  const setupResizeListener = (setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS) => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      timeoutID = setTimeout(() => {\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  };\n\n  useEffect(() => {\n    if (!chartData) return;\n\n    // Initialize allowed data types\n    initializeAllowedDataTypes(chartData, setAllowedDataTypes, setSelectedDataType);\n\n    // Setup resize listener\n    const cleanupResize = setupResizeListener(setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS);\n\n    // Cleanup listener on unmount\n    return cleanupResize;\n  }, [chartData]);\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  // set tab back to 0 if school is changed\n  useEffect(() => {\n    setPreviousTab(currentTab);\n    setCurrentTab(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentSchoolID]);\n\n  let chartHeight, chartMaxHeight;\n  if (chartData?.chartType !== 'Calendar') {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '450px';\n  }\n\n  // Function to render only one chart (no subchart --> no tab control)\n  const renderOnlyOneChart = () => {\n    if (!isValidArray(chartData.dataArray)) {\n      return <NoChartToRender customMessage={\"Not enough historical data to display this chart\"} />\n    }\n    return (\n      <SubChart\n        selectedDataType={selectedDataType}\n        allowedDataTypes={allowedDataTypes}\n        chartData={chartData}\n        isPortrait={isPortrait}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n      />\n    );\n  }\n\n  // Function to render multiple subcharts with tab control\n  const renderMultipleSubcharts = () => {\n    // Handle tab change\n    const handleTabChange = (__, newIndex) => {\n      setPreviousTab(currentTab);\n      setCurrentTab(newIndex);\n\n      if (needsDropdownMenu && newIndex < MAX_NUM_TABS_TO_DISPLAY && newIndex !== dropdownMenuTabIndex) {\n        setDropdownMenuCurrentTitle();\n        setDropdownMenuTabIndex(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n      }\n    };\n\n    // Determine if dropdown menu is needed\n    const needsDropdownMenu = chartData.subcharts.length > MAX_NUM_TABS_TO_DISPLAY + 1; // maxTabsToDisplay = 3 by default, but here +1 for some leeway, some schools have 4 sensors which is still okay. But if > 4, then only display max 3\n\n    const subchartsDataForTabs = needsDropdownMenu ? chartData.subcharts.slice(0, MAX_NUM_TABS_TO_DISPLAY) : chartData.subcharts;\n    const subchartsDataForDropDownMenu = needsDropdownMenu ? chartData.subcharts.slice(MAX_NUM_TABS_TO_DISPLAY) : null;\n\n    // Function to handle selection from dropdown menu\n    const handleDropdownMenuSelection = (index) => {\n      setPreviousTab(currentTab);\n\n      // Because the original chartData.subcharts array was split in subchartsDataForTabs (length maxTabsToDisplay) and subchartsDataForDropDownMenu (the remaining item), the selected subcharts index is the sum of the length of subchartsDataForTabs array and the index of the selected item from subchartsDataForDropDownMenu\n      setCurrentTab(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Same index with the one above to keep the dropdown menu tab highlighted  \n      setDropdownMenuTabIndex(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Set title of the selected item in the dropdown menu to display it\n      setDropdownMenuCurrentTitle(subchartsDataForDropDownMenu[index].subchartTitleShort);\n\n      // Close the dropdown menu after selection\n      setAnchorEl(null);\n    };\n\n    const getOtherLocationsLabel = () => {\n      return (\n        <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          <Box flex={1}>\n            Other sensors\n            {\n              dropdownMenuCurrentTitle && ` (${dropdownMenuCurrentTitle})`\n            }\n            &nbsp;\n          </Box>\n          < ExpandMoreIcon />\n        </Stack>\n      )\n    }\n\n    const shouldDisplayThisSubchart = (index) => {\n      if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n        return previousTab === index;\n      } else {\n        return currentTab === index;\n      }\n    }\n\n    return (\n      <>\n        <StyledTabs\n          value={currentTab}\n          onChange={handleTabChange}\n          variant={isSmallWidth ? 'fullWidth' : 'standard'}\n        >\n          {subchartsDataForTabs.map((_, index) => (\n            <Tab\n              key={index}\n              value={index}\n              label={chartData.subcharts[index].subchartTitle}\n              sx={{\n                // If this subchart doesn't have a valid dataArray to render chart\n                // Make the Tab's text line-through to let user know\n                textDecoration: !isValidArray(chartData.subcharts[index].dataArray) && 'line-through'\n              }}\n            />\n          ))}\n          {/* Render dropdown menu if needed */}\n          {needsDropdownMenu && (\n            <Tab\n              value={dropdownMenuTabIndex}\n              label={getOtherLocationsLabel()}\n              aria-controls=\"submenu\"\n              aria-haspopup=\"true\"\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n            />\n          )}\n        </StyledTabs>\n        {\n          needsDropdownMenu && <Menu\n            id=\"submenu\"\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={() => {\n              // Reset currentTab to the previous valid tab if the user opened the menu (clicked on the drop down menu tab, if shown), but didn't select any menu item\n              if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n                setPreviousTab(currentTab);\n                setCurrentTab(previousTab);\n              };\n\n              // Close the menu\n              setAnchorEl(null);\n            }}\n          >\n            {/* Render remaining subchart selector in the dropdown menu */}\n            {subchartsDataForDropDownMenu.map((_, index) => (\n              <StyledMenuItem\n                key={index}\n                selected={index === currentTab - MAX_NUM_TABS_TO_DISPLAY}\n                onClick={() => handleDropdownMenuSelection(index)}\n                sx={{\n                  // If this subchart doesn't have a valid dataArray to render chart\n                  // Make the Tab's text line-through to let user know\n                  textDecoration: !isValidArray(chartData.subcharts[index + MAX_NUM_TABS_TO_DISPLAY].dataArray) && 'line-through'\n                }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  <Box>\n                    {subchartsDataForDropDownMenu[index].subchartTitle}\n                  </Box>\n                  {\n                    (index === currentTab - MAX_NUM_TABS_TO_DISPLAY) &&\n                    <VisibilityIcon fontSize=\"1rem\" sx={{ color: 'text.secondary' }} />\n                  }\n                </Stack>\n              </StyledMenuItem>\n            ))}\n          </Menu>\n        }\n\n        <Box\n          position=\"relative\"\n          sx={{\n            overflowX: isPortrait && 'auto',\n            WebkitOverflowScrolling: isPortrait && 'touch',\n            overflowY: 'hidden',\n          }}\n        >\n\n          {chartData.subcharts.map((__, index) => (\n            <Box\n              key={index}\n              width=\"100%\"\n              height=\"100%\"\n              role=\"tabpanel\"\n              sx={{\n                transition: '0.35s',\n                position: (index === 0) ? '' : 'absolute',\n                opacity: shouldDisplayThisSubchart(index) ? '1' : '0',\n                pointerEvents: shouldDisplayThisSubchart(index) ? 'auto' : 'none',\n                top: (index === 0) ? '' : 0,\n                overflowX: 'auto',\n                overflowY: 'hidden',\n              }}\n            >\n              <SubChart\n                selectedDataType={selectedDataType}\n                allowedDataTypes={allowedDataTypes}\n                chartData={chartData}\n                subchartIndex={index}\n                isPortrait={isPortrait}\n                windowSize={windowSize}\n                height={chartData.height ? chartData.height : chartHeight}\n                maxHeight={\n                  ['Calendar'].includes(chartData.chartType)\n                    ? ''\n                    : chartMaxHeight\n                }\n                currentSubchart={currentTab}\n              />\n            </Box>\n          ))}\n        </Box>\n      </>\n    )\n  };\n\n  // Function to render remaining subtitles and references for chart with multiple subcharts\n  const getSubtitles = () => {\n    let text = chartData.subtitle || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.subchartSubtitle) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].subchartSubtitle;\n    }\n    return text;\n  }\n  const getReferences = () => {\n    let text = chartData.reference || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.reference) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].reference;\n    }\n    return text;\n  }\n\n  if (!chartData) return;\n\n  if (isLoading) return <LoadingAnimation optionalText={`Loading chart ${chartID + 1}...`} />;\n  if (error) return <NoChartToRender customMessage={`Error loading chart ${chartID + 1}, please try later`} />\n\n  return (\n    <Box\n      position=\"relative\"\n    >\n      <Box>\n        <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n          {chartID + 1}. {chartData.title}\n          &nbsp;\n        </Typography>\n        <Box display=\"inline\">\n          <DataTypeDropDownMenu\n            selectedDataType={selectedDataType}\n            dataTypes={allowedDataTypes}\n            chartID={chartID}\n          />\n        </Box>\n      </Box>\n\n      <ChartStyleWrapper height=\"100%\" sx={{\n        filter: isFetching ? 'blur(1px)' : 'none',\n        transition: 'filter 0.2s',\n        pointerEvents: isFetching ? \"none\" : \"auto\",\n      }}>\n        {isValidArray(chartData.subcharts) ? renderMultipleSubcharts() : renderOnlyOneChart()}\n\n        {/* Render subtitle and reference below */}\n        <Box sx={{ my: 3 }}>\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mb: 1 }}\n          >\n            <CollapsibleSubtitle\n              text={getSubtitles()}\n              reference={getReferences()}\n            />\n          </Typography>\n        </Box>\n      </ChartStyleWrapper>\n\n      {isFetching && (\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(255,255,255,0.3)',\n            zIndex: 10,\n          }}\n        >\n          <LoadingAnimation />\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default ChartComponentWrapper;\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from '../SpeedDial/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport AirQualityIndexTable from './AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable tiny hideAQIDescription />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useState, useContext } from \"react\";\nimport { Button, Menu, MenuItem } from \"@mui/material\";\nimport TvIcon from \"@mui/icons-material/Tv\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\nimport { isValidArray } from \"../../../Utils/UtilFunctions\";\nimport useSchoolMetadata from \"../../../hooks/useSchoolMetadata\";\n\n// Use this code block if TV screen should be only for logged in users even for publicly available institutions\n// import useLoginHandler from \"../../Account/useLoginHandler\";\n\nconst ScreenDropDownMenu = () => {\n  // Use this code block if TV screen should be only for logged in users even for publicly available institutions\n  // const ScreenDropDownMenu = ({ onButtonClick }) => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  // Use this code block if TV screen should be only for logged in users even for publicly available institutions\n  // const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const navigate = useNavigate();\n\n  if (!schoolMetadata) return null;\n\n  const screens = schoolMetadata.screens;\n\n  if (!isValidArray(screens)) return null;\n\n  const handleSingleScreenClick = () => {\n    const screen_name = screens && screens[0]?.screen_name;\n    if (screen_name === \"screen\") navigate(`/screen/${currentSchoolID}`);\n    else navigate(`/screen/${currentSchoolID}/${screen_name}`);\n\n    // Use this code block if TV screen should be only for logged in users even for publicly available institutions\n    // handleRestrictedAccess(() => {\n    //   const screen_name = screens && screens[0]?.screen_name;\n    //   if (screen_name === \"screen\") navigate(`/screen/${currentSchoolID}`);\n    //   else navigate(`/screen/${currentSchoolID}/${screen_name}`);\n    // });\n  };\n\n  // If there is only 1 screen, show a single button\n  if (screens.length <= 1) {\n    return (\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        onClick={handleSingleScreenClick}\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />&nbsp;TV Screen\n      </Button>\n    );\n  }\n\n  // If there are multiple screens, show a dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleMenuItemClick = (screenName) => {\n    navigate(`/screen/${currentSchoolID}/${screenName}`);\n\n    // Use this code block if TV screen should be only for logged in users even for publicly available institutions\n    // handleRestrictedAccess(() => {\n    //   setAnchorEl(null);\n    //   navigate(`/screen/${currentSchoolID}/${screenName}`);\n    // });\n  };\n\n  const handleMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n\n    // Use this code block if TV screen should be only for logged in users even for publicly available institutions\n    // handleRestrictedAccess(() => setAnchorEl(event.currentTarget));\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Button\n        id=\"basic-button\"\n        aria-controls={open ? \"tv-screen-list-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleMenuOpen}\n        variant=\"contained\"\n        size=\"small\"\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />\n        &nbsp;\n        TV Screens\n      </Button>\n      <Menu\n        id=\"tv-screen-list-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleMenuClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        {screens.map((screen, index) => (\n          <MenuItem\n            key={index}\n            onClick={() => handleMenuItemClick(screen.screen_name)}\n            sx={{ fontSize: \"0.8rem\" }}\n          >\n            {screen.location_long}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default ScreenDropDownMenu;\n","import { useState, useContext } from 'react';\nimport { Chip, Tooltip, IconButton, Dialog, Button, DialogActions, DialogTitle, DialogContent, useMediaQuery } from '@mui/material';\nimport * as Tracking from '../../Utils/Tracking';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { useTheme } from '@mui/material';\n\nconst CustomDialog = (props) => {\n  const {\n    buttonIcon,\n    buttonIconAria,\n    buttonLabel,\n    buttonVariant = 'contained',\n    trackingEvent,\n    dialogTitle,\n    dialogOpenHandler = null,\n    dialogCloseHandler = null,\n    displaySchoolID = true,\n    maxWidth = \"lg\",\n    children,\n    disabled\n  } = props;\n\n  let iconOnly;\n  if (buttonIcon && !buttonLabel) iconOnly = true;\n  else iconOnly = false;\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    if (dialogOpenHandler) {\n      dialogOpenHandler(() => {\n        setOpen(true); // Only opens if dialogOpenHandler allows it\n        if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n      });\n    } else {\n      setOpen(true);\n      if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n    }\n  };\n\n  const onClose = () => {\n    setOpen(false);\n    if (dialogCloseHandler) dialogCloseHandler();\n  };\n\n  const theme = useTheme();\n\n  const displayButton = () => {\n    if (iconOnly) return (\n      <Tooltip title={buttonIconAria}>\n        <IconButton\n          onClick={onOpen}\n          aria-label={buttonIconAria}\n          size=\"small\"\n          sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n          disabled={disabled}\n        >\n          {buttonIcon}\n        </IconButton>\n      </Tooltip>\n    );\n\n    else return (\n      <Button\n        onClick={onOpen}\n        variant={buttonVariant}\n        disabled={disabled}\n        size=\"small\"\n      >\n        {buttonIcon}&nbsp;{buttonLabel}\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {displayButton()}\n\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth={maxWidth}\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        <DialogActions sx={{ justifyContent: \"start\" }}>\n          <Button onClick={onClose}>\n            <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n          </Button>\n        </DialogActions>\n\n        <DialogTitle>\n          {displaySchoolID === true ?\n            (<>\n              <Chip\n                label={currentSchoolID ? `School: ${currentSchoolID.toUpperCase()}` : \"No School\"}\n                size=\"small\"\n                display=\"block\"\n                sx={{ mb: 1 }}\n              />\n              <br />\n            </>\n            ) : null}\n\n          {dialogTitle}\n        </DialogTitle>\n\n        <DialogContent>\n          {children}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CustomDialog;\n","import { useContext, useCallback } from \"react\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\n\nconst useLoginHandler = (openLoginPopup) => {\n    const { authenticationState, user } = useContext(UserContext);\n    const loggedIn = authenticationState.authenticated && authenticationState.checkedAuthentication;\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleRestrictedAccess = useCallback(\n        (action) => {\n            if (!loggedIn) {\n                openLoginPopup?.();\n                return false;\n            } else {\n                if (user?.allowedSchools.some(school => school.school_id === currentSchoolID)) {\n                    action?.();\n                    return true;\n                } else {\n                    enqueueSnackbar(`Your account does not have access to ${currentSchoolID.toUpperCase()} Alerts`, SnackbarMetadata.error);\n                    return false;\n                }\n            }\n        },\n        [loggedIn, openLoginPopup, currentSchoolID, user, enqueueSnackbar]\n    );\n\n    return {\n        loggedIn,\n        handleRestrictedAccess,\n    };\n};\n\nexport default useLoginHandler;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Button, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from '../../API/ApiFetch';\nimport { SupportedFetchExtensions } from \"../../API/Utils\";\nimport { getRawDatasetUrl } from '../../API/ApiUrls';\nimport LoadingAnimation from '../LoadingAnimation';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport CustomDialog from '../CustomDialog/CustomDialog';\nimport { CITIESair } from '../../Utils/GlobalVariables';\nimport useLoginHandler from '../Account/useLoginHandler';\nimport AggregationType from '../DateRangePicker/AggregationType';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\n\nexport default function DatasetDownloadDialog({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n\n  const [sensorsDatasets, updateSensorsDatasets] = useState({});\n\n  const [previewingDataset, setPreviewingDataset] = useState(\"placeholder\");\n\n  // Construct the structure of sensorsDatasets based on current data\n  useEffect(() => {\n    if (!currentSensorsData) return;\n\n    const sensorsDatasets = currentSensorsData\n      .filter(item => item && item.sensor)  // Filter out null or undefined items and sensors\n      .reduce((acc, item) => {\n        // Use location_short as the key for each sensor\n        const key = item.sensor.location_short;\n        acc[key] = {\n          location_type: item.sensor.location_type,\n          location_short: item.sensor.location_short,\n          location_long: item.sensor.location_long,\n          last_seen: item.sensor.last_seen?.split('T')[0],\n          rawDatasets: Object.keys(AggregationType).reverse().reduce((datasetAcc, datasetKey) => {\n            datasetAcc[AggregationType[datasetKey]] = {\n              sample: null,\n              full: null\n            };\n            return datasetAcc;\n          }, {})\n        };\n        return acc;\n      }, {});\n\n    updateSensorsDatasets(sensorsDatasets);\n  }, [currentSensorsData]);\n\n  return (\n    <CustomDialog\n      buttonIcon={<DataObjectIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Dataset\"\n      trackingEvent={Tracking.Events.rawDatasetButtonClicked}\n      dialogTitle=\"Preview and download raw dataset(s)\"\n      dialogOpenHandler={((action) => {\n        setPreviewingDataset(null);\n        handleRestrictedAccess(action);\n      })}\n    >\n      <DatasetSelectorAndPreviewer\n        sensorsDatasets={sensorsDatasets}\n        updateSensorsDatasets={updateSensorsDatasets}\n        previewingDataset={previewingDataset}\n        setPreviewingDataset={setPreviewingDataset}\n        schoolID={currentSchoolID}\n      />\n      {\n        sensorsDatasets &&\n        <Typography variant=\"caption\" sx={{ my: 2, fontStyle: 'italic', display: \"block\" }} >\n          These datasets are provided by {CITIESair} from sensors operated by {CITIESair}. Should you intend to utilize them for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n        </Typography>\n      }\n    </CustomDialog>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, setPreviewingDataset, schoolID } = props;\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Preview the hourly type of the first sensor initially\n  useEffect(() => {\n    if (Object.keys(sensorsDatasets).length > 0 && !previewingDataset) {\n      const firstSensor = Object.keys(sensorsDatasets)[0];\n      const initialDatasetType = AggregationType.hour;\n\n      setPreviewingDataset({\n        sensor: firstSensor,\n        datasetType: initialDatasetType\n      });\n\n      // If this dataset has been fetched before, early return\n      if (sensorsDatasets[firstSensor].rawDatasets[initialDatasetType].sample) return;\n\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: firstSensor,\n        aggregationType: initialDatasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[firstSensor].rawDatasets[initialDatasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [sensorsDatasets, previewingDataset]);\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"start\"\n      spacing={smallScreen ? 1 : 2}\n      sx={{ mt: 0, overflowY: 'scroll', overflowX: 'hidden' }}\n    >\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          schoolID={schoolID}\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          previewingDataset={previewingDataset}\n          schoolID={schoolID}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { schoolID, sensorsDatasets, smallScreen, previewingDataset, setPreviewingDataset, updateSensorsDatasets } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed'\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Sensor Location\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>\n            Average Period\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sensorsDatasets && Object.keys(sensorsDatasets).map((location_short) => (\n          <Dataset\n            key={location_short}\n            schoolID={schoolID}\n            smallScreen={smallScreen}\n            sensor={location_short}\n            sensorsDatasets={sensorsDatasets}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={location_short === previewingDataset?.sensor}\n            updateSensorsDatasets={updateSensorsDatasets}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { schoolID, sensorsDatasets, sensor, previewingDataset, setPreviewingDataset, isPreviewing, updateSensorsDatasets } = props;\n\n  const [selectedDatasetType, setSelectedDatasetType] = useState(AggregationType.hour);\n\n  useEffect(() => {\n    if (selectedDatasetType !== AggregationType.hour) setSelectedDatasetType(AggregationType.hour);\n  }, [schoolID])\n\n  const handleDatasetTypeChange = (event) => {\n    const selectedVal = event.target.value;\n    setSelectedDatasetType(selectedVal);\n    setPreviewingDataset({ datasetType: selectedVal, sensor });\n    fetchThisDataset(selectedVal);\n  };\n\n  const fetchThisDataset = (datasetType) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!sensorsDatasets[sensor].rawDatasets[datasetType].sample) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: sensorsDatasets[sensor].location_short,\n        aggregationType: datasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[sensor].rawDatasets[datasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        });\n    }\n  }\n\n  const setThisSensorToPreview = () => {\n    if (previewingDataset?.sensor !== sensor) {\n      setPreviewingDataset({\n        datasetType: selectedDatasetType,\n        sensor: sensor\n      });\n      fetchThisDataset(selectedDatasetType);\n    }\n  }\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <TableRow key={sensor}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisSensorToPreview}>\n          {sensorsDatasets[sensor].location_long}\n        </TableCell>\n\n        <TableCell\n          sx={{\n            position: 'relative',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}>\n          <FormControl size=\"small\">\n            <Select\n              value={selectedDatasetType}\n              onChange={handleDatasetTypeChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {Object.keys(sensorsDatasets[sensor].rawDatasets).reverse().map((datasetType, index) => (\n                <MenuItem\n                  key={index}\n                  value={datasetType}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {datasetType.charAt(0).toUpperCase() + datasetType.slice(1).toLowerCase()}\n                  </Stack>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, schoolID, smallScreen } = props;\n  const theme = useTheme();\n\n  const [previewingDatasetName, setPreviewingDatasetName] = useState(\"Not previewing any dataset\");\n  const [csvFileName, setCsvFileName] = useState(\"No dataset\");\n  const [isDatasetLoading, setIsDatasetLoading] = useState(false);\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset) return;\n\n    const fetchedDataset = sensorsDatasets[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full;\n\n    // Fetch the full dataset if it has not been fetched before\n    if (!fetchedDataset) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: previewingDataset.sensor,\n        aggregationType: previewingDataset.datasetType,\n        isSample: false\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true }).then((data) => {\n        const tmp = { ...sensorsDatasets };\n        tmp[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full = data;\n        updateSensorsDatasets(tmp);\n\n        convertCSVforDownload(data);\n      });\n    }\n    else {\n      convertCSVforDownload(fetchedDataset);\n    }\n\n  };\n\n  const convertCSVforDownload = (dataset) => {\n    const blob = new Blob([dataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = csvFileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  }\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowNumber, setRowNumber] = useState('');\n\n  useEffect(() => {\n    // If no dataset is chosen to be previewed, early return\n    if (!previewingDataset) return;\n\n    // Update previewing dataset name regardless if the dataset preview has finished loading\n    setPreviewingDatasetName(`Previewing: ${previewingDataset.sensor} (${previewingDataset.datasetType})`);\n\n    // Get the raw dataset\n    const csvData = sensorsDatasets[previewingDataset.sensor]?.rawDatasets[previewingDataset.datasetType]?.sample;\n\n    // If it is empty, then it hasn't been loaded yet\n    if (!csvData) {\n      setRowNumber(null);\n      setFormattedData(null);\n      setCsvFileName(\"Loading...\");\n      setIsDatasetLoading(true);\n      return;\n    };\n\n    if (isDatasetLoading) setIsDatasetLoading(false);\n\n    const lines = csvData.split('\\n');\n\n    const headers = lines[0].split(',');\n    const rows = lines.slice(1);\n\n    setRowNumber([\n      \"\",\n      ...rows.map(row => row.split(',')[0])\n    ].join('\\n'));\n\n    setFormattedData([\n      headers.slice(1).join(','), // Keep the headers for the rest of the columns\n      ...rows.map(row => row.split(',').slice(1).join(',')) // Remove the first column from each row\n    ].join('\\n'));\n\n    // Get the second column of the last row and extract the date part to set the csv's file name\n    let dateString;\n    if (rows.length > 0) {\n      const lastRow = rows[rows.length - 1];\n      const columns = lastRow.split(',');\n      if (columns.length >= 2) {\n        const dateTimeString = columns[1]; // Get the second column\n        dateString = dateTimeString.split('T')[0]; // Extract the date part\n      }\n    }\n\n    const csvFileName = `${schoolID}-${previewingDataset.sensor}-${previewingDataset.datasetType}-${dateString}.csv`;\n    setCsvFileName(csvFileName);\n  }, [previewingDataset, sensorsDatasets]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDatasetName}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: 1,\n            height: smallScreen ? '11.8rem' : '14rem',\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack\n            direction=\"row\"\n            sx={{ fontSize: '0.75rem' }}\n          >\n            {\n              formattedData ?\n                <>\n                  <Box sx={{ mr: 2, userSelect: 'none' }}>\n                    {rowNumber}\n                  </Box>\n                  <Box>\n                    {formattedData}\n                  </Box>\n                </>\n                :\n                <LoadingAnimation optionalText=\"Loading\" />\n            }\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              dataset_type: previewingDataset?.datasetType,\n              sensor: previewingDataset?.sensor\n            });\n          }}\n          disabled={isDatasetLoading}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {csvFileName}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","import { useContext, useEffect, useRef, useState } from 'react';\nimport { Box, TextField, Chip, Menu, MenuItem, Grid, Typography, Button, Stack, useMediaQuery, Alert, Tooltip, Link, CircularProgress } from '@mui/material';\nimport { fetchDataFromURL } from \"../../../API/ApiFetch\";\nimport { RESTmethods } from \"../../../API/Utils\";\nimport { getApiUrl } from '../../../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../../../API/Utils\";\nimport { DashboardContext } from '../../../ContextProviders/DashboardContext';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { validateEmail } from '../../../Utils/UtilFunctions';\nimport { useSnackbar } from 'notistack';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nconst compareArrays = (arr1, arr2) => {\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n}\n\nconst EmailsInput = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: alertEmails = [] } = useQuery({\n    queryKey: [GeneralAPIendpoints.alertsEmails, currentSchoolID],\n    queryFn: async () => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        extension: 'json',\n        needsAuthorization: true\n      });\n    },\n    enabled: !!currentSchoolID,\n    staleTime: 0\n  });\n\n  const queryClient = useQueryClient();\n  const saveEmailsMutation = useMutation({\n    mutationFn: async (emailsToSave) => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        restMethod: RESTmethods.POST,\n        body: emailsToSave\n      });\n    },\n    onSuccess: (data) => {\n      // Update cache immediately so UI updates without refetch\n      queryClient.setQueryData([GeneralAPIendpoints.alertsEmails, currentSchoolID], data);\n      enqueueSnackbar('Email recipients saved successfully.', SnackbarMetadata.success);\n    },\n    onError: () => {\n      enqueueSnackbar('There was an error saving email recipients. Please try again.', SnackbarMetadata.error);\n    }\n  });\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [localEmails, setLocalEmails] = useState([]);\n  const [emailsListChanged, setEmailsListChanged] = useState(false);\n\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [menuAnchor, setMenuAnchor] = useState(null);\n\n  const [saveButtonTooltipTitle, setSaveButtonTooltipTitle] = useState('');\n\n  const maxEmails = 150;\n\n  useEffect(() => {\n    setLocalEmails(alertEmails);\n  }, [alertEmails]);\n\n  useEffect(() => {\n    setEmailsListChanged(!compareArrays(localEmails, alertEmails));\n  }, [localEmails, alertEmails]);\n\n  useEffect(() => {\n    setSaveButtonTooltipTitle(emailsListChanged ? \"Click to save new changes on server\" : \"No changes detected to save\");\n  }, [emailsListChanged]);\n\n  const handleAddEmail = (passedEmail, isBulkAdding = false) => {\n    let email = passedEmail.trim().toLowerCase();\n\n    // Strip <> if present\n    if (email.startsWith('<') && email.endsWith('>')) {\n      email = email.slice(1, -1).trim();\n    }\n\n    // Skip if email is empty\n    if (!email) return;\n\n    // If email is invalid\n    if (!validateEmail(email)) {\n      if (!isBulkAdding) enqueueSnackbar(`Invalid email address: ${email}`, SnackbarMetadata.error);\n      return;\n    }\n\n    // Skip if email already exists\n    if (localEmails.includes(email)) {\n      enqueueSnackbar(isBulkAdding ? `Some pasted email addresses already existed` : `Already existed: ${email}`, SnackbarMetadata.error);\n      return;\n    }\n\n    // Add email if max not reached\n    if (localEmails.length >= maxEmails) {\n      enqueueSnackbar('Maximum number of recipients reached', SnackbarMetadata.warning);\n      return;\n    }\n\n    setLocalEmails(prev => [...prev, email]);\n    setCurrentEmail('');\n  };\n\n  const handleDeleteEmail = (index) => {\n    const newEmails = localEmails.filter((_, i) => i !== index);\n    setLocalEmails(newEmails);\n  };\n\n  const handleEditEmail = (index) => {\n    setCurrentEmail(localEmails[index]);\n    handleDeleteEmail(index);\n  };\n\n  const handleCopyEmail = (index) => {\n    const emailToCopy = localEmails[index];\n    if (!emailToCopy) return;\n\n    navigator.clipboard.writeText(emailToCopy)\n      .then(() => {\n        enqueueSnackbar(`Copied to clipboard: ${emailToCopy}`, SnackbarMetadata.success);\n      })\n      .catch(() => {\n        enqueueSnackbar('Failed to copy email to clipboard.', SnackbarMetadata.error);\n      });\n  };\n\n  const wrapperRef = useRef(null);\n  const inputRef = useRef(null);\n  const prevInputRef = useRef('');\n  const [allSelected, setAllSelected] = useState(false);\n\n  // Document-level keyboard handler\n  useEffect(() => {\n    const handleGlobalKeyDown = (e) => {\n      if (!e?.key) return;\n\n      const key = e.key.toLowerCase();\n      const isMeta = e.metaKey || e.ctrlKey;\n      const active = document.activeElement;\n      const isInputFocused = active === inputRef.current;\n\n      // 1️⃣ Select All (Cmd/Ctrl + A)\n      if (isMeta && key === 'a') {\n        // only when input is empty\n        if (isInputFocused && currentEmail.trim() === '') {\n          e.preventDefault();\n          setAllSelected(true);\n\n          // move focus to wrapper for subsequent keys\n          if (wrapperRef.current) wrapperRef.current.focus({ preventScroll: true });\n        }\n        return;\n      }\n\n      // 2️⃣ Copy (Cmd/Ctrl + C)\n      if (isMeta && key === 'c' && allSelected) {\n        e.preventDefault();\n        if (localEmails.length === 0) {\n          enqueueSnackbar('No emails to copy.', SnackbarMetadata.warning);\n          return;\n        }\n\n        navigator.clipboard.writeText(localEmails.join(', '))\n          .then(() => enqueueSnackbar('All emails copied to clipboard.', SnackbarMetadata.success))\n          .catch(() => enqueueSnackbar('Failed to copy emails.', SnackbarMetadata.error));\n        return;\n      }\n\n      // 3️⃣ Delete all (Backspace or Delete)\n      if (allSelected && (key === 'backspace' || key === 'delete')) {\n        e.preventDefault();\n        if (localEmails.length === 0) return;\n\n        setLocalEmails([]);\n        setAllSelected(false);\n        enqueueSnackbar('All emails deleted.', SnackbarMetadata.info);\n        return;\n      }\n\n      // 4️⃣ Escape clears selection\n      if (key === 'escape' && allSelected) {\n        e.preventDefault();\n        setAllSelected(false);\n        return;\n      }\n    };\n\n    window.addEventListener('keydown', handleGlobalKeyDown);\n    return () => window.removeEventListener('keydown', handleGlobalKeyDown);\n  }, [currentEmail, allSelected, localEmails, enqueueSnackbar]);\n\n\n  // Clear selection on click outside of wrapper (or any click that isn't selecting)\n  useEffect(() => {\n    const handleDocumentClick = (e) => {\n      if (!wrapperRef.current) return;\n\n      // if click is inside wrapper, do nothing (we keep selection)\n      if (wrapperRef.current.contains(e.target)) return;\n\n      // clicking outside clears selection\n      if (allSelected) setAllSelected(false);\n    };\n\n    document.addEventListener('mousedown', handleDocumentClick);\n    return () => document.removeEventListener('mousedown', handleDocumentClick);\n  }, [allSelected]);\n\n  // Optional: clear selection when editing or adding a new email\n  useEffect(() => {\n    if (currentEmail !== '' && allSelected) {\n      setAllSelected(false);\n    }\n  }, [currentEmail, allSelected]);\n\n  const handleMenuOpen = (event, index) => {\n    setMenuAnchor({ index, element: event.currentTarget });\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchor(null);\n  };\n\n  const handlePaste = (event) => {\n    const pastedText = event.clipboardData.getData('text');\n    event.preventDefault();\n\n    const emails = pastedText\n      .split(/[\\s,;\\t]+/) // splits on comma, semicolon, any whitespace, or tab\n      .map(email => email.trim())\n      .filter(email => email !== '');\n\n    emails.forEach(email => handleAddEmail(email, emails.length > 1));\n    setCurrentEmail(''); // clear input after pasting\n  };\n\n  const handleSaveEmails = (_emails) => {\n    const emailsToSave = isValidArray(_emails) ? _emails : (isValidArray(localEmails) ? localEmails : []);\n    saveEmailsMutation.mutate(emailsToSave);\n  }\n\n  useEffect(() => {\n    const handleBeforeUnload = (event) => {\n      if (!compareArrays(localEmails, alertEmails)) {\n        event.preventDefault();\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [localEmails, alertEmails]);\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" wrap=\"wrap\">\n        <Grid item>\n          <Typography\n            variant='body1'\n            fontWeight={500}\n            sx={{ p: 0, mb: smallScreen && 1, mr: !smallScreen && 2 }}\n          >\n            Email Recipients:\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          lg\n          sx={{\n            overflowY: \"scroll\",\n            maxHeight: \"300px\"\n          }}\n        >\n          <Grid\n            ref={wrapperRef}\n            id=\"emails-container\"\n            tabIndex={-1} // focusable programmatically\n            container\n            alignItems=\"center\"\n            sx={{\n              border: '1px solid rgba(0, 0, 0, 0.23)',\n              borderRadius: 2,\n              p: 0.5,\n              flexWrap: 'wrap',\n              width: '100%',\n              outline: 'none'\n            }}\n          >\n            {localEmails.map((email, index) => (\n              <Grid item key={index} sx={{ m: 0.5 }}>\n                <Chip\n                  label={email}\n                  onDelete={() => handleDeleteEmail(index)}\n                  onClick={(event) => handleMenuOpen(event, index)}\n                  onContextMenu={(event) => {\n                    event.preventDefault();\n                    handleMenuOpen(event, index)\n                  }}\n                  color={allSelected || (Boolean(menuAnchor) && menuAnchor.index === index) ? \"primary\" : \"default\"}\n                />\n              </Grid>\n            ))}\n\n            {\n              localEmails.length < maxEmails ? (\n                <Grid item xs={12} sm minWidth=\"200px\" >\n                  <TextField\n                    inputRef={inputRef}\n                    fullWidth\n                    variant=\"standard\"\n                    value={currentEmail}\n                    onChange={(e) => {\n                      const tmp = e.target.value;\n                      const native = e.nativeEvent || {};\n                      const inputType = (native.inputType || '').toString();\n                      const isComposing = !!native.isComposing || !!e.isComposing;\n\n                      setCurrentEmail(tmp);\n                      if (tmp !== '') {\n                        setSaveButtonTooltipTitle(\"Finalize currently edited email by pressing Enter/Return\");\n                      }\n\n                      if (isComposing) {\n                        prevInputRef.current = tmp;\n                        return;\n                      }\n\n                      const maybeEmail = tmp.trim();\n\n                      // Only trigger on autofill-like updates, paste, or other non-manual input\n                      const autofillLike = /insertReplacementText|insertFromPaste|insertFromDrop|insertFromAutocomplete/i.test(inputType);\n                      const jumpedIn = prevInputRef.current === '' && tmp.length > 1 && inputType !== 'insertText';\n\n                      if (validateEmail(maybeEmail) && (autofillLike || jumpedIn)) {\n                        // Let autofill finish internal update before adding\n                        setTimeout(() => handleAddEmail(tmp), 0);\n                      }\n\n                      prevInputRef.current = tmp;\n                    }}\n\n                    onKeyUp={(e) => {\n                      if (['Enter', 'Spacebar', ' '].includes(e.key)) {\n                        handleAddEmail(currentEmail);\n                      }\n                    }}\n                    onPaste={handlePaste}\n                    placeholder=\"Add recipient\"\n                    sx={{\n                      mx: 0.5\n                    }}\n                    InputProps={{\n                      disableUnderline: true,\n                      style: { textTransform: \"lowercase\" }\n                    }}\n                  />\n                </Grid>\n              ) : null\n            }\n          </Grid>\n        </Grid>\n\n      </Grid>\n\n      <Stack sx={{ mt: 1 }} spacing={1} alignItems={smallScreen ? \"stretch\" : \"end\"}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" gap={1}>\n          <Typography\n            variant=\"caption\"\n            display=\"block\"\n            color=\"text.secondary\"\n            textAlign=\"right\"\n          >\n            {localEmails.length} / {maxEmails} recipient{localEmails.length > 1 ? 's' : null} added\n          </Typography>\n\n          <Link\n            variant=\"caption\"\n            sx={{\n              cursor: \"pointer\"\n            }}\n            onClick={(e) => {\n              e.preventDefault();\n              setCurrentEmail('');\n              setLocalEmails([])\n            }}\n          >\n            Clear All\n          </Link>\n        </Stack>\n\n        {\n          alertEmails.length === 0 ?\n            (\n              <Alert\n                severity='error'\n                sx={{\n                  mt: 1\n                }}>\n                The alert(s) above will not be sent unless at least one email recipient is saved\n              </Alert>\n            ) : null\n        }\n\n        <Tooltip title={saveButtonTooltipTitle} enterTouchDelay={0}>\n          {/* Span is needed to display Tooltip on a disabled Button */}\n          <span>\n            <Button\n              onClick={handleSaveEmails}\n              variant=\"contained\"\n              sx={{ width: smallScreen ? \"100%\" : \"fit-content\" }}\n              disabled={!emailsListChanged || saveEmailsMutation.isPending}\n            >\n              {saveEmailsMutation.isPending ? <CircularProgress disableShrink color=\"inherit\" size=\"1.5rem\" /> : \"SAVE EMAIL LIST\"}\n            </Button>\n          </span>\n        </Tooltip>\n\n      </Stack>\n\n      <Menu\n        anchorEl={menuAnchor?.element}\n        open={Boolean(menuAnchor)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem\n          onClick={() => {\n            handleEditEmail(menuAnchor.index);\n            handleMenuClose();\n          }}\n        >\n          Edit\n        </MenuItem>\n\n        <MenuItem\n          onClick={() => {\n            handleCopyEmail(menuAnchor.index);\n            handleMenuClose();\n          }}\n        >\n          Copy\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport default EmailsInput;\n","import SpeedIcon from '@mui/icons-material/Speed';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\n\nconst AlertTypes = {\n  threshold: {\n    id: \"threshold\",\n    index: 0,\n    name: \"Threshold\",\n    tableColumnHeader: \"Threshold\",\n    icon: <SpeedIcon />\n  },\n  daily: {\n    id: \"daily\",\n    index: 1,\n    name: \"Daily\",\n    tableColumnHeader: \"Alert Hour\",\n    icon: <CalendarMonthIcon />\n  }\n};\n\nexport const ThresholdAlertTypes = {\n  below_threshold: {\n    id: 'below_threshold',\n    sign: \"<\",\n    name: \"below\"\n  },\n  above_threshold: {\n    id: 'above_threshold',\n    sign: \"≥\",\n    name: \"above\"\n  }\n}\n\nexport default AlertTypes;","import AlertTypes, { ThresholdAlertTypes } from \"./AlertTypes\";\nimport { PREDEFINED_TIMERANGES } from \"../../TimeRange/TimeRangeUtils\";\n\nexport const CrudTypes = {\n  add: 'ADD',\n  edit: 'EDIT',\n  delete: 'DELETE'\n}\n\nexport const SharedColumnHeader = {\n  location: \"Location\",\n  dataType: \"Data Type\",\n  selectedDaysOfWeek: \"Days\",\n  createdBy: \"Created By\"\n}\n\nexport const AirQualityAlertKeys = {\n  id: \"id\",\n  alert_type: \"alert_type\",\n  sensor_id: \"sensor_id\",\n  location_short: \"location_short\",\n  datatypekey: \"datatypekey\",\n  threshold_value: \"threshold_value\",\n  days_of_week: \"days_of_week\",\n  minutespastmidnight: \"minutespastmidnight\",\n  time_range: \"time_range\",\n  is_enabled: \"is_enabled\",\n  excluded_dates: \"excluded_dates\",\n  owner_role: \"owner_role\",\n  self_is_owner: \"self_is_owner\",\n  is_allowed_to_modify: \"is_allowed_to_modify\",\n  message: \"message\",\n  max_once_a_day: \"max_once_a_day\",\n  parent_alert_id: \"parent_alert_id\",\n  child_alert: \"child_alert\",\n  has_child_alert: \"has_child_alert\"\n};\n\nexport const getAlertDefaultPlaceholder = (alert_type = AlertTypes.daily.id) => {\n  let localAlertType, localOppositeAlertType;\n  if (alert_type === AlertTypes.threshold.id) {\n    localAlertType = ThresholdAlertTypes.above_threshold.id;\n    localOppositeAlertType = ThresholdAlertTypes.below_threshold.id;\n  }\n\n  return {\n    [AirQualityAlertKeys.id]: '',\n    [AirQualityAlertKeys.alert_type]: localAlertType || alert_type,\n    [AirQualityAlertKeys.sensor_id]: '',\n    [AirQualityAlertKeys.datatypekey]: '',\n    [AirQualityAlertKeys.days_of_week]: [0, 1, 2, 3, 4],\n    [AirQualityAlertKeys.time_range]: alert_type === AlertTypes.threshold.id ? [PREDEFINED_TIMERANGES.schoolHour.start, PREDEFINED_TIMERANGES.schoolHour.end] : null,\n    [AirQualityAlertKeys.threshold_value]: -1,\n    [AirQualityAlertKeys.minutespastmidnight]: '',\n    [AirQualityAlertKeys.is_enabled]: true,\n    [AirQualityAlertKeys.excluded_dates]: [],\n    [AirQualityAlertKeys.message]: '',\n    [AirQualityAlertKeys.max_once_a_day]: true,\n    [AirQualityAlertKeys.parent_alert_id]: null,\n    [AirQualityAlertKeys.has_child_alert]: false,\n    [AirQualityAlertKeys.child_alert]: alert_type === AlertTypes.threshold.id ? {\n      [AirQualityAlertKeys.alert_type]: localOppositeAlertType || alert_type,\n      [AirQualityAlertKeys.threshold_value]: -1,\n      [AirQualityAlertKeys.message]: '',\n    } : null,\n  }\n}\n\nexport const addChildToAlerts = (alertList = []) => {\n  const processed = [...alertList];\n\n  processed.forEach(alert => {\n    if (!alert) return;\n\n    const isChild = !!alert[AirQualityAlertKeys.parent_alert_id];\n\n    if (isChild) {\n      const parent = processed.find(\n        a => a[AirQualityAlertKeys.id] === alert[AirQualityAlertKeys.parent_alert_id]\n      );\n\n      if (parent) {\n        parent[AirQualityAlertKeys.has_child_alert] = true;\n        parent[AirQualityAlertKeys.child_alert] = {\n          [AirQualityAlertKeys.id]: alert[AirQualityAlertKeys.id],\n          [AirQualityAlertKeys.alert_type]: alert[AirQualityAlertKeys.alert_type],\n          [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n          [AirQualityAlertKeys.message]: alert[AirQualityAlertKeys.message],\n        };\n      }\n    } else {\n      if (alert[AirQualityAlertKeys.alert_type] === AlertTypes.daily.id) return;\n\n      alert[AirQualityAlertKeys.has_child_alert] = false;\n      alert[AirQualityAlertKeys.child_alert] = {\n        [AirQualityAlertKeys.alert_type]:\n          alert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id\n            ? ThresholdAlertTypes.below_threshold.id\n            : ThresholdAlertTypes.above_threshold.id,\n        [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n        [AirQualityAlertKeys.message]: \"\"\n      };\n    }\n  });\n\n  return processed;\n};","import { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, useTheme } from '@mui/material';\n\nexport default function AlertDeletionDialog(props) {\n  const { onConfirmedDelete } = props;\n\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n\n  return (\n    <>\n      <Button\n        variant=\"text\"\n        color=\"error\"\n        onClick={() => {\n          setOpen(true)\n        }}>\n        Delete\n      </Button>\n      <Dialog\n        open={open}\n        onClose={() => {\n          setOpen(false)\n        }}\n        aria-labelledby=\"alert-deletion-confirmation-dialog-title\"\n        aria-describedby=\"alert-deletion-confirmation-dialog-description\"\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"alert-deletion-confirmation-dialog-title\">\n          Are you sure?\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-deletion-confirmation-dialog-description\">\n            Deletion is permanent. If you simply wish to pause this alert, disable it with the toggle switch instead.</DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: \"end\" }}>\n          <Button\n            onClick={() => {\n              setOpen(false)\n            }}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n\n          <Button\n            onClick={() => {\n              onConfirmedDelete();\n              setOpen(false);\n            }}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}","import { CrudTypes } from '../AlertUtils';\n\nexport const DialogData = {\n  [CrudTypes.add]: {\n    title: \"Add A New Alert\",\n    primaryButtonLabel: \"Save Alert\",\n    errorMessage: \"Server error: new alert was not saved. Please try again\",\n    successMessage: \"New alert added successfully\"\n  },\n  [CrudTypes.edit]: {\n    title: \"Edit Alert\",\n    primaryButtonLabel: \"Save Edit\",\n    errorMessage: \"Server error: changes were not saved. Please try again\",\n    successMessage: \"Changes saved successfully\"\n  },\n  [CrudTypes.delete]: {\n    title: \"Delete Alert\",\n    contentText: \"Are you sure you want to delete this alert?\",\n    primaryButtonLabel: \"Delete\",\n    errorMessage: \"Server error: alert not deleted. Please try again.\",\n    successMessage: \"Alert deleted successfully\"\n  }\n};\n","import { Box, Stack, TextField, Typography } from \"@mui/material\";\n\nconst OptionalMessage = (props) => {\n    const {\n        label = \"Optional Message\",\n        value,\n        handleChange,\n        maxLength,\n        showTip = true,\n        disabled\n    } = props;\n    const currentLength = value ? value.length : 0;\n\n    return (\n        <Stack direction=\"column\">\n            <TextField\n                label={label}\n                multiline\n                minRows={2}\n                maxRows={4}\n                inputProps={{\n                    maxLength,\n                }}\n                value={value || ''}\n                onChange={(event) => {\n                    handleChange(event);\n                }}\n                disabled={disabled}\n            />\n            <Stack direction=\"row\" gap={1} justifyContent=\"space-between\" sx={{ mx: 1, my: 0.5 }}>\n                {showTip ? (\n                    <Typography color=\"text.secondary\" variant=\"caption\">\n                        Optional message that will appear in the alert\n                    </Typography>\n                ) : <Box />}\n\n                <Typography color=\"text.secondary\" variant=\"caption\" textAlign=\"right\">\n                    {currentLength}/{maxLength}\n                </Typography>\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default OptionalMessage;","export const DAYS_OF_WEEK = [\n  { value: 0, label: 'Monday' },\n  { value: 1, label: 'Tuesday' },\n  { value: 2, label: 'Wednesday' },\n  { value: 3, label: 'Thursday' },\n  { value: 4, label: 'Friday' },\n  { value: 5, label: 'Saturday' },\n  { value: 6, label: 'Sunday' }\n];\n","import dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\n\nimport { Link, Typography } from '@mui/material';\nimport CustomDialog from '../../../../CustomDialog/CustomDialog';\n\n// Custom styling for the selected days\nconst CustomPickersDay = styled(PickersDay, {\n  shouldForwardProp: (prop) => prop !== \"selected\"\n})(({ theme, selected }) => ({\n  ...(selected && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    \"&:hover, &:focus\": {\n      backgroundColor: theme.palette.primary.dark\n    },\n    borderRadius: \"50%\",\n  })\n}));\n\n// Custom day component that highlights the selected dates\nconst CustomDayComponent = (props) => {\n  const { day, selectedDates, ...other } = props;\n\n  // Check if the day is selected\n  const isSelected = selectedDates.includes(dayjs(day).format('YYYY-MM-DD'));\n\n  return (\n    <CustomPickersDay {...other} day={day} selected={isSelected} />\n  )\n}\n\nexport default function MultiDaysCalendarPicker(props) {\n  const { selectedDates, handleChange, disabled } = props;\n\n  // Ensure selectedDates is formatted as \"YYYY-MM-DD\"\n  const parsedSelectedDates = selectedDates.map((date) => dayjs(date).format('YYYY-MM-DD'));\n\n  const len = selectedDates.length;\n  const title = len > 0 ? `Excluded Dates (${len} Days)` : `Excluded Dates`;\n\n  return (\n    <CustomDialog\n      dialogTitle={title}\n      buttonLabel={title}\n      buttonVariant='text'\n      disabled={disabled}\n      maxWidth=\"xs\"\n      displaySchoolID={false}\n    >\n      <Typography color=\"text.secondary\" variant='body2' gutterBottom>\n        Select dates when you do <b>NOT</b> want to receive alerts.\n        <br />\n        Useful for holidays or school breaks.\n      </Typography>\n\n      <Link\n        variant=\"caption\"\n        sx={{\n          cursor: \"pointer\",\n          display: \"block\",\n          textAlign: \"right\"\n        }}\n        onClick={(e) => {\n          e.preventDefault();\n          handleChange(selectedDates);\n        }}\n      >\n        Clear All\n      </Link>\n\n      <LocalizationProvider\n        dateAdapter={AdapterDayjs}\n        localeText={{\n          calendarWeekNumberHeaderText: 'Week',\n          calendarWeekNumberText: (weekNumber) => `${weekNumber}.`,\n        }}\n      >\n        <DateCalendar\n          displayWeekNumber\n          slots={{\n            day: (dayProps) => (\n              <CustomDayComponent\n                {...dayProps}\n                selectedDates={parsedSelectedDates}\n              />\n            ),\n          }}\n          onChange={(value, selectionState) => {\n            if (selectionState === 'finish') {\n              handleChange([dayjs(value).format('YYYY-MM-DD')]);\n            }\n          }}\n          disableHighlightToday\n          minDate={dayjs().startOf('month')} // Restrict to dates after the start of the current month\n        />\n      </LocalizationProvider>\n    </CustomDialog>\n  );\n}\n","import { Box, Grid, Stack, ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport { DAYS_OF_WEEK } from './DAYS_OF_WEEK';\nimport { useTheme } from '@mui/material';\nimport MultiDaysCalendarPicker from './MultiDaysCalendarPicker';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder } from '../../AlertUtils';\n\nexport default function DateSelector(props) {\n  const { daysOfWeek, excludedDates, handleDaysOfWeekChange, handleExcludedDatesChange, disabled } = props;\n  const theme = useTheme();\n\n  return (\n    <Grid\n      container\n      rowSpacing={0.5}\n      columnSpacing={2}\n      alignItems=\"center\"\n      justifyContent=\"stretch\"\n    >\n      <Grid item xs={12} md={6}>\n        <Stack\n          direction=\"row\"\n          gap={1}\n          alignItems=\"start\"\n        >\n          <Box\n            aria-hidden\n            sx={{\n              '& .MuiSvgIcon-root': {\n                color: disabled\n                  ? theme.palette.text.secondary\n                  : theme.palette.primary.main,\n                verticalAlign: \"middle\"\n              }\n            }}\n          >\n            <CalendarMonthIcon sx={{ mt: 0.75 }} />\n          </Box>\n\n          <ToggleButtonGroup\n            value={daysOfWeek || getAlertDefaultPlaceholder()[AirQualityAlertKeys.days_of_week]}\n            onChange={handleDaysOfWeekChange}\n            aria-label=\"days of the week to receive alert\"\n            sx={{ display: 'flex', justifyContent: 'center' }} // Center the buttons horizontally\n            size=\"small\"\n            fullWidth\n            disabled={disabled}\n            color={disabled ? \"standard\" : \"primary\"}\n          >\n            {DAYS_OF_WEEK.map((day) => (\n              <Tooltip key={day.value} title={day.label} arrow>\n                <ToggleButton value={day.value} aria-label={day.label} sx={{ textTransform: 'none' }}>\n                  {day.label.slice(0, 3)}\n                </ToggleButton>\n              </Tooltip>\n            ))}\n          </ToggleButtonGroup>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={6} ml={{ xs: 3, sm: 0 }}>\n        <MultiDaysCalendarPicker\n          selectedDates={excludedDates}\n          disabled={disabled}\n          handleChange={handleExcludedDatesChange}\n        />\n      </Grid>\n    </Grid>\n\n  );\n}\n","import { Slider, colors, TextField, Grid, Typography } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTheme } from '@mui/material';\n\nexport const ThresholdSlider = (props) => {\n  const {\n    min = 0,\n    max = 100,\n    value,\n    defaultValue,\n    stepsForThreshold = 1,\n    marks = null,\n    handleChange,\n    disabled,\n    backgroundCssGradient,\n    invertSelection = false,\n    showInput = true,\n    inputUnit,\n    valueLabelDisplay = \"on\",\n    showTip = true\n  } = props;\n\n  const theme = useTheme();\n\n  // sliderValue is an array\n  const [sliderRangeMin, setSliderRangeMin] = useState(invertSelection ? value || defaultValue : min);\n  const [sliderRangeMax, setSliderRangeMax] = useState(invertSelection ? max : value || defaultValue);\n  const [nearestDataIndex, setNearestDataIndex] = useState(-1);\n\n  const [error, setError] = useState(false);\n  const [helperText, setHelperText] = useState('');\n\n  const findNearestDataIndex = useCallback((val) => {\n    if (!marks) return -1;\n\n    // Filter marks to get those with values greater than currentVal\n    const greaterMarks = marks.filter(mark => mark.value >= val);\n\n    // If no marks are greater, return -1\n    if (greaterMarks.length === 0) {\n      return -1;\n    }\n\n    // Find the mark with the nearest value greater than val\n    const nearestMark = greaterMarks.reduce((prev, curr) => {\n      return (curr.value - val) < (prev.value - val) ? curr : prev;\n    });\n\n    // Return the index of the nearest mark in the original marks array\n    const index = marks.indexOf(nearestMark)\n    return invertSelection ? index - 1 : index;\n  }, [marks, invertSelection]);\n\n  useEffect(() => {\n    const localSliderRangeMin = invertSelection ? value : min;\n    const localSliderRangeMax = invertSelection ? max : value;\n    setSliderRangeMin(localSliderRangeMin);\n    setSliderRangeMax(localSliderRangeMax);\n\n    setNearestDataIndex(findNearestDataIndex(invertSelection ? localSliderRangeMin : localSliderRangeMax));\n  }, [findNearestDataIndex, invertSelection, value, max, min]);\n\n  const handleSliderChange = (event, newValue) => {\n    const val = newValue[invertSelection ? 0 : 1];\n\n    setSliderRangeMin(invertSelection ? val : min);\n    setSliderRangeMax(invertSelection ? max : val);\n\n    handleChange(val);\n    setNearestDataIndex(findNearestDataIndex(val));\n  };\n\n  const handleInputChange = (event) => {\n    const val = event.target.value === '' ? '' : Number(event.target.value);\n\n    // Empty val\n    if (!val || val === '') {\n      handleChange(val);\n    }\n\n    // Non-empty val\n    if (val !== '' && (val >= min && val <= max)) {\n      setSliderRangeMin(invertSelection ? val : min);\n      setSliderRangeMax(invertSelection ? max : val);\n\n      handleChange(val);\n      setNearestDataIndex(findNearestDataIndex(val));\n\n      setError(false);\n      setHelperText('');\n    } else {\n      setError(true);\n      setHelperText(`Threshold must be between ${min} and ${max}`);\n    }\n  };\n\n  const stripedGradient = `repeating-linear-gradient(-45deg, ${colors.grey[800]}, ${colors.grey[800]} 4px, ${colors.common.white} 4px, ${colors.common.white} 8px)`;\n\n  const sliderSX = {\n    height: \"20vh\",\n    minHeight: \"250px\",\n    maxHeight: \"500px\",\n    cursor: disabled ? 'not-allowed' : 'inherit',\n    pointerEvents: 'all',\n    '& *': {\n      transition: 'none !important'\n    },\n    '& .MuiSlider-thumb': {\n      width: '2rem',\n      height: '4px',\n      borderRadius: 1,\n      color: colors.common.black,\n    },\n    [`& .MuiSlider-thumb[data-index=\"${invertSelection ? 1 : 0}\"]`]: {\n      display: 'none',\n    },\n    '& .MuiSlider-mark, .MuiSlider-markActive': {\n      width: '2rem',\n      height: '3px',\n      background: theme.palette.background.paper,\n      backgroundImage: theme.palette.background.paperBackgroundGradient\n    },\n    '& .MuiSlider-thumb, .MuiSlider-mark': {\n      transform: `translate(-50%,50%})`\n    },\n    '& .MuiSlider-rail, .MuiSlider-track': {\n      width: '1rem',\n      opacity: 0.75,\n      border: 'none'\n    },\n    '& .MuiSlider-rail': {\n      background: disabled ? colors.grey[400] : backgroundCssGradient,\n    },\n    '& .MuiSlider-track': {\n      background: stripedGradient,\n      ...(invertSelection ? {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      } : {\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      })\n    },\n    [`& .MuiSlider-markLabel, .MuiSlider-markLabel[data-index=\"${nearestDataIndex}\"]`]: {\n      color: theme.palette.text.primary,\n      fontWeight: 500,\n      textDecoration: 'underline',\n    },\n    '& .MuiSlider-markLabelActive': {\n      color: theme.palette.text.secondary,\n      fontWeight: 'inherit',\n      textDecoration: 'inherit',\n    },\n    '& .MuiSlider-valueLabel': {\n      transform: 'translate(-10px, -50%)',\n    }\n  };\n\n  return (\n    <>\n      <Grid container item xs=\"auto\" alignItems=\"end\" spacing={0.5}>\n        <Grid item xs=\"auto\" minWidth=\"4.5rem\">\n          {showInput ? (\n            <TextField\n              variant='standard'\n              type=\"number\"\n              label=\"Threshold\"\n              value={invertSelection ? sliderRangeMin : sliderRangeMax}\n              onChange={handleInputChange}\n              error={error}\n              helperText={helperText}\n              size='small'\n              fullWidth\n              disabled={disabled}\n              inputProps={{\n                step: stepsForThreshold,\n                min,\n                max,\n                type: 'number',\n                'aria-labelledby': 'input-threshold-slider'\n              }}\n            />\n          ) : null}\n        </Grid>\n\n        {\n          inputUnit ? (\n            <Grid item>\n              <Typography variant='body2'>\n                {inputUnit}\n              </Typography>\n            </Grid>\n          ) : null\n        }\n      </Grid>\n\n      <Grid item xs={12} sx={{ mt: 2, ml: 7.5 }}>\n        <Slider\n          getAriaLabel={() => 'Alert Threshold Slider'}\n          aria-labelledby=\"input-threshold-slider\"\n          value={[sliderRangeMin, sliderRangeMax]}\n          step={marks === null ? stepsForThreshold : null} // only allow discrete equal step if marks are not provided\n          marks={marks}\n          disabled={disabled}\n          min={min}\n          max={max}\n          onChange={handleSliderChange}\n          valueLabelDisplay={valueLabelDisplay}\n          orientation=\"vertical\"\n          sx={sliderSX} />\n      </Grid>\n\n      <Grid item sx={{ mt: 1, ml: 1, visibility: showTip === true ? 'visible' : 'hidden' }}>\n        <Typography color=\"text.secondary\" variant='caption' display='block'>\n          Move the slider to change the alert's threshold value or use the text input box for more precise control.\n        </Typography>\n      </Grid>\n    </>\n  );\n};","import { createContext, useMemo, useState, useEffect, useCallback } from 'react';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport useSchoolMetadata from '../hooks/useSchoolMetadata';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder } from '../Components/AirQuality/AirQualityAlerts/AlertUtils';\n\nexport const AirQualityAlertContext = createContext();\n\nexport function AirQualityAlertProvider({ children }) {\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const [selectedAlert, setSelectedAlert] = useState(getAlertDefaultPlaceholder());\n  const [editingAlert, setEditingAlert] = useState(selectedAlert);\n  const [allowedDataTypesForSensor, setAllowedDataTypesForSensor] = useState([]);\n\n  const returnAllowedDataTypesForThisSensor = useCallback((sensor) => {\n    if (!schoolMetadata) return [];\n\n    const { sensors } = schoolMetadata;\n    if (!isValidArray(sensors)) return [];\n\n    const sensorData = sensors.find(elem => elem.sensor_id === sensor);\n    const allowedDataTypesForThisSensor = sensorData?.allowedDataTypes;\n\n    if (allowedDataTypesForThisSensor) {\n      return allowedDataTypesForThisSensor.map(dataType => ({\n        value: dataType,\n        label: DataTypes[dataType].name_title\n      }));\n    }\n\n    return [];\n  }, [schoolMetadata]);\n\n  useEffect(() => {\n    setEditingAlert({ ...selectedAlert });\n  }, [selectedAlert]);\n\n  useEffect(() => {\n    const sensor_id = editingAlert[AirQualityAlertKeys.sensor_id];\n    if (sensor_id && sensor_id !== '') {\n      setAllowedDataTypesForSensor(\n        returnAllowedDataTypesForThisSensor(sensor_id)\n      )\n    }\n  }, [editingAlert, returnAllowedDataTypesForThisSensor]);\n\n  const contextValue = useMemo(() => ({\n    selectedAlert, setSelectedAlert,\n    editingAlert, setEditingAlert,\n    allowedDataTypesForSensor, setAllowedDataTypesForSensor\n  }), [selectedAlert, editingAlert, allowedDataTypesForSensor]);\n\n  return (\n    <AirQualityAlertContext.Provider value={contextValue}>\n      {children}\n    </AirQualityAlertContext.Provider>\n  );\n}","import { ThresholdSlider } from \"./ThresholdSlider\";\nimport { DataTypeKeys, DataTypes } from \"../../../../../../Utils/AirQuality/DataTypes\";\nimport { AQI_Database, HeatIndex_Database, VOC_Database } from \"../../../../../../Utils/AirQuality/AirQualityIndexHelper\";\nimport { useTheme } from '@mui/material';\nimport { generateCssBackgroundGradient } from \"../../../../../../Utils/Gradient/GradientUtils\";\nimport { getTranslation } from \"../../../../../../Utils/UtilFunctions\";\nimport { useContext } from \"react\";\nimport { PreferenceContext } from \"../../../../../../ContextProviders/PreferenceContext\";\nimport { AirQualityAlertKeys } from \"../../../AlertUtils\";\nimport { AirQualityAlertContext } from \"../../../../../../ContextProviders/AirQualityAlertContext\";\n\nexport const ThresholdComponentWrapper = (props) => {\n    const {\n        value,\n        invertSelection,\n        handleValueChange,\n        placeholderValueBeforeDataTypeSelection = 0.5,\n        disabledSlider,\n        showTip = true\n    } = props;\n\n    const { editingAlert } = useContext(AirQualityAlertContext);\n    const { language } = useContext(PreferenceContext);\n    const theme = useTheme();\n\n    let thresholdSlider = null;\n\n    const currentDataTypeKey = editingAlert[AirQualityAlertKeys.datatypekey];\n    if (currentDataTypeKey && DataTypes[currentDataTypeKey]) {\n        const dataType = DataTypes[currentDataTypeKey];\n        const dataTypeColorAxis = theme.palette.chart.colorAxes[dataType.color_axis];\n        const { colors, minValue, maxValue, defaultValueForAlert, stepsForThreshold } = dataTypeColorAxis;\n\n        const backgroundCssGradient = generateCssBackgroundGradient({\n            gradientDirection: 'to top',\n            colors: colors\n        });\n\n        // Check if this dataType exists in the AQI_Database\n        // If yes, return value and label accordingly to the marks\n        let marks, database;\n\n        switch (currentDataTypeKey) {\n            case DataTypeKeys.voc:\n                database = VOC_Database;\n                break;\n            case DataTypeKeys.aqi:\n            case DataTypeKeys.pm2_5:\n            case DataTypeKeys.pm10_raw:\n            case DataTypeKeys.co2:\n                database = AQI_Database;\n                break;\n            case DataTypeKeys.heat_index_C:\n                database = HeatIndex_Database;\n                break;\n            default:\n                database = null;\n        }\n\n        if (database) {\n            marks = database\n                .filter((_, index) => index !== 0) // do not return the lowest category\n                .map((element) => {\n                    const val = element[dataType.threshold_mapping_name].low;\n                    return {\n                        value: val,\n                        label: getTranslation(element.category, language)\n                    }\n                })\n        }\n\n        const inputUnit = Object.keys(DataTypes)\n            .filter(key => key === editingAlert[AirQualityAlertKeys.datatypekey])\n            .map(key => DataTypes[key].unit)[0]\n\n        thresholdSlider = (\n            <ThresholdSlider\n                min={minValue}\n                max={maxValue}\n                marks={marks}\n                defaultValue={defaultValueForAlert}\n                value={value}\n                stepsForThreshold={stepsForThreshold}\n                disabled={disabledSlider}\n                backgroundCssGradient={backgroundCssGradient}\n                invertSelection={invertSelection}\n                handleChange={handleValueChange}\n                inputUnit={inputUnit}\n                showTip={showTip}\n            />\n        )\n    } else {\n        thresholdSlider = (\n            <ThresholdSlider\n                min={0}\n                max={1}\n                value={placeholderValueBeforeDataTypeSelection}\n                disabled={true}\n                showInput={false}\n                invertSelection={invertSelection}\n                valueLabelDisplay=\"off\"\n                showTip={showTip}\n            />\n        )\n    }\n\n    return thresholdSlider;\n}","import { FormControl, FormGroup, FormControlLabel, FormHelperText, Checkbox, Typography } from '@mui/material';\n\nexport const MaxOnceADayCheckbox = ({ value, handleChange, disabled }) => {\n\n  const returnHelperText = () => {\n    if (value === true) {\n      return (\n        <>\n          Send alert <strong>at most once a day</strong> when the threshold is breached\n        </>\n      );\n    } else {\n      return (\n        <>\n          Send alert <strong>every hour</strong> for as long as the threshold is breached\n        </>\n      );\n    }\n  };\n  return (\n    <FormControl\n      component=\"fieldset\"\n      variant=\"standard\"\n      sx={{ mt: { md: -1 } }}\n      disabled={disabled}\n    >\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={value}\n              onChange={handleChange}\n              size='small'\n            />\n          }\n          label={<Typography color=\"text.secondary\" fontWeight={500}>Max Once a Day</Typography>}\n          color=\"text.secondary\"\n        />\n      </FormGroup>\n      <FormHelperText sx={{ mt: -0.5 }}>{returnHelperText()}</FormHelperText>\n    </FormControl>\n  );\n};\n","import { ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { ThresholdAlertTypes } from '../../../AlertTypes';\n\nexport const ThresholdTypeToggle = ({ currentAlertType, handleChange, disabled, ...others }) => {\n  return (\n    <ToggleButtonGroup\n      color={disabled ? \"standard\" : \"primary\"}\n      disabled={disabled}\n      defaultValue={ThresholdAlertTypes.above_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"toggle to choose alert below or above a threshold\"\n      size=\"small\"\n      onChange={handleChange}\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n};\n\nexport const ThresholdType = ({ currentAlertType, ...others }) => {\n\n  return (\n    <ToggleButtonGroup\n      color={\"standard\"}\n      disabled={true}\n      defaultValue={ThresholdAlertTypes.below_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"non-interactive button displaying threshold type\"\n      size=\"small\"\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n        if (thresholdAlertType.id !== currentAlertType) return null;\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n}\n","import AlertTypes, { ThresholdAlertTypes } from \"../../AlertTypes\";\nimport { SimplePicker } from \"./SimplePicker\";\n\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, SharedColumnHeader } from \"../../AlertUtils\";\nimport TimeRangeSelector from \"../../../../TimeRange/TimeRangeSelector\";\nimport { DataTypes } from \"../../../../../Utils/AirQuality/DataTypes\";\nimport { capitalizePhrase } from \"../../../../../Utils/UtilFunctions\";\nimport { HOURS } from \"../../../../TimeRange/TimeRangeUtils\";\nimport { Checkbox, DialogContentText, FormControlLabel, FormGroup, Grid, Stack, Switch, Typography, useTheme } from \"@mui/material\";\n\nimport OptionalMessage from \"./OptionalMessage\";\nimport DateSelector from \"./DaySelector\";\nimport { ThresholdComponentWrapper } from \"./ThresholdAlertComponents/ThresholdComponentWrapper\";\n\nimport { DialogData } from \"../DialogData\";\nimport { MaxOnceADayCheckbox } from \"./MaxOnceADayCheckbox\";\nimport { ThresholdType, ThresholdTypeToggle } from \"./ThresholdAlertComponents/ThresholdTypeToggle\";\n\nimport useSchoolMetadata from \"../../../../../hooks/useSchoolMetadata\";\nimport { useContext } from \"react\";\nimport { AirQualityAlertContext } from \"../../../../../ContextProviders/AirQualityAlertContext\";\n\nconst returnFormattedStatusString = (editingAlert) => {\n    const status = editingAlert[AirQualityAlertKeys.is_enabled] ? \"enabled\" : \"disabled\";\n    const tense = editingAlert[AirQualityAlertKeys.id] ? \"is\" : \"will be\"; // if this alert doesn't have id, it's not d in DB yet, thus we use future tense \n\n    return `This alert ${tense} ${status}`;\n}\n\nexport const AlertPropertyComponents = ({ alertTypeKey, crudType }) => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n    const { editingAlert, allowedDataTypesForSensor, setEditingAlert } = useContext(AirQualityAlertContext);\n\n    const theme = useTheme();\n\n    // Get the available sensors (locations) for this school\n    const allSensorsOfSchool = schoolMetadata?.sensors?.map(sensor => (\n        {\n            value: sensor.sensor_id,\n            label: capitalizePhrase(sensor.location_short)\n        }\n    ));\n\n    // Helper function to check if the previous field has a value to disable this field\n    const isDisabled = (key) => {\n        switch (key) {\n            case AirQualityAlertKeys.sensor_id:\n            case AirQualityAlertKeys.is_enabled:\n                // sensor_id and is_enabled can never be disabled because it's the first field\n                return false;\n\n            case AirQualityAlertKeys.datatypekey:\n                // datatypekey depends on sensor_id having a placeholder value\n                return editingAlert[AirQualityAlertKeys.sensor_id] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.sensor_id];\n\n            case AirQualityAlertKeys.child_alert:\n                // child_alert depends on has_child_alert being true\n                return editingAlert[AirQualityAlertKeys.has_child_alert] !== true;\n\n            default:\n                // all other fields depends on datatypekey having a placeholder value\n                return editingAlert[AirQualityAlertKeys.datatypekey] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.datatypekey];\n        }\n    };\n\n    const displayHourPicker = () => {\n        switch (alertTypeKey) {\n            case AlertTypes.daily.id:\n                return (\n                    <SimplePicker\n                        icon={<AccessTimeIcon />}\n                        label={AlertTypes.daily.tableColumnHeader}\n                        value={editingAlert[AirQualityAlertKeys.minutespastmidnight]}\n                        options={HOURS}\n                        disabled={isDisabled(AirQualityAlertKeys.minutespastmidnight)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.minutespastmidnight]: event.target.value\n                            });\n                        }}\n                    />\n                );\n            case AlertTypes.threshold.id:\n                return (\n                    <Grid container columnSpacing={2} rowSpacing={0.5}>\n                        <Grid item xs={12} md={6}>\n                            <TimeRangeSelector\n                                timeRange={editingAlert[AirQualityAlertKeys.time_range]}\n                                defaultTimeRange={getAlertDefaultPlaceholder(AlertTypes.threshold.id)[AirQualityAlertKeys.time_range]}\n                                disabled={isDisabled(AirQualityAlertKeys.time_range)}\n                                handleChange={(newRange) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.time_range]: newRange\n                                    });\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <MaxOnceADayCheckbox\n                                value={editingAlert[AirQualityAlertKeys.max_once_a_day]}\n                                handleChange={(event) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.max_once_a_day]: event.target.checked\n                                    })\n                                }}\n                                disabled={isDisabled(AirQualityAlertKeys.max_once_a_day)}\n                            />\n                        </Grid>\n                    </Grid>\n                );\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <Stack\n            direction=\"column\"\n            gap={2}\n            mt={1}\n            width=\"100%\"\n        >\n            {\n                DialogData[crudType]?.contentText ?\n                    (\n                        <DialogContentText fontWeight=\"500\">\n                            {DialogData[crudType].contentText}\n                        </DialogContentText>\n                    ) : null\n            }\n\n            <Stack\n                direction=\"row\"\n                gap={1}\n                alignItems=\"center\"\n                mb={2}\n            >\n                <Switch\n                    size='small'\n                    checked={editingAlert[AirQualityAlertKeys.is_enabled]}\n                    onChange={(event) => {\n                        setEditingAlert({\n                            ...editingAlert,\n                            [AirQualityAlertKeys.is_enabled]: event.target.checked\n                        });\n                    }}\n                    disabled={isDisabled(AirQualityAlertKeys.is_enabled)}\n                />\n                <Typography\n                    fontWeight={500}\n                    color=\"text.secondary\"\n                >\n                    {returnFormattedStatusString(editingAlert)}\n                </Typography>\n            </Stack>\n\n            <Grid\n                container\n                columnSpacing={2}\n                alignItems=\"center\"\n            >\n                <Grid item xs={6}>\n                    <SimplePicker\n                        icon={<PlaceIcon />}\n                        label={SharedColumnHeader.location}\n                        value={editingAlert[AirQualityAlertKeys.sensor_id]}\n                        options={allSensorsOfSchool}\n                        disabled={isDisabled(AirQualityAlertKeys.sensor_id)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.sensor_id]: event.target.value,\n                                [AirQualityAlertKeys.datatypekey]: ''\n                            });\n                        }}\n                    />\n                </Grid>\n\n                <Grid item xs={6}>\n                    <SimplePicker\n                        label={SharedColumnHeader.dataType}\n                        value={editingAlert[AirQualityAlertKeys.datatypekey]}\n                        options={allowedDataTypesForSensor}\n                        disabled={isDisabled(AirQualityAlertKeys.datatypekey)}\n                        handleChange={(event) => {\n                            const selectedDataTypeKey = event.target.value;\n                            const dataType = DataTypes[selectedDataTypeKey];\n\n                            // After data type is determined, set the threshold value to defaultValueForAlert\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.datatypekey]: selectedDataTypeKey,\n                                [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForAlert,\n                                [AirQualityAlertKeys.child_alert]: {\n                                    ...editingAlert[AirQualityAlertKeys.child_alert],\n                                    [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForChildAlert\n                                }\n                            });\n                        }}\n                        flex={1}\n                    />\n                </Grid>\n            </Grid>\n\n            <DateSelector\n                daysOfWeek={editingAlert[AirQualityAlertKeys.days_of_week]}\n                excludedDates={editingAlert[AirQualityAlertKeys.excluded_dates] || []}\n                disabled={isDisabled(AirQualityAlertKeys.days_of_week)}\n                handleDaysOfWeekChange={(_, newValue) => {\n                    const validDaysOfWeek = Array.isArray(newValue) ? newValue : [];\n\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.days_of_week]: validDaysOfWeek.sort()\n                    });\n                }}\n                handleExcludedDatesChange={(valueArray) => {\n                    // Get the current excluded dates or initialize as an empty array\n                    const currentExcludedDates = editingAlert[AirQualityAlertKeys.excluded_dates] || [];\n\n                    // Create a new array that updates the excluded dates\n                    const updatedExcludedDates = valueArray.reduce((acc, date) => {\n                        // Check if the date is already excluded\n                        if (acc.includes(date)) {\n                            // If it exists, filter it out (remove the date)\n                            return acc.filter(excludedDate => excludedDate !== date);\n                        } else {\n                            // If it doesn't exist, add the date to the array\n                            return [...acc, date];\n                        }\n                    }, currentExcludedDates); // Start with the current excluded dates\n\n                    // Update the state with the new excluded_dates array\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.excluded_dates]: updatedExcludedDates\n                    });\n                }}\n            />\n\n\n            {displayHourPicker(alertTypeKey)}\n\n            {alertTypeKey === AlertTypes.threshold.id ?\n                (\n                    <Grid container alignItems=\"start\" spacing={2}>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='body1'\n                                    fontWeight={500}\n                                    color=\"text.secondary\"\n                                    sx={{ mt: \"2px\", mb: \"12px\" }} // absolute value to align with the other side\n                                >\n                                    1. Alert if it is:\n                                </Typography>\n                            </Grid>\n\n                            <Grid item sx={{ mr: 2 }}>\n                                <ThresholdTypeToggle\n                                    currentAlertType={editingAlert[AirQualityAlertKeys.alert_type]}\n                                    handleChange={(event) => {\n                                        const selectedAlertType = event.target.value;\n                                        const oppositeAlertTypeForChildAlert = selectedAlertType === ThresholdAlertTypes.above_threshold.id\n                                            ? ThresholdAlertTypes.below_threshold.id\n                                            : ThresholdAlertTypes.above_threshold.id;\n\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.alert_type]: selectedAlertType,\n                                            [AirQualityAlertKeys.child_alert]: {\n                                                ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                [AirQualityAlertKeys.alert_type]: oppositeAlertTypeForChildAlert\n                                            }\n                                        });\n                                    }}\n                                    disabled={isDisabled(AirQualityAlertKeys.alert_type)}\n                                    sx={{\n                                        height: \"100%\"\n                                    }}\n                                />\n                            </Grid>\n\n                            <ThresholdComponentWrapper\n                                value={editingAlert[AirQualityAlertKeys.threshold_value]}\n                                invertSelection={editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id}\n                                handleValueChange={(value) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.threshold_value]: value\n                                    });\n                                }}\n                                disabledToggle={isDisabled(AirQualityAlertKeys.alert_type)}\n                                disabledSlider={isDisabled(AirQualityAlertKeys.threshold_value)}\n                                placeholderValueBeforeDataTypeSelection={2 / 3}\n                            />\n\n                            <Grid item xs={12} mt={2}>\n                                <OptionalMessage\n                                    value={editingAlert[AirQualityAlertKeys.message]}\n                                    handleChange={(event) => {\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.message]: event.target.value\n                                        });\n                                    }}\n                                    maxLength={200}\n                                    label=\"Optional Message for Main Alert\"\n                                    disabled={isDisabled(AirQualityAlertKeys.message)}\n                                />\n                            </Grid>\n\n                        </Grid>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <FormGroup>\n                                    <FormControlLabel\n                                        disabled={isDisabled(AirQualityAlertKeys.has_child_alert)}\n                                        control={\n                                            <Checkbox\n                                                checked={!!editingAlert[AirQualityAlertKeys.has_child_alert]} // fallback in case undefined in first render\n                                                onChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.has_child_alert]: event.target.checked\n                                                    });\n                                                }}\n                                                size=\"small\"\n                                            />\n                                        }\n                                        label={\n                                            <Typography\n                                                variant={'body1'}\n                                                fontWeight={500}\n                                                color=\"text.secondary\"\n                                            >\n                                                2. [Optional] Follow-up alert if it changes to:\n                                            </Typography>\n                                        }\n                                        color=\"text.secondary\"\n                                    />\n                                </FormGroup>\n                            </Grid>\n\n                            {\n                                editingAlert[AirQualityAlertKeys.child_alert] && (\n                                    <>\n                                        <Grid item sx={{ mr: 2 }}>\n                                            <ThresholdType\n                                                currentAlertType={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type]}\n                                                sx={{\n                                                    height: \"100%\"\n                                                }}\n                                            />\n                                        </Grid>\n\n                                        <ThresholdComponentWrapper\n                                            value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.threshold_value]}\n                                            invertSelection={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id || true}\n                                            handleValueChange={(value) => {\n                                                setEditingAlert({\n                                                    ...editingAlert,\n                                                    [AirQualityAlertKeys.child_alert]: {\n                                                        ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                        [AirQualityAlertKeys.threshold_value]: value\n                                                    }\n                                                });\n                                            }}\n                                            disabledToggle={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            disabledSlider={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            showTip={false}\n                                            placeholderValueBeforeDataTypeSelection={1 / 3}\n                                        />\n\n                                        <Grid item xs={12} mt={2}>\n                                            <OptionalMessage\n                                                value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.message]}\n                                                handleChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.child_alert]: {\n                                                            ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                            [AirQualityAlertKeys.message]: event.target.value\n                                                        }\n                                                    });\n                                                }}\n                                                maxLength={200}\n                                                label=\"Optional Message for Follow-up Alert\"\n                                                showTip={false}\n                                                disabled={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            />\n                                        </Grid>\n                                    </>\n                                )\n                            }\n                        </Grid>\n                    </Grid>\n\n                ) : (\n                    <OptionalMessage\n                        value={editingAlert[AirQualityAlertKeys.message]}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.message]: event.target.value\n                            });\n                        }}\n                        maxLength={200}\n                        disabled={isDisabled(AirQualityAlertKeys.message)}\n                    />\n                )}\n        </Stack>\n    );\n}","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { getAlertsApiUrl } from \"../../API/ApiUrls\";\nimport { GeneralAPIendpoints, RESTmethods } from \"../../API/Utils\";\nimport { addChildToAlerts, AirQualityAlertKeys } from \"../../Components/AirQuality/AirQualityAlerts/AlertUtils\";\nimport { fetchDataFromURL } from \"../../API/ApiFetch\";\n\nexport const useEditAlertMutation = () => {\n    const queryClient = useQueryClient();\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { user } = useContext(UserContext);\n\n    return useMutation({\n        mutationFn: async ({ alertId, alertToEdit }) => {\n            const url = getAlertsApiUrl({\n                endpoint: GeneralAPIendpoints.alerts,\n                school_id: currentSchoolID,\n                alert_id: alertId\n            });\n\n            return fetchDataFromURL({\n                url,\n                restMethod: RESTmethods.PUT,\n                body: alertToEdit\n            });\n        },\n        onSuccess: (editedAlert, { alertId }) => {\n            queryClient.setQueryData(\n                [GeneralAPIendpoints.alerts, currentSchoolID, user.username || user.email],\n                (old = []) => addChildToAlerts(old.map(alert =>\n                    alert[AirQualityAlertKeys.id] === alertId\n                        ? editedAlert\n                        : alert\n                ))\n            );\n        }\n    });\n};","import { Button, Dialog, DialogTitle, DialogActions, DialogContent, Stack, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport AlertTypes, { ThresholdAlertTypes } from '../AlertTypes';\nimport { AirQualityAlertKeys, CrudTypes, getAlertDefaultPlaceholder } from '../AlertUtils';\nimport { useContext, useEffect, useState } from 'react';\nimport { SnackbarMetadata } from '../../../../Utils/SnackbarMetadata';\nimport isEqual from 'lodash.isequal';\nimport AlertDeletionDialog from './AlertDeletionDialog';\nimport { useSnackbar } from 'notistack';\nimport { DialogData } from './DialogData';\nimport { AlertPropertyComponents } from './AlertPropertyComponents/AlertPropertyComponents';\nimport { useCreateAlertMutation } from '../../../../hooks/alerts/useCreateAlertMutation';\nimport { useEditAlertMutation } from '../../../../hooks/alerts/useEditAlertMutation';\nimport { useDeleteAlertMutation } from '../../../../hooks/alerts/useDeleteAlertMutation';\nimport { AirQualityAlertContext } from '../../../../ContextProviders/AirQualityAlertContext';\n\nconst AlertModificationDialog = (props) => {\n  const {\n    alertTypeKey,\n    openAlertModificationDialog,\n    crudType,\n    handleClose\n  } = props;\n\n  const { selectedAlert, setSelectedAlert, editingAlert, setEditingAlert } = useContext(AirQualityAlertContext);\n\n  const [shouldDisableButton, setShouldDisableButton] = useState(false);\n\n  const { enqueueSnackbar } = useSnackbar()\n\n  const theme = useTheme();\n\n  const sanityCheckAlertBeforeSaving = () => {\n    if (alertTypeKey === AlertTypes.daily.id) return { valid: true };\n\n    if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return { valid: true };\n\n    const isAbove = editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id;\n    const threshold = editingAlert[AirQualityAlertKeys.threshold_value];\n    const childThreshold = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.threshold_value];\n\n    if (childThreshold === undefined) return { valid: true };\n\n    if (\n      (isAbove && threshold <= childThreshold) ||\n      (!isAbove && threshold >= childThreshold)\n    ) {\n      return {\n        valid: false,\n        message: `The follow-up alert must have a ${isAbove ? \"lower\" : \"higher\"} threshold than the first alert`\n      };\n    }\n\n    return { valid: true };\n  };\n\n  const removeChildAlertFromParentAlertBody = (body) => {\n    const newBody = { ...body };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n    return newBody;\n  }\n\n  const formatChildAlertBody = (body, parent_alert_id) => {\n    const newBody = {\n      ...body, // copy all properties from parent\n      ...body[AirQualityAlertKeys.child_alert], // but then, override with child's unique properties\n      [AirQualityAlertKeys.parent_alert_id]: parent_alert_id, // finally, link child to parent\n      [AirQualityAlertKeys.id]: null // destroy parent's id just in case\n    };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n\n    return newBody;\n  };\n\n  const handleSuccess = (passedCrudType) => {\n    enqueueSnackbar(DialogData[passedCrudType].successMessage, SnackbarMetadata.success);\n    handleClose();\n  }\n  const handleError = (passedCrudType) => {\n    enqueueSnackbar(DialogData[passedCrudType].errorMessage, SnackbarMetadata.error);\n  };\n\n  const handleAlertModification = ({ passedCrudType }) => {\n    const result = sanityCheckAlertBeforeSaving();\n    if (!result.valid) {\n      enqueueSnackbar(result.message, SnackbarMetadata.error);\n      return;\n    }\n\n    switch (passedCrudType) {\n      case CrudTypes.add: {\n        // 1. POST to create the main alert (always run)\n        createAlertMutation.mutate(\n          {\n            alertToCreate: removeChildAlertFromParentAlertBody(editingAlert)\n          },\n          {\n            onSuccess: (createdAlert) => {\n              handleSuccess(passedCrudType);\n\n              // 2. POST for child alert associated with this main alert (only if it exists)\n              const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n              setSelectedAlert(placeholder);\n              setEditingAlert(placeholder);\n\n              if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return;\n              const parent_alert_id = createdAlert[AirQualityAlertKeys.id];\n              if (parent_alert_id === null || parent_alert_id === undefined) return;\n\n              createAlertMutation.mutate(\n                {\n                  alertToCreate: formatChildAlertBody(editingAlert, parent_alert_id)\n                },\n                {\n                  onError: () => handleError(passedCrudType)\n                }\n              );\n            }\n          }\n        );\n        break;\n      }\n      case CrudTypes.edit: {\n        // 1. PUT to modify the main alert (always run)\n        const alert_id = selectedAlert[AirQualityAlertKeys.id];\n\n        editAlertMutation.mutate(\n          {\n            alertId: alert_id,\n            alertToEdit: removeChildAlertFromParentAlertBody(editingAlert)\n          },\n          {\n            onSuccess: () => {\n              handleSuccess(passedCrudType);\n\n              // 2. Editing for child alert associated with this main alert\n              const child_alert_id = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.id];\n              // 2.1. There should NOT be child alert\n              // (If child alert existed before but now is removed, then trigger deletion)\n              if (!editingAlert[AirQualityAlertKeys.has_child_alert] &&\n                child_alert_id !== null && child_alert_id !== undefined\n              ) {\n                deleteAlertMutation.mutate(\n                  { alertId: child_alert_id },\n                  {\n                    onSuccess: () => handleSuccess(CrudTypes.delete),\n                    onError: () => handleError(CrudTypes.delete)\n                  }\n                );\n              }\n              // 2.2. There should be child alert\n\n              else {\n                const formattedChildAlert = formatChildAlertBody(editingAlert, alert_id);\n\n                // 2.2.1. If there is no child alert id before, create one\n                if (child_alert_id === null || child_alert_id === undefined) {\n                  createAlertMutation.mutate({\n                    alertId: alert_id,\n                    alertToCreate: formattedChildAlert\n                  });\n                }\n                // 2.2.2. Else, update that child alert\n                else {\n                  editAlertMutation.mutate({\n                    alertId: child_alert_id,\n                    alertToEdit: formattedChildAlert\n                  })\n                }\n              }\n            }\n          }\n        )\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  // Disable / Enable save button depends on context\n  useEffect(() => {\n    // startTime cannot be larger than endTime\n    if (editingAlert[AirQualityAlertKeys.time_range]?.[0] > editingAlert[AirQualityAlertKeys.time_range]?.[1]) {\n      setShouldDisableButton(true);\n      return;\n    }\n\n    switch (crudType) {\n      case CrudTypes.add:\n        const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n\n        if (editingAlert[AirQualityAlertKeys.sensor_id] === placeholder[AirQualityAlertKeys.sensor_id] ||\n          editingAlert[AirQualityAlertKeys.datatypekey] === placeholder[AirQualityAlertKeys.datatypekey]) {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(true);\n          }\n        } else {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(false);\n          }\n        }\n        break;\n\n      case CrudTypes.edit:\n        // Case empty editing value\n        let alertVal;\n        if (alertTypeKey === AlertTypes.daily.id) {\n          alertVal = editingAlert[AirQualityAlertKeys.minutespastmidnight]\n        } else {\n          alertVal = editingAlert[AirQualityAlertKeys.threshold_value]\n        }\n        const datatypeKeyVal = editingAlert[AirQualityAlertKeys.datatypekey];\n\n        if (!alertVal || alertVal === '' || !datatypeKeyVal || datatypeKeyVal === '') {\n          setShouldDisableButton(true);\n          break;\n        }\n\n        setShouldDisableButton(isEqual(selectedAlert, editingAlert));\n        break;\n      default:\n        setShouldDisableButton(false);\n        break;\n    }\n  }, [crudType, selectedAlert, editingAlert, alertTypeKey]);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  const createAlertMutation = useCreateAlertMutation();\n  const editAlertMutation = useEditAlertMutation();\n  const deleteAlertMutation = useDeleteAlertMutation();\n\n  return (\n    <Dialog\n      open={openAlertModificationDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-modification-dialog\"\n      maxWidth=\"md\"\n      fullWidth\n      fullScreen={smallScreen}\n    >\n      <DialogTitle id=\"alert-modification-dialog\">\n        {DialogData[crudType]?.title}\n      </DialogTitle>\n\n      <DialogContent>\n        <AlertPropertyComponents\n          alertTypeKey={alertTypeKey}\n          crudType={crudType}\n        />\n      </DialogContent>\n      <DialogActions sx={{\n        justifyContent: \"space-between\"\n      }}>\n        {\n          crudType === CrudTypes.edit ? (\n            <AlertDeletionDialog\n              onConfirmedDelete={() => {\n                deleteAlertMutation.mutate(\n                  { alertId: selectedAlert.id },\n                  {\n                    onSuccess: () => handleSuccess(CrudTypes.delete),\n                    onError: () => handleError(CrudTypes.delete)\n                  }\n                );\n              }}\n            />\n          ) : null\n        }\n\n        <Stack direction=\"row\" width=\"100%\" justifyContent=\"end\">\n          <Button\n            onClick={handleClose}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleAlertModification({ passedCrudType: crudType });\n            }}\n            color=\"primary\"\n            disabled={shouldDisableButton}\n          >\n            Save Edit\n          </Button>\n        </Stack>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AlertModificationDialog;\n\n\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { getAlertsApiUrl } from \"../../API/ApiUrls\";\nimport { GeneralAPIendpoints, RESTmethods } from \"../../API/Utils\";\nimport { addChildToAlerts } from \"../../Components/AirQuality/AirQualityAlerts/AlertUtils\";\nimport { fetchDataFromURL } from \"../../API/ApiFetch\";\n\nexport const useCreateAlertMutation = () => {\n    const queryClient = useQueryClient();\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { user } = useContext(UserContext);\n\n    return useMutation({\n        mutationFn: async ({ alertToCreate }) => {\n            const url = getAlertsApiUrl({\n                endpoint: GeneralAPIendpoints.alerts,\n                school_id: currentSchoolID\n            });\n\n            return fetchDataFromURL({\n                url,\n                restMethod: RESTmethods.POST,\n                body: alertToCreate\n            });\n        },\n        onSuccess: (createdAlert) => {\n            queryClient.setQueryData(\n                [GeneralAPIendpoints.alerts, currentSchoolID, user.username || user.email],\n                (old = []) => addChildToAlerts([...old, createdAlert])\n            );\n        }\n    });\n};","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { getAlertsApiUrl } from \"../../API/ApiUrls\";\nimport { GeneralAPIendpoints, RESTmethods } from \"../../API/Utils\";\nimport { fetchDataFromURL } from \"../../API/ApiFetch\";\nimport { addChildToAlerts, AirQualityAlertKeys } from \"../../Components/AirQuality/AirQualityAlerts/AlertUtils\";\n\nexport const useDeleteAlertMutation = () => {\n    const queryClient = useQueryClient();\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { user } = useContext(UserContext);\n\n    return useMutation({\n        mutationFn: async ({ alertId }) => {\n            const url = getAlertsApiUrl({\n                endpoint: GeneralAPIendpoints.alerts,\n                school_id: currentSchoolID,\n                alert_id: alertId\n            });\n            return fetchDataFromURL({ url, restMethod: RESTmethods.DELETE });\n        },\n        onSuccess: (_, { alertId }) => {\n            queryClient.setQueryData(\n                [GeneralAPIendpoints.alerts, currentSchoolID, user.username || user.email],\n                (old = []) => {\n                    const updated = old.filter(\n                        alert => alert[AirQualityAlertKeys.id] !== alertId\n                    );\n                    return addChildToAlerts(updated);\n                }\n            );\n        }\n    });\n};","import { useContext, useState } from 'react';\nimport { Box, Button, IconButton, Stack, Table, TableBody, TableCell, TableHead, TableRow, Tooltip, Alert, Grow, Switch, Chip } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddAlarmIcon from '@mui/icons-material/AddAlarm';\nimport { useTheme } from '@mui/material';\nimport AlertTypes from './AlertTypes';\nimport { ThresholdAlertTypes } from './AlertTypes';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport AlertModificationDialog from './AlertModificationDialog/AlertModificationDialog';\nimport { AirQualityAlertKeys, CrudTypes, getAlertDefaultPlaceholder, SharedColumnHeader } from './AlertUtils';\nimport { TransitionGroup } from 'react-transition-group';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { useSnackbar } from 'notistack';\nimport { UserRoles } from '../../Account/Utils';\nimport { DataTypes } from '../../../Utils/AirQuality/DataTypes';\nimport { DAYS_OF_WEEK } from './AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK';\nimport { returnHoursFromMinutesPastMidnight } from '../../TimeRange/TimeRangeUtils';\nimport { useEditAlertMutation } from '../../../hooks/alerts/useEditAlertMutation';\nimport { AirQualityAlertContext } from '../../../ContextProviders/AirQualityAlertContext';\n\nconst returnDaysOfWeekString = (days_of_week) => {\n  if (!days_of_week || !isValidArray(days_of_week)) return \"N/A\";\n\n  // Case where all days are selected\n  if (days_of_week.length === DAYS_OF_WEEK.length) return \"Everyday\";\n\n  // Check if two days are missing and if both are weekend days\n  const missingDays = DAYS_OF_WEEK.filter(d => !days_of_week.includes(d.value));\n  if (missingDays.length === 2 && missingDays.every(d => [5, 6].includes(d.value))) {\n    return \"Only weekdays\";\n  }\n\n  // Default case: map the selected days to their short labels\n  return days_of_week\n    .map(day => DAYS_OF_WEEK.find(d => d.value === day)?.label.slice(0, 2))\n    .join(', ');\n};\n\nconst returnCreatedByString = (owner_role, self_is_owner) => {\n  if (self_is_owner === true) return \"You\";\n\n  if (owner_role) return UserRoles[owner_role].name;\n  else return \"N/A\";\n}\n\nconst returnAlertNotModifiableString = (owner_role, is_allowed_to_modify) => {\n  if (is_allowed_to_modify) return \"\";\n\n  if (owner_role && UserRoles[owner_role]) {\n    return `${UserRoles[owner_role].name} added your email to this school-wide alert. For edit or removal, please reach out to ${UserRoles[owner_role].name}.`;\n  }\n};\n\nconst AlertsTable = (props) => {\n  const { selectedAlert, setSelectedAlert } = useContext(AirQualityAlertContext);\n  const { enqueueSnackbar } = useSnackbar()\n  const { alertTypeKey, alertsForTable } = props;\n  const theme = useTheme();\n\n  const [openAlertModificationDialog, setOpenAlertModificationDialog] = useState(false);\n  const [crudType, setCrudType] = useState(null);\n\n  const handleModifyClick = ({ alert, crudType }) => {\n    setSelectedAlert(alert);\n    setCrudType(crudType);\n    setOpenAlertModificationDialog(true);\n  };\n\n  const handleClose = () => {\n    setOpenAlertModificationDialog(false);\n    setSelectedAlert(getAlertDefaultPlaceholder(alertTypeKey));\n  }\n\n  const editAlertMutation = useEditAlertMutation();\n  const handleAlertEnableToggling = (alert) => {\n    if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n      enqueueSnackbar(\n        returnAlertNotModifiableString(\n          alert[AirQualityAlertKeys.owner_role],\n          alert[AirQualityAlertKeys.is_allowed_to_modify]\n        ),\n        SnackbarMetadata.warning\n      );\n      return;\n    }\n\n    const currentIsEnabled = alert[AirQualityAlertKeys.is_enabled];\n    const newIsEnabled = !currentIsEnabled;\n\n    editAlertMutation.mutate(\n      {\n        alertId: alert[AirQualityAlertKeys.id],\n        alertToEdit: {\n          ...alert,\n          [AirQualityAlertKeys.is_enabled]: newIsEnabled\n        }\n      },\n      {\n        onSuccess: () =>\n          enqueueSnackbar(\n            `This alert is now ${newIsEnabled ? \"enabled\" : \"disabled\"}`,\n            SnackbarMetadata.success\n          ),\n        onError: (error) =>\n          enqueueSnackbar(\n            error?.message || `There was an error ${newIsEnabled ? \"enabling\" : \"disabling\"} this alert, try again!`,\n            SnackbarMetadata.error\n          )\n      }\n    );\n  }\n\n  return (\n    <>\n      <Stack spacing={2} alignItems=\"center\">\n        <Box sx={{ width: \"100%\", overflowX: 'auto' }}>\n          {\n            isValidArray(alertsForTable) ?\n              (\n                <Table size=\"small\" sx={{ my: 1 }}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ px: 0 }} />\n\n                      <TableCell>\n                        {SharedColumnHeader.location}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.dataType}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.selectedDaysOfWeek}\n                      </TableCell>\n\n                      <TableCell>\n                        {AlertTypes[alertTypeKey]?.tableColumnHeader || \"\"}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.createdBy}\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n\n                  <TransitionGroup component={TableBody}>\n                    {isValidArray(alertsForTable) ? alertsForTable.map((alert, index) => (\n                      <Grow key={index}>\n                        <TableRow\n                          sx={{\n                            background: alert[AirQualityAlertKeys.id] === selectedAlert[AirQualityAlertKeys.id] && theme.palette.background.NYUpurpleLight,\n                            textDecoration: alert[AirQualityAlertKeys.is_enabled] === false ? \"line-through\" : \"none\"\n                          }}\n                        >\n                          <TableCell sx={{ px: 0 }}>\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Click to ${alert[AirQualityAlertKeys.is_enabled] ? \"disable\" : \"enable\"} alert`\n                              }\n                            >\n                              {/* Wrap <Switch> in a <span> so that <Tooltip> will still display even if it's disabled */}\n                              <span\n                                onClick={() => {\n                                  handleAlertEnableToggling(alert)\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <Switch\n                                  size=\"small\"\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  checked={alert[AirQualityAlertKeys.is_enabled]}\n                                />\n                              </span>\n                            </Tooltip>\n\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Edit alert`\n                              }\n                            >\n                              <span\n                                onClick={() => {\n                                  if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n                                    enqueueSnackbar(\n                                      returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify]),\n                                      SnackbarMetadata.warning\n                                    );\n                                    return;\n                                  }\n                                  handleModifyClick({ alert, crudType: CrudTypes.edit })\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <IconButton\n                                  aria-label=\"edit\"\n                                  size=\"small\"\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n                                >\n                                  <EditIcon />\n                                </IconButton>\n                              </span>\n                            </Tooltip>\n                          </TableCell>\n\n                          <TableCell sx={{ textTransform: 'capitalize' }}>\n                            {alert[AirQualityAlertKeys.location_short]}\n                          </TableCell>\n\n                          <TableCell>\n                            {\n                              Object.keys(DataTypes)\n                                .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                .map(key => DataTypes[key].name_title)[0]\n                            }\n                          </TableCell>\n\n                          <TableCell>\n                            {returnDaysOfWeekString(alert[AirQualityAlertKeys.days_of_week])}\n                          </TableCell>\n\n                          {alertTypeKey === AlertTypes.threshold.id ? (\n                            <TableCell>\n                              {ThresholdAlertTypes[alert[AirQualityAlertKeys.alert_type]].sign} {alert[AirQualityAlertKeys.threshold_value]}\n                              &nbsp;\n                              {\n                                Object.keys(DataTypes)\n                                  .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                  .map(key => DataTypes[key].unit)[0]\n                              }\n                            </TableCell>\n                          ) : null}\n\n                          {alertTypeKey === AlertTypes.daily.id ? (\n                            <TableCell>\n                              {returnHoursFromMinutesPastMidnight(alert[AirQualityAlertKeys.minutespastmidnight])}\n                            </TableCell>\n                          ) : null}\n\n                          <TableCell>\n                            <Chip\n                              label={\n                                returnCreatedByString(\n                                  alert[AirQualityAlertKeys.owner_role],\n                                  alert[AirQualityAlertKeys.self_is_owner]\n                                )\n                              }\n                              size='small'\n                            />\n                          </TableCell>\n                        </TableRow>\n                      </Grow>\n                    )) : null\n                    }\n                  </TransitionGroup>\n                </Table>\n              ) : (\n                <Alert\n                  severity='warning'\n                  sx={{\n                    mt: 2\n                  }}>\n                  No {AlertTypes[alertTypeKey].name.toLowerCase()} alert has been set up\n                </Alert>\n              )\n          }\n        </Box>\n\n        <Button\n          variant=\"outlined\"\n          startIcon={<AddAlarmIcon />}\n          fullWidth\n          sx={{ maxWidth: \"sm\", textTransform: 'uppercase' }}\n          onClick={() => handleModifyClick({\n            alert: getAlertDefaultPlaceholder(alertTypeKey), crudType: CrudTypes.add\n          })}\n        >\n          Add Alert\n        </Button>\n      </Stack >\n\n      <AlertModificationDialog\n        alertTypeKey={alertTypeKey}\n        crudType={crudType}\n        openAlertModificationDialog={openAlertModificationDialog}\n        handleClose={handleClose}\n      />\n    </>\n  );\n};\n\nexport default AlertsTable;","import { useContext, useState } from 'react';\nimport { Box, Tab, useMediaQuery } from '@mui/material';\n\nimport StyledTabs from '../../StyledTabs';\nimport AlertsTable from './AlertsTable';\n\nimport AlertTypes from './AlertTypes';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder } from './AlertUtils';\nimport { AirQualityAlertContext } from '../../../ContextProviders/AirQualityAlertContext';\nimport { useAlerts } from '../../../hooks/alerts/useAlerts';\n\nfunction AlertTab(props) {\n  const { children, value, index, alertType, alertsArray, ...other } = props;\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`alert-tabpanel-${alertType.id}`}\n      aria-labelledby={`alert-tab-${alertType.id}`}\n      width=\"100%\"\n      {...other}\n    >\n      <AlertsTable\n        alertTypeKey={alertType.id}\n        alertsForTable={alertsArray}\n      />\n    </Box>\n  );\n}\n\nexport default function AlertsTabs() {\n  const { setSelectedAlert } = useContext(AirQualityAlertContext);\n  const { data: alerts } = useAlerts();\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [currentTab, setCurrentTab] = useState(0);\n  const handleTabChange = (_, newVal) => {\n    setCurrentTab(newVal);\n    setSelectedAlert(\n      getAlertDefaultPlaceholder(AlertTypes[Object.keys(AlertTypes)?.[newVal]]?.id)\n    );\n  };\n\n  // Helper function to return filered alert:\n  // - based on alert_type (threshold or daily, depends on which alert tab is visible)\n  // - only return alert that is not child to another alert\n  const returnFilteredAlerts = (alertTypeKey) => {\n    const filteredAlerts = alerts.filter((alert) => {\n      if (!alert) return null;\n\n      const alertType = alert[AirQualityAlertKeys.alert_type]?.toLowerCase();\n      const parentAlertId = alert[AirQualityAlertKeys.parent_alert_id];\n\n      if (alertType.includes(alertTypeKey) && (parentAlertId === null || parentAlertId === undefined)) return alert;\n      else return null;\n    });\n\n    const alertsLength = isValidArray(filteredAlerts) ? filteredAlerts.length : \"0\";\n\n    return {\n      array: filteredAlerts,\n      alertsLength\n    }\n  }\n\n  return (\n    <Box>\n      <StyledTabs\n        value={currentTab}\n        onChange={handleTabChange}\n        variant={smallScreen ? 'fullWidth' : 'standard'}\n        smallFontSize=\"0.825rem\"\n      >\n        {Object.values(AlertTypes).map((type) => {\n          const filteredAlerts = returnFilteredAlerts(type.id);\n          return (\n            <Tab\n              key={type.id}\n              value={type.index}\n              icon={type.icon}\n              label={`${type.name} (${filteredAlerts?.alertsLength})`}\n              iconPosition=\"start\"\n              sx={{ py: 0 }}\n            />\n          )\n        }\n        )}\n      </StyledTabs>\n\n      {Object.values(AlertTypes).map((type) => {\n        const filteredAlerts = returnFilteredAlerts(type.id);\n        return (\n          <AlertTab\n            key={type.id}\n            alertType={type}\n            value={currentTab}\n            index={type.index}\n            alertsArray={filteredAlerts.array}\n          />\n        )\n      }\n      )}\n    </Box>\n  );\n}\n","import { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { fetchDataFromURL } from \"../../API/ApiFetch\";\nimport { getAlertsApiUrl } from \"../../API/ApiUrls\";\nimport { GeneralAPIendpoints } from \"../../API/Utils\";\nimport { isValidArray } from \"../../Utils/UtilFunctions\";\nimport { addChildToAlerts } from \"../../Components/AirQuality/AirQualityAlerts/AlertUtils\";\n\nexport const useAlerts = () => {\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { authenticationState, user } = useContext(UserContext);\n\n    const queryResult = useQuery({\n        queryKey: [GeneralAPIendpoints.alerts, currentSchoolID, user.username || user.email],\n        queryFn: async () => {\n\n            const data = await fetchDataFromURL({\n                url: getAlertsApiUrl({\n                    endpoint: GeneralAPIendpoints.alerts,\n                    school_id: currentSchoolID,\n                }),\n            });\n\n            if (!isValidArray(data)) return [];\n            return addChildToAlerts(data);\n        },\n        enabled: !!currentSchoolID && !!authenticationState.authenticated,\n        staleTime: 0,\n        retry: false,\n        refetchOnWindowFocus: false,\n    });\n\n    // Always return at least an empty array for `data`\n    return {\n        ...queryResult,\n        data: queryResult.data ?? [],\n    };\n};","import { Stack, Typography } from '@mui/material';\nimport NotificationImportantIcon from '@mui/icons-material/NotificationImportant';\nimport CustomDialog from '../../CustomDialog/CustomDialog';\nimport EmailsInput from './EmailsInput';\nimport AlertsTabs from './AlertsTabs';\nimport useLoginHandler from '../../Account/useLoginHandler';\nimport { useContext } from 'react';\nimport { UserContext } from '../../../ContextProviders/UserContext';\nimport { UserRoles } from '../../Account/Utils';\nimport { AirQualityAlertProvider } from '../../../ContextProviders/AirQualityAlertContext';\n\nexport default function AirQualityAlerts({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { user } = useContext(UserContext);\n\n  const isModifiable = [UserRoles.admin.id, UserRoles.school.id].includes(user?.user_role);\n\n  return (\n    <CustomDialog\n      buttonIcon={<NotificationImportantIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Alerts\"\n      dialogTitle=\"Air quality alerts\"\n      dialogOpenHandler={handleRestrictedAccess}\n    >\n      <Stack width=\"100%\" spacing={isModifiable ? 5 : 2}>\n        <AirQualityAlertProvider>\n          <AlertsTabs />\n        </AirQualityAlertProvider>\n\n        {isModifiable ? <EmailsInput /> : (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Alerts will be sent to your email address: <b>{user?.email}</b>\n          </Typography>\n        )}\n      </Stack>\n    </CustomDialog>\n  );\n}\n","import { useEffect, useRef, useCallback, useContext, useState } from \"react\";\nimport { AppRoutes } from \"../../Utils/AppRoutes\";\nimport { LoginTypes } from \"../Account/Utils\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport EmailVerificationDialog from \"./EmailVerificationDialog\";\nimport { useSnackbar } from \"notistack\";\n\nconst LoginPopupHandler = ({ onLoginSuccess, children }) => {\n    const popupRef = useRef(null);\n    const { enqueueSnackbar } = useSnackbar()\n    const { setAuthenticationState, setUser } = useContext(UserContext);\n\n    const [showVerificationDialog, setShowVerificationDialog] = useState(false);\n    const [email, setEmail] = useState(\"\");\n\n    const openLoginPopup = useCallback(() => {\n        const width = 500;\n        const height = 600;\n        const left = (window.screen.width - width) / 2;\n        const top = (window.screen.height - height) / 2;\n\n        const popup = window.open(\n            AppRoutes.login,\n            \"Login\",\n            `width=${width},height=${height},top=${top},left=${left}`\n        );\n\n        if (popup) {\n            popup.focus();\n            popupRef.current = popup;\n\n            const intervalId = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(intervalId);\n                    window.removeEventListener(\"message\", handleMessage);\n                    popupRef.current = null;\n                }\n            }, 500);\n        } else {\n            alert(\"Popup blocked. Please enable popups for login.\");\n        }\n    }, []);\n\n    const handleMessage = useCallback(\n        (event) => {\n            if (event.origin === window.location.origin && event.data.type === LoginTypes.password) {\n                if (event.data.success) {\n                    const user = event.data.user;\n\n                    setAuthenticationState({\n                        checkedAuthentication: true,\n                        authenticated: true,\n                    });\n                    setUser(user);\n\n                    if (user.message) {\n                        enqueueSnackbar(user.message, SnackbarMetadata.success);\n                    }\n\n                    if (user.is_verified === false) {\n                        setShowVerificationDialog(true);\n                        setEmail(user.email);\n                    }\n\n                    onLoginSuccess?.();\n                }\n            }\n        },\n        [onLoginSuccess]\n    );\n\n    useEffect(() => {\n        window.addEventListener(\"message\", handleMessage);\n        return () => {\n            window.removeEventListener(\"message\", handleMessage);\n        };\n    }, [handleMessage]);\n\n    return (\n        <>\n            {children({\n                openLoginPopup,\n            })}\n            <EmailVerificationDialog\n                open={showVerificationDialog}\n                email={email}\n            />\n        </>\n    );\n};\n\nexport default LoginPopupHandler;\n","import { Grid } from \"@mui/material\";\nimport ScreenDropDownMenu from \"../../Components/AirQuality/AirQualityScreen/ScreenDropDownMenu\";\nimport DatasetDownloadDialog from \"../../Components/DatasetDownload/DatasetDownloadDialog\";\nimport AirQualityAlerts from \"../../Components/AirQuality/AirQualityAlerts/AirQualityAlert\";\nimport LoginPopupHandler from \"../../Components/Account/LoginPopupHandler\";\nimport useLoginHandler from \"../../Components/Account/useLoginHandler\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\nimport { AirQualityAlertProvider } from \"../../ContextProviders/AirQualityAlertContext\";\nimport { useSnackbar } from \"notistack\";\n\nconst ProjectReservedArea = () => {\n    const { loggedIn } = useLoginHandler();\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleLoginSuccess = () => {\n        enqueueSnackbar(\"You can now access Dataset and Alerts.\", {\n            variant: SnackbarMetadata.success.variant,\n            duration: SnackbarMetadata.success.duration * 2\n        });\n    };\n\n    return (\n        <LoginPopupHandler\n            onLoginSuccess={handleLoginSuccess}\n        >\n            {({ openLoginPopup }) => (\n                <Grid container spacing={1} justifyContent=\"center\" alignItems=\"center\">\n                    <Grid item>\n                        {/* Use this code block if TV screen should be only for logged in users even for publicly available institutions */}\n                        {/* <ScreenDropDownMenu onButtonClick={loggedIn ? null : openLoginPopup} /> */}\n\n                        {/* For now, it doesn't require login */}\n                        <ScreenDropDownMenu onButtonClick={null} />\n                    </Grid>\n                    <Grid item>\n                        <DatasetDownloadDialog onButtonClick={loggedIn ? null : openLoginPopup} />\n                    </Grid>\n                    <Grid item>\n                        <AirQualityAlertProvider>\n                            <AirQualityAlerts onButtonClick={loggedIn ? null : openLoginPopup} />\n                        </AirQualityAlertProvider>\n                    </Grid>\n                </Grid>\n            )}\n        </LoginPopupHandler>\n    );\n};\n\nexport default ProjectReservedArea;\n","import { Chip, Tooltip, Skeleton } from '@mui/material';\n\n// Custom Chip component to display metadata\nconst CustomChip = (props) => {\n    const { tooltipTitle, label, ...otherProps } = props;\n\n    const chip = (\n        <Chip\n            size=\"small\"\n            label={label || <Skeleton variant=\"text\" sx={{ minWidth: '5rem' }} />}\n            sx={{\n                userSelect: 'text',\n                '& .MuiChip-label': {\n                    userSelect: 'text'\n                }\n            }}\n            {...otherProps}\n        />\n    );\n\n\n    return tooltipTitle ? (\n        <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n            {chip}\n        </Tooltip>\n    ) : chip;\n}\n\nexport default CustomChip;","import { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Box, Menu, MenuItem, MenuList } from \"@mui/material\";\nimport CustomChip from \"./CustomChip\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { LocalStorage } from \"../Utils/LocalStorage\";\nimport { AppRoutes } from \"../Utils/AppRoutes\";\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../ContextProviders/UserContext\";\n\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\nimport useSchoolMetadata from \"../hooks/useSchoolMetadata\";\n\nconst SchoolSelector = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (newSchoolID) => () => {\n    if (currentSchoolID !== newSchoolID) {\n      localStorage.setItem(LocalStorage.schoolID, newSchoolID)\n\n      Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n        {\n          origin_school: currentSchoolID,\n          destination_school_id: newSchoolID,\n          origin_id: 'school_selector'\n        });\n\n      navigate(`${AppRoutes.dashboard}/${newSchoolID}`)\n    }\n    handleClose();\n  };\n\n  if (!schoolMetadata) return;\n\n  // If there is only one school, return a Chip displaying the name of that school\n  if (!Array.isArray(user.allowedSchools) || user.allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={schoolMetadata.name || \"No School Name Given\"}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  // Else, display a drop down menu that allows choosing between different schools\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={returnChipLabel(schoolMetadata.name, open)}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {user.allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nconst returnChipLabel = (name, open) => {\n  return (\n    <Box sx={{\n      '& svg': {\n        fontSize: \"1rem\", verticalAlign: \"sub\", marginLeft: \"0.25rem\"\n      }\n    }\n    }>\n      {name || \"Loading...\"}\n      {open ? (\n        <ArrowDropUpIcon />\n      ) : (\n        <ArrowDropDownIcon />\n      )}\n    </Box>\n  );\n};\n\nexport default SchoolSelector;","// import { MetadataContext } from \"../../ContextProviders/MetadataContext\";\nimport { Grid } from \"@mui/material\";\n\nimport SchoolSelector from \"../../Components/SchoolSelector\";\nimport CustomChip from \"../../Components/CustomChip\";\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n// import BarChartIcon from '@mui/icons-material/BarChart';\n// import CommentIcon from '@mui/icons-material/Comment';\n// import * as Tracking from '../../Utils/Tracking';\n// import { scrollToSection } from \"../../Components/Header/MenuItemAsNavLink\";\n// import sectionData from '../../section_data.json';\n// import { HYVOR_PAGE_NAME, NYUAD } from \"../../Utils/GlobalVariables\";\n\n// Temporarily not using HyvorTalk comment anymore\n// const GridOfMetadataChips = ({ displayCommentSection }) => {\n\n\nconst GridOfMetadataChips = () => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (!schoolMetadata) return;\n\n    // Temporarily not using HyvorTalk comment anymore\n    // const { commentCounts, fetchCommentCounts, setCommentCounts } = useContext(MetadataContext);\n    // Fetch comment count for NYUAD\n    // useEffect(() => {\n    //     if (!schoolMetadata) return;\n\n    //     const isNYUAD = schoolMetadata.school_id === NYUAD;\n    //     if (isNYUAD && !commentCounts) {\n    //         fetchCommentCounts().then((data) => {\n    //             setCommentCounts(data);\n    //         });\n    //     }\n    // }, [schoolMetadata])\n\n    return (\n        <Grid container item spacing={1} justifyContent=\"center\">\n            <Grid item>\n                <SchoolSelector />\n            </Grid>\n\n            <Grid item>\n                <CustomChip\n                    icon={<PersonIcon />}\n                    label={`${schoolMetadata.contactPerson} <${schoolMetadata.contactEmail}>`}\n                    tooltipTitle=\"Main Contact\"\n                    component=\"a\"\n                    href={`mailto:${schoolMetadata?.contactEmail}`}\n                    clickable\n                />\n            </Grid>\n\n            {/* Temporarily not using HyvorTalk comment anymore\n            {(displayCommentSection === true && commentCounts !== null) ?\n                (\n                    <Grid item>\n                        <CustomChip\n                            icon={<CommentIcon />}\n                            label={`${commentCounts[HYVOR_PAGE_NAME]} Comment${commentCounts[HYVOR_PAGE_NAME] > 1 ? \"s\" : \"\"}`}\n                            tooltipTitle=\"Number of Comments\"\n                            onClick={() => {\n                                scrollToSection(sectionData.commentSection.id);\n                                Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                                    {\n                                        destination_id: sectionData.commentSection.id,\n                                        destination_label: sectionData.commentSection.toString(),\n                                        origin_id: 'chip'\n                                    })\n                            }}\n                        />\n                    </Grid>\n                ) : null} */}\n        </Grid>\n    )\n}\n\nexport default GridOfMetadataChips;","import { Skeleton, Typography, useTheme } from \"@mui/material\";\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from \"../../Utils/UtilFunctions\";\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n\nconst ProjectDescription = () => {\n    const theme = useTheme();\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (schoolMetadata) return (\n        <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                    color: `${theme.palette.text.secondary}`\n                }\n            }}\n            gutterBottom\n        >\n            {\n                parse(schoolMetadata.description || '', {\n                    replace: replacePlainHTMLWithMuiComponents,\n                })\n            }\n        </Typography>\n    )\n    else {\n        return (\n            Array.from({ length: 3 }).map((_, index) => (\n                <Skeleton key={index} variant='text' />\n            ))\n        )\n    }\n}\n\nexport default ProjectDescription;","import { Stack, Button } from \"@mui/material\";\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\n\nconst LoadMoreButton = () => {\n    const { loadMoreCharts, setLoadMoreCharts } = useContext(DashboardContext);\n\n    if (loadMoreCharts === false) {\n        return (\n            <Stack sx={{ mt: 6, mx: 'auto', maxWidth: 'sm' }}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setLoadMoreCharts(true);\n                    }}\n                >\n                    <KeyboardArrowDownIcon sx={{ fontSize: '1rem' }} />&nbsp;Load More Charts\n                </Button>\n            </Stack>\n        )\n    }\n    else {\n        return null;\n    }\n}\n\nexport default LoadMoreButton;","import { useContext } from 'react';\nimport ChartComponentWrapper from '../../Graphs/ChartComponentWrapper';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\n\nimport { Box, Container, Divider, Grid } from '@mui/material';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQuality/AirQualityIndexLegendQuickGlance';\n\nimport sectionData from '../../section_data.json';\n\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport CurrentAQIGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIGrid';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport AQIexplanation from '../../Components/AirQuality/AQIexplanation';\nimport { AxesPickerProvider } from '../../ContextProviders/AxesPickerContext';\nimport { NUMBER_OF_CHARTS_TO_LOAD_INITIALLY } from '../../Utils/GlobalVariables';\n\nimport ProjectReservedArea from './ProjectReservedArea';\nimport GridOfMetadataChips from './GridOfMetadataChips';\nimport ProjectDescription from './ProjectDescription';\nimport LoadMoreButton from './LoadMoreButton';\nimport CurrentAQIMapWithGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIMapWithGrid';\nimport { ChartAPIendpointsOrder } from '../../API/Utils';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\nimport useSchoolMetadata from '../../hooks/useSchoolMetadata';\n\n// Temporarily not using HyvorTalk comment anymore\n// import CommentSection from '../../Components/CommentSection';\n// import { HYVOR_PAGE_NAME } from '../../Utils/GlobalVariables';\n\nconst Project = () => {\n  const { currentSchoolID, loadMoreCharts } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const chartsToRender = loadMoreCharts\n    ? ChartAPIendpointsOrder.length\n    : NUMBER_OF_CHARTS_TO_LOAD_INITIALLY;\n\n  const { themePreference, temperatureUnitPreference } = useContext(PreferenceContext);\n\n  // Temporarily not using HyvorTalk comment anymore\n  // const [displayCommentSection, setDisplayCommentSection] = useState(false);\n\n  const getDashboardTitle = () => {\n    if (schoolMetadata?.school_id) return `Air Quality | ${schoolMetadata?.school_id}`\n  }\n\n  return (\n    <Box width=\"100%\">\n      <AirQualityIndexLegendQuickGlance />\n\n      <FullWidthBox backgroundColor='customAlternateBackground'>\n        <Container sx={{ pt: 2, pb: 2 }}>\n          <Grid container spacing={1.5} sx={{ mb: 4 }}>\n            <Grid item xs={12}>\n              <UppercaseTitle\n                text={getDashboardTitle()}\n                textAlign=\"center\"\n                sx={{ pb: 0 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <GridOfMetadataChips\n              // Temporarily not using HyvorTalk comment anymore\n              // displayCommentSection={displayCommentSection}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              {/* Reserved area that requires an account, even for public schools */}\n              <ProjectReservedArea />\n            </Grid>\n          </Grid>\n\n          {schoolMetadata?.has_map === true ?\n            (\n              <CurrentAQIMapWithGrid\n                currentSensorsData={currentSensorsData}\n                schoolID={currentSchoolID}\n                isOnBannerPage={false}\n                minMapHeight={\"250px\"}\n              />\n            ) : (\n              <Box textAlign=\"center\" sx={{ mb: 2 }}>\n                <CurrentAQIGrid\n                  currentSensorsData={currentSensorsData}\n                  isScreen={false}\n                  temperatureUnitPreference={temperatureUnitPreference}\n                />\n              </Box>\n            )\n          }\n\n          <ProjectDescription />\n\n          <AQIexplanation />\n\n        </Container>\n      </FullWidthBox>\n\n      <Box id={sectionData.charts.id}>\n        {ChartAPIendpointsOrder.slice(0, chartsToRender).map((_, index) => (\n          <FullWidthBox\n            key={index}\n            backgroundColor={index % 2 !== 0 ? 'customAlternateBackground' : ''}\n          >\n            <Container\n              sx={{ pt: 4, pb: 4 }}\n              height=\"auto\"\n              className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n              id={`chart-${index + 1}`}\n            >\n\n              <AxesPickerProvider>\n                <ChartComponentWrapper chartID={index} />\n              </AxesPickerProvider>\n\n              {\n                // Optionally display the button to load more charts at the bottom of the last chart\n                // (if not already fetched every chart)\n                index === chartsToRender - 1 && !loadMoreCharts && <LoadMoreButton />\n              }\n            </Container>\n          </FullWidthBox>\n        ))}\n      </Box>\n      <Divider />\n\n      {/* Temporarily not using HyvorTalk comment anymore\n      {displayCommentSection === true &&\n        <FullWidthBox id={sectionData.commentSection.id} sx={{ pt: 3, pb: 4 }}>\n          <CommentSection pageID={HYVOR_PAGE_NAME} />\n        </FullWidthBox>\n      } */}\n    </Box >\n  );\n};\n\nexport default Project;\n\n","import { useEffect, useContext } from \"react\";\n\nimport Project from \"./Project/Project\";\n\nimport { MetadataContext } from \"../ContextProviders/MetadataContext\";\n\nimport { AppRoutes } from \"../Utils/AppRoutes\";\nimport { CITIESair } from \"../Utils/GlobalVariables\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst Dashboard = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  // Update the page's title based on currentSchoolID\n  useEffect(() => {\n    if (!currentSchoolID) return;\n\n    document.title = `${CITIESair} | ${currentSchoolID.toUpperCase()}`;\n  }, [currentSchoolID]);\n\n  // Update current page type\n  const { setCurrentPage } = useContext(MetadataContext);\n  useEffect(() => {\n    setCurrentPage(AppRoutes.dashboard);\n  }, [setCurrentPage]);\n\n  return (\n    <Project />\n  )\n};\n\nexport default Dashboard;","import { Skeleton, Typography } from '@mui/material';\n\nexport default function UppercaseTitle({ text, sx, ...otherProps }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1,\n        ...sx\n      }}\n      {...otherProps}\n    >\n      {text || <Skeleton variant='text' />}\n    </Typography>\n  );\n}\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { getTranslation, replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\nimport { useContext } from 'react';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\nimport { CITIESair } from '../../Utils/GlobalVariables';\n\nexport const StyledTable = styled(Table, {\n  shouldForwardProp: (prop) => prop !== 'tiny',\n})(({ theme, tiny }) => ({\n  minWidth: tiny || 700,\n  '& th, td': {\n    fontSize: tiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: tiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { themePreference, language } = useContext(PreferenceContext);\n\n  const { tiny, hideAQIDescription } = props;\n\n  const returnFormattedBreakpoints = (low, high) => {\n    if (high === Infinity) return `${low}+`;\n    else return `${low} - ${high}`;\n  }\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" tiny={tiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n\n              {!hideAQIDescription &&\n                <TableCell align=\"left\">\n                  {CITIESair}&apos; Suggested Actions\n                </TableCell>\n              }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQI_Database.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: element.color[themePreference] }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {getTranslation(element.category, language)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.aqiUS.low, element.aqiUS.high)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.rawPM2_5.low, element.rawPM2_5.high)}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(getTranslation(element.healthSuggestions.outdoors, language), {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n    </>\n  );\n}\n\nexport default AirQualityIndexTable;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(1) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n  '& .MuiAccordionSummary-content.Mui-expanded': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst TooltipText = {\n  expand: \"Click to expand section\",\n  collapse: \"Click to collapse section\"\n}\n\nconst ExpandableSection = (props) => {\n  const { title, content, icon, disabled } = props;\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n    Tracking.sendEventAnalytics(\n      isExpanded ? Tracking.Events.expandSection : Tracking.Events.collapseSection,\n      {\n        section: title\n      }\n    );\n  };\n\n  return (\n    <Box sx={{\n      '& .MuiAccordion-root.Mui-disabled': {\n        backgroundColor: \"transparent\"\n      }\n    }}>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        disabled={disabled}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ArrowDropDownIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? TooltipText.collapse : TooltipText.expand} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body1\">\n              {title}\n              <Box component=\"span\" sx={{ ml: 0.25 }}>\n                {icon}\n              </Box>\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails sx={{ pt: 0 }}>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;","import { useContext } from 'react';\nimport { Typography, Box } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport AirQualityIndexTable from './AirQualityIndexTable';\nimport ExpandableSection from '../ExpandableSection/ExpandableSection';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport InfoIcon from '@mui/icons-material/Info';\n\nconst Explanation = {\n  title: \"Explanation of the US Air Quality Index (AQI) for PM2.5\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration, recently updated in February 2024: <sup>[1]</sup><ul><li><b>Annual average</b>: 9.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nconst AQIexplanation = () => {\n  const { themePreference } = useContext(PreferenceContext);\n\n  return (\n    <ExpandableSection\n      title={Explanation.title}\n      icon={<InfoIcon sx={{ fontSize: \"1rem\" }} />}\n      content={(\n        <Box>\n          <AirQualityIndexTable themePreference={themePreference} />\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mt: 2 }}\n          >\n            {parse(Explanation.subtitle, {\n              replace: replacePlainHTMLWithMuiComponents,\n            })}\n          </Typography>\n          <ExpandableSection\n            title={\"Reference\"}\n            content={(\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {parse(Explanation.reference, {\n                  replace: replacePlainHTMLWithMuiComponents,\n                })}\n              </Typography>\n            )}\n          />\n        </Box>\n      )}\n    />\n  )\n};\n\nexport default AQIexplanation;"],"names":["useSchoolMetadata","currentSchoolID","useContext","DashboardContext","useQuery","queryKey","GeneralAPIendpoints","schoolmetadata","queryFn","async","url","getApiUrl","endpoint","school_id","fetchDataFromURL","enabled","staleTime","placeholderData","prev","SELECT_ALL","SeriesSelector","props","items","itemsFromChart","selectorID","allowMultiple","seriesLabel","onSeriesSelection","displayChip","theme","useTheme","isLargeScreen","useMediaQuery","breakpoints","up","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","setItems","useState","selectAll","setSelectAll","useEffect","prevItems","prevMap","Map","map","i","label","selected","newIt","_objectSpread","has","get","every","item","handleChange","event","target","value","includes","updatedItems","index","newDataColumns","selectedItems","filter","some","selectedItem","handleItemToggle","existingItem","_jsxs","Stack","direction","alignItems","gap","width","children","_jsx","Typography","color","sx","textTransform","spacing","FormControl","minWidth","borderRadius","concat","shape","size","Select","labelId","id","multiple","onChange","renderValue","VisibilityIcon","fontSize","text","secondary","variant","length","renderedLabel","py","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","fontWeight","pl","Switch","Grid","container","down","display","Chip","onDelete","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","_ref","isPortrait","isSmaller","returnChartControlUI","_chartControl$options","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","title","vAxis","annotations","legend","pointSize","normalizeColorStops","_ref2","colors","optionalMinValue","optionalMaxValue","isValidArray","offset","totalColors","clampedStops","colorStop","offsets","normalizedOffsets","minOffset","maxOffset","normalizeColorStopOffsets","Math","min","max","rgbToHex","r","g","b","x","hex","toString","join","interpolateColor","color1","color2","factor","element","result","slice","round","generateDiscreteColorGradientArray","_ref3","numSteps","normalizedColors","forEach","replace","m","exec","parseInt","hexToRgb","colorArray","stepPositions","Array","from","_","pos","offset1","offset2","j","interpolatedColor","push","generateCssBackgroundGradient","_ref4","gradientDirection","BackgroundGradient","_ref6","height","visibility","x1","y1","x2","y2","stopColor","valueRange","colorAxis","minValue","maxValue","rangeBoxMinValue","rangeBoxMaxValue","undefined","calculateMarkerPositionOnRangeBox","labelStyle","lineHeight","textAlign","whiteSpace","bottomLabelStyle","triangleStyle","borderLeft","borderRight","topTriangleStyle","top","bottomTriangleStyle","borderBottom","Box","my","float","right","border","left","day","tooltipText","dateRange","inFirstTwoRowsOfChart","tooltipBoxRef","useRef","current","parentDiv","parentElement","ref","className","mr","parse","replacePlainHTMLWithMuiComponents","getCalendarChartMargin","_options$legend","_options$colorAxis","_options$colorAxis2","_options$colorAxis3","_options$colorAxis4","dataArray","valueRangeBoxTitle","windowSize","setDateRange","setValueRange","calendarHeight","setCalendarHeight","thisDateRange","dateStrings","reduce","getDateRangeForCalendarChart","values","getValueRangeForCalendarChart","numberOfYears","Date","getFullYear","calendarChartMargin","totalHeight","displayLegend","dateStr","date","dayOfWeek","getDay","isFirstTwoDaysOfWeek","firstYear","isInFirstYear","calendarCellColors","gradientSteps","GoogleChartStyleWrapper","ValueRangeBox","overflowY","ResponsiveCalendar","data","to","emptyColor","align","fill","margin","yearSpacing","monthBorderColor","primary","monthBorderWidth","daySpacing","dayBorderWidth","tooltip","tooltipData","find","DOMParser","parseFromString","body","innerHTML","TooltipCalendarChart","today","yesterday","range","startDate","startOfDay","addHours","endDate","last14Days","addDays","endOfDay","last30Days","last365Days","allTime","minDateOfDataset","formattedMinDate","format","returnCustomStaticRanges","aggregationType","AggregationType","minute","month","year","AggregationTypeMetadata","maxDays","hour","Infinity","StyledDateRangePicker","styled","Paper","shouldForwardProp","prop","showPickerPanel","smallScreen","padding","maxWidth","boxShadow","action","flexDirection","main","customBackground","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","content","backgroundImage","pulse","keyframes","_templateObject","_taggedTemplateLiteral","AggregationTypeToggle","setAggregationType","extraSmallScreen","ToggleButtonGroup","fullWidth","exclusive","newType","orientation","Object","type","_AggregationTypeMetad","ToggleButton","px","RadioButtonCheckedIcon","AQI_Database","Light","animation","chartID","allChartsConfigs","chartConfig","chartdata","queryParams","chartIndex","isFirstRequest","setIsFirstRequest","enqueueSnackbar","useSnackbar","isFetching","useChartData","updateIndividualChartConfigQueryParams","key","defaultRange","isSameDay","maxAllowedDays","differenceInDays","SnackbarMetadata","error","formattedDates","startDateObject","endDateObject","returnFormattedDates","setShowPickerPanel","paperRef","handleClickOutside","contains","document","addEventListener","removeEventListener","_Fragment","xs","sm","lg","flex","minHeight","elevation","transition","DateRangePicker","ranges","selection","staticRanges","createStaticRanges","inputRanges","rangeColors","minDate","maxDate","months","showMonthAndYearPickers","fixedHeight","preventSnapRefocus","startDatePlaceholder","endDatePlaceholder","editableDateInputs","showMonthArrow","weekStartsOn","AxesPickerContext","createContext","AxesPickerProvider","setHAxis","setVAxis","contextValue","useMemo","Provider","SELECT_MIN_WIDTH","LeftSelect","between","RightSelect","setIndividualChartConfig","allowedAxes","selectedAxes","dataType","shouldDisableApplyButton","setShouldDisableApplyButton","receivedHAxis","receivedVAxis","shouldDisableOption","option","allowedDataTypes","rowGap","columnGap","InputLabel","autoWidth","sensor","Button","applyChanges","ChartAPIendpointsOrder","sensorX","sensorY","customMessage","selectableAxes","messagePrefix","messageSuffix","Alert","severity","component","returnHoursFromMinutesPastMidnight","minutes","floor","padStart","HOURS","minutesPastMidnight","PREDEFINED_TIMERANGES","allday","start","end","timeRangeLabel","schoolHour","custom","SimplePicker","icon","isExtraSmall","otherProps","_objectWithoutProperties","_excluded","verticalAlign","marginLeft","is","timeRange","defaultTimeRange","isResponsive","hasTitle","displayFromToPickers","setDisplayFromToPickers","startTime","endTime","predefinedRange","setPredefinedRange","match","handleModeChange","useCallback","newMode","WatchLaterIcon","mt","idx","arr","e","h","setTimeRange","TimeRangeSelector","newRange","SubChart","_chartData$subcharts","chartData","selectedDataType","google","GoogleContext","dataTable","setDataTable","chartWrapper","setChartWrapper","controlWrapper","setControlWrapper","previousChartData","setPreviousChartData","isFirstRender","setIsFirstRender","shouldRenderChart","setShouldRenderChart","renderChartNow","setRenderChartNow","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","initialVAxisRange","setInitialVAxisRage","__","random","substr","_chartData$subcharts$","_chartData$options","_chartData$options2","_chartData$options2$b","_chartData$options3","_chartData$options4","_chartData$options4$c","_chartData$options4$c2","_chartData$options5","_chartData$options5$c","_chartData$options5$c2","_chartData$options6","_chartData$options6$c","_chartData$options6$c2","_chartData$options7","_chartData$options7$c","_chartData$options7$c2","_chartData$options8","_chartData$options8$w","_chartData$options9","_chartData$options9$w","_chartData$options$le","_chartData$options0","_chartData$options0$l","_options$vAxis$format","_options$vAxis","_options$vAxis$title","_options$vAxis2","_options$vAxis$viewWi","_options$vAxis3","_options$vAxis3$viewW","_options$vAxis$viewWi2","_options$vAxis4","_options$vAxis4$viewW","_options$vAxis$viewWi3","_options$vAxis5","_options$vAxis5$viewW","_options$hAxis$title","_options$hAxis","_options$vAxis6","_options$vAxis7","_options$vAxis7$gridl","_options$hAxis2","_options$hAxis3","_options$hAxis3$gridl","_options$hAxis4","_options$hAxis5","_options$hAxis5$gridl","_options$annotations","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","trigger","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","viewWindow","slantedText","slantedTextAngle","optionsColors","series","_serie","serie","trendlines","_item","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","colorAxes","_unused","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","ry","annotationBoxFill","fillOpacity","returnGenericOptions","calendarDataArray","setCalendarDataArray","NivoCalendarChart","returnSelectedDataType","dataTypeKey","dataTypes","showUnit","NoChartToRender","LoadingAnimation","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","simulatedEvent","MouseEvent","bubbles","cancelable","view","window","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","isMounted","controlDOM","querySelector","touchEvent","capture","addTouchEventListenerForChartControl","seriesSelector","dateRangePicker","timeRangeSelector","formatters","hasAtLeastOneAuxillaryControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","_options$series2","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","getColumnRange","sourceColumn","isNaN","_allInitialColumns","_chartWrapper","_controlWrapper","hiddenSeriesObject","enableInteractivity","visibleInLegend","currentControlOptions","getOptions","newViewColumns","dataColumn","indexIn_","role","setView","newOptions","selectedSeriesCount","JSON","stringify","_shouldRenderChart","visualization","arrayToDataTable","hasOwnProperty","numberFormat","NumberFormat","numberFormatter","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","containerId","thisControlWrapper","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","ControlWrapper","bind","initAllInitialColumns","initDataColumns","prevSelections","c","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","indexInAllInitialColumns","defaultSeriesToDisplayInitially","dataCols","_options$series","_options$series$col$s","getInitialColumns","gradientBackgroundColor","gradientBackgroundId","svgFillGradient","_options$vAxis2$viewW","_ref5","generateSvgFillGradient","ml","CustomDateRangePicker","AxesPicker","TimeRangeSelectorWrapperForDataHook","parseFloat","wordLimit","reference","isExpanded","setIsExpanded","isMobile","subtitleRef","words","split","displayText","lastFullStop","lastIndexOf","ClickAwayListener","onClickAway","subtitleParent","closest","chartElements","Set","_target","tagName","parentNode","isClickWithinSharedParent","cursor","textDecoration","anchorEl","setAnchorEl","name_title","open","Boolean","handleClose","currentTarget","ArrowDropDownIcon","Menu","onClose","MenuListProps","handleMenuItemClick","Tabs","smallFontSize","ChartStyleWrapper","mode","overflowX","scrollbarGutter","StyledMenuItem","isLoading","isSmallWidth","setIsPortrait","matchMedia","matches","setWindowSize","innerWidth","innerHeight","currentTab","setCurrentTab","previousTab","setPreviousTab","dropdownMenuTabIndex","setDropdownMenuTabIndex","dropdownMenuCurrentTitle","setDropdownMenuCurrentTitle","setAllowedDataTypes","setSelectedDataType","chartHeight","chartMaxHeight","initializeAllowedDataTypes","name_short","unit","DataTypes","cleanupResize","setupResizeListener","DEBOUNCE_IN_MILLISECONDS","timeoutID","handleWindowResize","clearTimeout","setTimeout","optionalText","DataTypeDropDownMenu","pointerEvents","renderMultipleSubcharts","needsDropdownMenu","MAX_NUM_TABS_TO_DISPLAY","subchartsDataForTabs","subchartsDataForDropDownMenu","shouldDisplayThisSubchart","StyledTabs","handleTabChange","newIndex","Tab","subchartTitle","ExpandMoreIcon","subchartTitleShort","handleDropdownMenuSelection","WebkitOverflowScrolling","currentSubchart","mb","CollapsibleSubtitle","getSubtitles","subtitle","subchartSubtitle","getReferences","_chartData$subcharts$2","AirQualityIndexLegendQuickGlance","handlePopperOpen","Tracking","airQualityIndexLegendQuickGlance","handlePopperClose","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","AirIcon","Popper","placement","keepMounted","TransitionProps","Fade","timeout","mx","AirQualityIndexTable","tiny","hideAQIDescription","ScreenDropDownMenu","schoolMetadata","navigate","useNavigate","screens","handleSingleScreenClick","_screens$","screen_name","TvIcon","handleMenuClose","screen","screenName","location_long","buttonIcon","buttonIconAria","buttonLabel","buttonVariant","trackingEvent","dialogTitle","dialogOpenHandler","dialogCloseHandler","displaySchoolID","iconOnly","setOpen","onOpen","Tooltip","IconButton","Dialog","fullScreen","DialogActions","ChevronLeftIcon","DialogTitle","toUpperCase","DialogContent","openLoginPopup","authenticationState","user","UserContext","loggedIn","authenticated","checkedAuthentication","handleRestrictedAccess","allowedSchools","school","DatasetDownloadDialog","onButtonClick","useLoginHandler","currentSensorsData","useCurrentSensorsData","sensorsDatasets","updateSensorsDatasets","previewingDataset","setPreviewingDataset","acc","_item$sensor$last_see","location_short","location_type","last_seen","rawDatasets","keys","reverse","datasetAcc","datasetKey","sample","full","CustomDialog","DataObjectIcon","rawDatasetButtonClicked","DatasetSelectorAndPreviewer","schoolID","fontStyle","CITIESair","Link","href","firstSensor","initialDatasetType","datasetType","getRawDatasetUrl","sensor_location_short","isSample","extension","SupportedFetchExtensions","csv","needsAuthorization","then","tmp","catch","console","log","md","DatasetsTable","PreviewDataset","Table","tableLayout","TableHead","TableRow","TableCell","TableBody","Dataset","isPreviewing","selectedDatasetType","setSelectedDatasetType","fetchThisDataset","NYUpurpleLight","setThisSensorToPreview","selectedVal","disablePortal","charAt","toLowerCase","previewingDatasetName","setPreviewingDatasetName","csvFileName","setCsvFileName","isDatasetLoading","setIsDatasetLoading","convertCSVforDownload","dataset","blob","Blob","URL","createObjectURL","downloadLink","createElement","download","appendChild","click","revokeObjectURL","removeChild","formattedData","setFormattedData","rowNumber","setRowNumber","_sensorsDatasets$prev","_sensorsDatasets$prev2","csvData","lines","headers","rows","dateString","row","fontFamily","gutterBottom","pt","marginTop","userSelect","downloadPreviewingDataset","fetchedDataset","rawDatasetDownloaded","dataset_type","DownloadIcon","compareArrays","arr1","arr2","EmailsInput","alertEmails","alertsEmails","queryClient","useQueryClient","saveEmailsMutation","useMutation","mutationFn","restMethod","RESTmethods","POST","emailsToSave","onSuccess","setQueryData","success","onError","localEmails","setLocalEmails","emailsListChanged","setEmailsListChanged","currentEmail","setCurrentEmail","menuAnchor","setMenuAnchor","saveButtonTooltipTitle","setSaveButtonTooltipTitle","handleAddEmail","passedEmail","isBulkAdding","arguments","email","trim","startsWith","endsWith","validateEmail","warning","handleDeleteEmail","newEmails","wrapperRef","inputRef","prevInputRef","allSelected","setAllSelected","handleGlobalKeyDown","isMeta","metaKey","ctrlKey","isInputFocused","activeElement","navigator","clipboard","writeText","info","focus","preventScroll","handleDocumentClick","handleMenuOpen","handleBeforeUnload","returnValue","wrap","tabIndex","flexWrap","outline","onContextMenu","TextField","native","nativeEvent","inputType","isComposing","maybeEmail","autofillLike","test","jumpedIn","onKeyUp","onPaste","pastedText","clipboardData","getData","emails","placeholder","InputProps","disableUnderline","enterTouchDelay","_emails","mutate","isPending","CircularProgress","disableShrink","emailToCopy","handleCopyEmail","AlertTypes","threshold","name","tableColumnHeader","SpeedIcon","daily","CalendarMonthIcon","ThresholdAlertTypes","below_threshold","sign","above_threshold","CrudTypes","SharedColumnHeader","AirQualityAlertKeys","getAlertDefaultPlaceholder","localAlertType","localOppositeAlertType","alert_type","addChildToAlerts","processed","alert","parent","a","AlertDeletionDialog","onConfirmedDelete","DialogContentText","DialogData","primaryButtonLabel","errorMessage","successMessage","contentText","maxLength","showTip","currentLength","multiline","minRows","maxRows","inputProps","DAYS_OF_WEEK","CustomPickersDay","PickersDay","common","white","dark","CustomDayComponent","selectedDates","other","isSelected","dayjs","MultiDaysCalendarPicker","parsedSelectedDates","len","LocalizationProvider","dateAdapter","AdapterDayjs","localeText","calendarWeekNumberHeaderText","calendarWeekNumberText","weekNumber","DateCalendar","displayWeekNumber","slots","dayProps","selectionState","disableHighlightToday","startOf","DateSelector","daysOfWeek","excludedDates","handleDaysOfWeekChange","handleExcludedDatesChange","rowSpacing","columnSpacing","arrow","ThresholdSlider","defaultValue","stepsForThreshold","marks","backgroundCssGradient","invertSelection","showInput","inputUnit","valueLabelDisplay","sliderRangeMin","setSliderRangeMin","sliderRangeMax","setSliderRangeMax","nearestDataIndex","setNearestDataIndex","setError","helperText","setHelperText","findNearestDataIndex","val","greaterMarks","mark","nearestMark","curr","indexOf","localSliderRangeMin","localSliderRangeMax","stripedGradient","sliderSX","black","paper","paperBackgroundGradient","Number","step","Slider","getAriaLabel","handleSliderChange","newValue","AirQualityAlertContext","AirQualityAlertProvider","selectedAlert","setSelectedAlert","editingAlert","setEditingAlert","allowedDataTypesForSensor","setAllowedDataTypesForSensor","returnAllowedDataTypesForThisSensor","sensors","sensorData","elem","sensor_id","allowedDataTypesForThisSensor","ThresholdComponentWrapper","handleValueChange","placeholderValueBeforeDataTypeSelection","disabledSlider","language","PreferenceContext","thresholdSlider","currentDataTypeKey","dataTypeColorAxis","color_axis","defaultValueForAlert","database","DataTypeKeys","voc","VOC_Database","aqi","pm2_5","pm10_raw","co2","heat_index_C","HeatIndex_Database","threshold_mapping_name","low","getTranslation","category","MaxOnceADayCheckbox","FormGroup","FormControlLabel","FormHelperText","ThresholdTypeToggle","currentAlertType","others","thresholdAlertType","ThresholdType","_excluded2","returnFormattedStatusString","status","tense","AlertPropertyComponents","_schoolMetadata$senso","_DialogData$crudType","_editingAlert$AirQual","_editingAlert$AirQual2","alertTypeKey","crudType","allSensorsOfSchool","capitalizePhrase","isDisabled","PlaceIcon","_theme$palette$chart$","_theme$palette$chart$2","selectedDataTypeKey","defaultValueForChildAlert","validDaysOfWeek","isArray","sort","valueArray","currentExcludedDates","updatedExcludedDates","excludedDate","displayHourPicker","AccessTimeIcon","selectedAlertType","oppositeAlertTypeForChildAlert","disabledToggle","OptionalMessage","useEditAlertMutation","alertId","alertToEdit","getAlertsApiUrl","alerts","alert_id","PUT","editedAlert","username","openAlertModificationDialog","shouldDisableButton","setShouldDisableButton","removeChildAlertFromParentAlertBody","newBody","formatChildAlertBody","parent_alert_id","handleSuccess","passedCrudType","handleError","handleAlertModification","sanityCheckAlertBeforeSaving","valid","isAbove","childThreshold","message","createAlertMutation","alertToCreate","createdAlert","editAlertMutation","child_alert_id","formattedChildAlert","deleteAlertMutation","_editingAlert$AirQual3","_editingAlert$AirQual4","alertVal","datatypeKeyVal","isEqual","useCreateAlertMutation","useDeleteAlertMutation","DELETE","updated","returnDaysOfWeekString","days_of_week","missingDays","d","_DAYS_OF_WEEK$find","returnAlertNotModifiableString","owner_role","is_allowed_to_modify","UserRoles","_AlertTypes$alertType","alertsForTable","setOpenAlertModificationDialog","setCrudType","handleModifyClick","TransitionGroup","Grow","newIsEnabled","handleAlertEnableToggling","EditIcon","self_is_owner","returnCreatedByString","startIcon","AddAlarmIcon","AlertModificationDialog","AlertTab","alertType","alertsArray","hidden","AlertsTable","AlertsTabs","useAlerts","_queryResult$data","queryResult","retry","refetchOnWindowFocus","returnFilteredAlerts","filteredAlerts","_alert$AirQualityAler","parentAlertId","array","alertsLength","newVal","_AlertTypes$Object$ke","_Object$keys","iconPosition","AirQualityAlerts","isModifiable","admin","user_role","NotificationImportantIcon","onLoginSuccess","popupRef","setAuthenticationState","setUser","showVerificationDialog","setShowVerificationDialog","setEmail","popup","AppRoutes","login","intervalId","setInterval","closed","clearInterval","handleMessage","origin","location","LoginTypes","password","is_verified","EmailVerificationDialog","ProjectReservedArea","LoginPopupHandler","handleLoginSuccess","duration","tooltipTitle","chip","Skeleton","enterDelay","leaveDelay","returnChipLabel","ArrowDropUpIcon","SchoolSelector","CustomChip","clickable","MenuList","dense","newSchoolID","localStorage","setItem","LocalStorage","internalNavigation","origin_school","destination_school_id","origin_id","dashboard","GridOfMetadataChips","PersonIcon","contactPerson","contactEmail","ProjectDescription","pb","description","LoadMoreButton","loadMoreCharts","setLoadMoreCharts","KeyboardArrowDownIcon","Project","chartsToRender","NUMBER_OF_CHARTS_TO_LOAD_INITIALLY","themePreference","temperatureUnitPreference","FullWidthBox","Container","UppercaseTitle","getDashboardTitle","has_map","CurrentAQIMapWithGrid","isOnBannerPage","minMapHeight","CurrentAQIGrid","isScreen","AQIexplanation","sectionData","ThemePreferences","ChartComponentWrapper","Divider","setCurrentPage","MetadataContext","StyledTable","returnFormattedBreakpoints","high","pr","aqiUS","rawPM2_5","healthSuggestions","outdoors","StyledAccordion","MuiAccordion","expanded","default","shadows","StyledAccordionSummary","MuiAccordionSummary","paddingLeft","TooltipText","setExpanded","panel","expandSection","collapseSection","section","expandIcon","MuiAccordionDetails","Explanation","ExpandableSection","InfoIcon"],"sourceRoot":""}