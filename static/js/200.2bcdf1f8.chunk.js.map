{"version":3,"file":"static/js/200.2bcdf1f8.chunk.js","mappings":"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","sources":["hooks/useSchoolMetadata.jsx","Graphs/Subchart/SubchartUtils/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Utils/Gradient/GradientUtils.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/ValueRangeBox.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/TooltipCalendarChart.jsx","Graphs/Subchart/NivoCharts/NivoChartHelper.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/NivoCalendarChart.jsx","Components/DateRangePicker/DateRangePickerUtils.jsx","Components/DateRangePicker/AggregationTypeToggle.jsx","hooks/useChartData.jsx","Components/DateRangePicker/CustomDateRangePicker.jsx","ContextProviders/AxesPickerContext.jsx","Components/AxesPicker/AxesPicker.jsx","Graphs/Subchart/NoChartToRender.jsx","Components/TimeRange/TimeRangeUtils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker.jsx","Components/TimeRange/TimeRangeSelector.jsx","Components/TimeRange/TimeRangeSelectorWrapperForDataHook.jsx","Graphs/Subchart/SubChart.jsx","Components/CollapsibleSubtitle.jsx","Graphs/DataTypeDropDown.jsx","Components/StyledTabs.jsx","Graphs/ChartComponentWrapper.jsx","Components/AirQuality/AirQualityIndexLegendQuickGlance.jsx","Components/Account/useLoginHandler.jsx","Components/AirQuality/AirQualityScreen/ScreenDropDownMenu.jsx","Components/CustomDialog/CustomDialog.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/AirQuality/AirQualityAlerts/EmailsInput.jsx","Components/AirQuality/AirQualityAlerts/AlertTypes.jsx","ContextProviders/AirQualityAlertContext.jsx","Components/AirQuality/AirQualityAlerts/Utils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertDeletionDialog.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/DialogData.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/OptionalMessage.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MultiDaysCalendarPicker.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DaySelector.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdSlider.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdComponentWrapper.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MaxOnceADayCheckbox.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdTypeToggle.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/AlertPropertyComponents.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertModificationDialog.jsx","Components/AirQuality/AirQualityAlerts/AlertsTable.jsx","Components/AirQuality/AirQualityAlerts/AlertsTabs.jsx","Components/AirQuality/AirQualityAlerts/AirQualityAlert.jsx","Components/Account/LoginPopupHandler.jsx","Pages/Project/ProjectReservedArea.jsx","Components/CustomChip.jsx","Components/SchoolSelector.jsx","Pages/Project/GridOfMetadataChips.jsx","Pages/Project/ProjectDescription.jsx","Pages/Project/LoadMoreButton.jsx","Pages/Project/Project.jsx","Pages/Dashboard.jsx","Components/UppercaseTitle.jsx","Components/AirQuality/AirQualityIndexTable.jsx","Components/ExpandableSection/ExpandableSection.jsx","Components/AirQuality/AQIexplanation.jsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from '../API/Utils';\n\nconst useSchoolMetadata = () => {\n    const { currentSchoolID } = useContext(DashboardContext);\n\n    return useQuery({\n        queryKey: ['schoolMetadata', currentSchoolID],\n        queryFn: async () => {\n            const url = getApiUrl({\n                endpoint: GeneralAPIendpoints.schoolmetadata,\n                school_id: currentSchoolID\n            })\n\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID, // only run when ready\n        staleTime: 1000 * 60 * 60, // 1-hour cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useSchoolMetadata;","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch, useMediaQuery } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Show All Sensors';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart,\n    selectorID,\n    allowMultiple,\n    seriesLabel,\n    onSeriesSelection,\n    displayChip = true\n  } = props;\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  // When parent/props change, reconcile selections:\n  // - If the incoming item has an explicit `selected` boolean, prefer it (parent-controlled change).\n  // - Otherwise preserve the previous selection for matching labels.\n  useEffect(() => {\n    setItems(prevItems => {\n      const prevMap = new Map(prevItems.map(i => [i.label, i.selected]));\n      return itemsFromChart.map(newIt => {\n        const incomingHasSelected = typeof newIt.selected === 'boolean';\n        if (incomingHasSelected) {\n          // Prefer parent's selection (keeps component in sync when parent updates selection)\n          return { ...newIt };\n        } else {\n          // No explicit selected flag from parent — preserve previous selection if available\n          return { ...newIt, selected: prevMap.has(newIt.label) ? prevMap.get(newIt.label) : !!newIt.selected };\n        }\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [itemsFromChart])\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection({ newDataColumns: updatedItems });\n  };\n\n  const renderedLabel = (selected) => {\n    const returnNumSeriesDisplayed = () => {\n      return `${selected.length}/${items.length} ${seriesLabel || \"\"} shown`;\n    };\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {/* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? returnNumSeriesDisplayed() : selected}\n        </Typography>\n      </Stack>\n    );\n  };\n\n  return (\n    <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n      {\n        isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Show/Hide</Typography> : null\n      }\n\n      <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n        <FormControl\n          sx={{\n            width: \"100%\",\n            minWidth: '10rem',\n            '& .MuiInputBase-root': { borderRadius: `${theme.shape.borderRadius}px` }\n          }}\n          size=\"small\"\n        >\n          <Select\n            labelId={`${selectorID}-label`}\n            id={selectorID}\n            multiple={allowMultiple}\n            value={items.filter(item => item.selected).map(item => item.label)}\n            onChange={handleChange}\n            MenuProps={MenuProps}\n            renderValue={(selected) => renderedLabel(selected)}\n            sx={{\n              fontSize: '0.75em',\n              '& .MuiSelect-select': { py: \"6.5px\" },\n              '& .MuiSvgIcon-root': { color: 'text.secondary' }\n            }}\n          >\n            {/* Display all available items, together with checkbox for each item to select from */}\n            {items.map((item) => (\n              <MenuItem\n                disabled={\n                  // If there is only 1 selected item and this is the selected item\n                  // Then, prevent user from de-select this item too\n                  // To ensure at least there is 1 selected item at all times\n                  (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n                }\n                key={item.label}\n                value={item.label}\n                sx={{\n                  backgroundColor: 'unset !important',\n                  \"&:hover\": {\n                    backgroundColor: 'inherit !important',\n                  }\n                }}\n              >\n                { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n                {allowMultiple ? <Checkbox\n                  checked={item.selected}\n                  onClick={() => handleItemToggle(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                  : <Radio\n                    checked={item.selected}\n                    onChange={() => handleChange(item)}\n\n                    sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                }\n                <Typography variant='caption'>{item.label}</Typography>\n              </MenuItem>\n            ))}\n\n            {/* Show the option to select all if multiSelect is true*/}\n            {allowMultiple ?\n              (\n                <MenuItem\n                  key={SELECT_ALL}\n                  value={SELECT_ALL}\n                  sx={{\n                    borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n                    position: 'sticky', bottom: 0, zIndex: 1, marginBottom: theme.spacing(-1),\n                    background: theme.palette.customAlternateBackground,\n                    \"&:hover\": {\n                      background: theme.palette.customAlternateBackground\n                    }\n                  }}\n                >\n                  <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n                    <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n                    <Switch\n                      checked={selectAll}\n                      onClick={() => handleItemToggle(SELECT_ALL)}\n                      sx={{ transform: 'scale(0.8)' }}\n                    />\n                  </Stack>\n                </MenuItem>\n              ) : null\n            }\n          </Select>\n        </FormControl>\n\n        {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n        {(displayChip && allowMultiple) && <Grid container spacing={1}\n          sx={{\n            [theme.breakpoints.down('sm')]: {\n              display: 'none'\n            },\n          }}\n        >\n          {items.filter(item => item.selected).map((item) => (\n            <Grid item key={item.label}>\n              <Chip\n                label={<Typography variant='caption'>{item.label}</Typography>}\n                size=\"small\"\n                {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n              />\n            </Grid>\n          ))}\n        </Grid>}\n      </Stack>\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex]?.options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: chartData.options?.backgroundColor?.fill || 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '80%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '80%'),\n      top: !isPortrait && 20\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n      max: options.vAxis?.viewWindow?.max ?? null,\n      max: options.vAxis?.viewWindow?.max ?? null,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break\n      // If not any of the above, then the colorAxis should be from the chart (aqi/temperature/humidity...)\n      default:\n        try {\n          options.colorAxis = theme.palette.chart.colorAxes[options.colorAxis.colors]\n        } catch {\n          options.colorAxis = []\n        }\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  if (isPortrait && chartData?.chartType === \"LineChart\") {\n    options.pointSize = 0;\n  }\n\n  return options;\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        hAxis: {\n          ...mainChartOptions.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) },\n          title: null\n        },\n        vAxis: {\n          ...mainChartOptions.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n        pointSize: 0\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { isValidArray } from \"../UtilFunctions\";\n\nconst normalizeColorStopOffsets = ({ offsets, minOffset, maxOffset }) => {\n  return offsets.map(offset => (offset - minOffset) / (maxOffset - minOffset));\n}\n\nconst normalizeColorStops = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  if (!isValidArray(colors)) return [\n    { color: \"#fff\", offset: 0 },\n    { color: \"#fff\", offset: 1 }\n  ];\n\n  // No offsets provided, generate equally spaced offsets\n  if (typeof colors[0] === 'string') {\n    const totalColors = colors.length;\n    return colors.map((color, index) => ({\n      color: color,\n      offset: index / (totalColors - 1)\n    }));\n  }\n  // Offsets are provided, normalize them\n  else {\n    let clampedStops = colors;\n    if (optionalMinValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset >= optionalMinValue);\n    }\n    if (optionalMaxValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset <= optionalMaxValue);\n    }\n    const offsets = clampedStops.map(colorStop => colorStop.offset);\n\n    const minOffset = optionalMinValue || Math.min(...offsets);\n    const maxOffset = optionalMaxValue || Math.max(...offsets);\n\n    const normalizedOffsets = normalizeColorStopOffsets({ offsets, minOffset, maxOffset });\n\n    return clampedStops.map((colorStop, index) => ({\n      color: colorStop.color,\n      offset: normalizedOffsets[index]\n    }));\n  }\n}\n\n// Function to return an array of STEPS discrete colors in a gradient from an array of starting colors\n// Used for NivoCalendarChart\nfunction hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n    : [null, null, null];\n}\nfunction rgbToHex(r, g, b) {\n  return \"#\" + [r, g, b].map(x => {\n    const hex = x.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  }).join('');\n}\nfunction interpolateColor(color1, color2, factor) {\n  // Return immediately if the 2 colors are the same\n  if (color1.every((element, index) => element === color2[index])) return color1;\n\n  // Else, calculate the middle of the 2 colors\n  let result = color1.slice();\n  for (let i = 0; i < 3; i++) {\n    result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n  }\n  return result;\n}\nexport const generateDiscreteColorGradientArray = ({ colors, numSteps = 100 }) => {\n  const normalizedColors = normalizeColorStops({ colors });\n  normalizedColors.forEach((colorStop) => {\n    colorStop.color = hexToRgb(colorStop.color)\n  });\n\n  let colorArray = [];\n  const stepPositions = Array.from({ length: numSteps }, (_, i) => i / (numSteps - 1));\n\n  for (let i = 0; i < stepPositions.length; i++) {\n    const pos = stepPositions[i];\n    let color1, color2, offset1, offset2;\n\n    for (let j = 0; j < normalizedColors.length - 1; j++) {\n      if (pos >= normalizedColors[j].offset && pos <= normalizedColors[j + 1].offset) {\n        color1 = normalizedColors[j].color;\n        color2 = normalizedColors[j + 1].color;\n        offset1 = normalizedColors[j].offset;\n        offset2 = normalizedColors[j + 1].offset;\n        break;\n      }\n    }\n\n    const localFactor = (pos - offset1) / (offset2 - offset1);\n    const interpolatedColor = interpolateColor(color1, color2, localFactor);\n    colorArray.push(rgbToHex(...interpolatedColor));\n  }\n\n  return colorArray;\n};\n\n// Function to return CSS background from an array of colors (with or without offsets)\nexport const generateCssBackgroundGradient = ({ gradientDirection, colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return `linear-gradient(${gradientDirection}, ${normalizedColors.map(colorStop => `${colorStop.color} ${colorStop.offset * 100}%`).join(', ')})`;\n}\n\nexport const generateSvgFillGradient = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return normalizedColors.map(colorStop => ({\n    color: colorStop.color,\n    offset: colorStop.offset * 100 + '%'\n  }));\n};\n\n// Gradient for background of the Google Charts\nexport const BackgroundGradient = ({ id, colors }) => (\n  <svg width={0} height={0} visibility=\"hidden\">\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n        {colors.map((colorStop, index) => (\n          <stop key={index} offset={colorStop.offset} stopColor={colorStop.color} />\n        ))}\n      </linearGradient>\n    </defs>\n  </svg>\n);","import { useTheme } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport { generateCssBackgroundGradient } from '../../../../Utils/Gradient/GradientUtils';\n\nconst ValueRangeBox = ({ title, valueRange, colorAxis, isPortrait }) => {\n  const theme = useTheme();\n\n  if (valueRange?.min === null || valueRange?.max === null) return null;\n\n  const { colors, minValue, maxValue } = colorAxis;\n  let rangeBoxMinValue = minValue, rangeBoxMaxValue = maxValue;\n\n  if (minValue === undefined) rangeBoxMinValue = valueRange.min;\n  if (maxValue === undefined) rangeBoxMaxValue = valueRange.max;\n\n  if (valueRange.min < rangeBoxMinValue) rangeBoxMinValue = valueRange.min;\n  if (valueRange.max > rangeBoxMaxValue) rangeBoxMaxValue = valueRange.max;\n\n  const calculateMarkerPositionOnRangeBox = (value) => {\n    const position = ((value - rangeBoxMinValue) / (rangeBoxMaxValue - rangeBoxMinValue)) * 100;\n    return `${position}%`;\n  };\n\n  const labelStyle = {\n    position: 'absolute',\n    fontSize: '0.75rem',\n    color: theme.palette.text.secondary,\n    lineHeight: 1,\n    textAlign: 'center',\n    transform: 'translateX(-50%)',\n    minWidth: '75px',\n    whiteSpace: 'nowrap',\n  };\n  const topLabelStyle = {\n    top: '-1.5rem',\n    transform: 'translateX(-50%)'\n  };\n  const bottomLabelStyle = {\n    bottom: '-1.25rem',\n    transform: isPortrait ? 'translateX(-100%)' : 'translateX(-50%)'\n  };\n\n  const triangleStyle = {\n    position: 'absolute',\n    width: 0,\n    height: 0,\n    borderLeft: '0.25rem solid transparent',\n    borderRight: '0.25rem solid transparent',\n    transform: 'translateX(-50%)',\n  };\n  const topTriangleStyle = {\n    top: '-0.5rem',\n    borderTop: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n  const bottomTriangleStyle = {\n    bottom: '-0.5rem',\n    borderBottom: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n\n  return (\n    <Box sx={{\n      position: 'sticky',\n      width: 'fit-content',\n      my: 4,\n      float: 'right',\n      right: (isPortrait ? '0' : '50px')\n    }}>\n      <Typography sx={{\n        display: 'inline',\n        position: 'absolute',\n        textAlign: 'right',\n        transform: 'translateX(calc(-100% - 0.5rem))',\n        fontSize: '0.75rem',\n        lineHeight: 1.25,\n        fontWeight: 500,\n        color: 'text.secondary'\n      }}>\n        {title}\n      </Typography>\n      <Box sx={{\n        background: generateCssBackgroundGradient({ gradientDirection: 'to right', colors: colors, optionalMaxValue: rangeBoxMaxValue }),\n        color: theme.palette.text.secondary,\n        border: `1px solid ${theme.palette.text.secondary}`,\n        width: isPortrait ? '250px' : '300px',\n        height: '1rem',\n        position: 'relative',\n        justifyContent: 'space-between',\n      }}>\n        <span style={{ ...labelStyle, ...topLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}>min: {Math.round(valueRange.min)}</span>\n        <span style={{ ...labelStyle, ...bottomLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}>max: {Math.round(valueRange.max)}</span>\n        <div style={{ ...triangleStyle, ...topTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}></div>\n        <div style={{ ...triangleStyle, ...bottomTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}></div>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ValueRangeBox;","import { useEffect, useRef } from 'react';\nimport { Box, Chip } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../../../Utils/UtilFunctions';\n\nconst TooltipCalendarChart = ({ day, color, tooltipText, dateRange, inFirstTwoRowsOfChart }) => {\n  const tooltipBoxRef = useRef(null);\n\n  // If the cell hovered over is in the first two rows of the chart,\n  // move the tooltip to the bottom of the chart\n  // Read subsequent comments to understand why we need to do this\n  useEffect(() => {\n    if (tooltipBoxRef.current && inFirstTwoRowsOfChart(day, dateRange)) {\n      const parentDiv = tooltipBoxRef.current.parentElement;\n      if (parentDiv) {\n        parentDiv.style.top = '11vh';\n      }\n    }\n  }, [tooltipBoxRef, inFirstTwoRowsOfChart]);\n\n\n  // Note that our Box is just a container 'inside' the tooltip\n  // The tooltip itself is actually the Box's parent div\n  return (\n    <Box ref={tooltipBoxRef} className='nivo-tooltip'>\n      <Chip sx={{ backgroundColor: color, mr: 0.5, height: '10px', width: '10px', borderRadius: '50%' }} />\n      {parse(tooltipText, { replace: replacePlainHTMLWithMuiComponents })}\n    </Box>\n  );\n};\n\nexport default TooltipCalendarChart;","\nexport const getDateRangeForCalendarChart = (dateStrings) => {\n  return {\n    min: dateStrings.reduce((min, current) => (current < min ? current : min)),\n    max: dateStrings.reduce((max, current) => (current > max ? current : max))\n  }\n};\n\nexport const getValueRangeForCalendarChart = (values) => {\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\nexport const getCalendarChartMargin = (isPortrait) => {\n  return isPortrait\n    ? { top: 30, right: 0, bottom: 20, left: 20 }\n    : { top: 30, right: 40, bottom: 20, left: 40 };\n};\n\nexport const calculateValueRange = (data) => {\n  const values = data.map((item) => item.value);\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\n","/* eslint-disable */\nimport { ResponsiveCalendar } from '@nivo/calendar';\nimport { useTheme } from '@mui/material/styles';\nimport { generateDiscreteColorGradientArray } from '../../../../Utils/Gradient/GradientUtils';\n\nimport ValueRangeBox from './ValueRangeBox';\nimport TooltipCalendarChart from './TooltipCalendarChart';\nimport { getCalendarChartMargin, getDateRangeForCalendarChart, getValueRangeForCalendarChart } from '../NivoChartHelper';\nimport { useEffect, useState } from 'react';\nimport { isValidArray } from '../../../../Utils/UtilFunctions';\nimport GoogleChartStyleWrapper from '../../SubchartUtils/GoogleChartStyleWrapper';\nimport { Box } from '@mui/material';\n\nconst YEAR_SPACING = 40;\n\nconst NivoCalendarChart = (props) => {\n    const { dataArray, valueRangeBoxTitle, isPortrait, options, windowSize } = props;\n\n    const [dateRange, setDateRange] = useState({ min: null, max: null });\n    const [valueRange, setValueRange] = useState({ min: null, max: null });\n    const [calendarHeight, setCalendarHeight] = useState(400);\n\n    useEffect(() => {\n        if (!isValidArray(dataArray)) return;\n\n        const dateStrings = dataArray.map(item => item.day);\n        const thisDateRange = getDateRangeForCalendarChart(dateStrings)\n        setDateRange(thisDateRange);\n\n        const values = dataArray.map(item => item.value);\n        setValueRange(getValueRangeForCalendarChart(values));\n\n        // Get the number of years we have data for and the number of years to display\n        const lastYear = new Date(thisDateRange.max).getFullYear();\n        const firstYear = new Date(thisDateRange.min).getFullYear();\n        const numberOfYears = lastYear - firstYear + 1;\n        const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n        const cellSize = Math.min(windowSize[0] / 60, 20); // windowSize[0]: innerWidth\n        // max cell size of 20\n        const yearHeight = cellSize * 7; // Height for one year\n        const totalHeight = numberOfYears * (yearHeight + YEAR_SPACING) + calendarChartMargin.top + calendarChartMargin.bottom;\n        setCalendarHeight(totalHeight);\n    }, [dataArray, windowSize]);\n\n    const displayLegend = options?.legend?.position && options.legend.position !== \"none\";\n\n    const calendarChartMargin = getCalendarChartMargin(isPortrait, displayLegend);\n\n    const theme = useTheme();\n\n    // Function to extract tooltip text from HTML tooltip\n    const extractTooltipText = (tooltip) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(tooltip, 'text/html');\n        return doc.body.innerHTML;\n    };\n\n    // Function to check if a date is in the first two rows of the chart\n    // Used to anchor the tooltip to the bottom while hovering over\n    // the first two rows of the chart\n    const inFirstTwoRowsOfChart = (dateStr, dateRange) => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.getDay();\n\n        // Check if the date is Sunday (0) or Monday (1)\n        const isFirstTwoDaysOfWeek = dayOfWeek === 0 || dayOfWeek === 1;\n\n        // Extract the first year from the date range once\n        const firstYear = new Date(dateRange.min).getFullYear();\n\n        // Check if the date is in the first year of the date range\n        const isInFirstYear = date.getFullYear() === firstYear;\n\n        return isFirstTwoDaysOfWeek && isInFirstYear;\n    };\n\n    const calendarCellColors = generateDiscreteColorGradientArray({\n        colors: options?.colorAxis?.colors,\n        numSteps: options?.colorAxis?.gradientSteps\n    });\n\n    return (\n        <GoogleChartStyleWrapper\n            isPortrait={isPortrait}\n            className=\"Calendar\"\n            position=\"relative\"\n            minWidth=\"550px\"\n            height=\"100%\"\n        >\n            {displayLegend ? (\n                <ValueRangeBox\n                    title={valueRangeBoxTitle}\n                    valueRange={valueRange}\n                    colorAxis={options?.colorAxis}\n                    isPortrait={isPortrait}\n                />\n            ) : null}\n\n\n            <Box sx={{\n                height: `${calendarHeight}px`,\n                maxHeight: \"450px\",\n                overflowY: 'auto',\n                width: '100%',\n                position: 'relative'\n            }}>\n                <Box sx={{\n                    height: `${calendarHeight}px`,\n                    position: 'absolute',\n                    width: '100%'\n                }}>\n                    <ResponsiveCalendar\n                        data={dataArray}\n                        from={dateRange.min}\n                        to={dateRange.max}\n                        emptyColor=\"transparent\"\n                        align=\"top\"\n                        theme={{\n                            text: {\n                                fill: theme.palette.text.secondary,\n                            },\n                            fontSize: '0.75rem'\n                        }}\n                        colors={calendarCellColors}\n                        minValue={options?.colorAxis?.minValue}\n                        maxValue={options?.colorAxis?.maxValue}\n                        margin={calendarChartMargin}\n                        yearSpacing={YEAR_SPACING}\n                        monthBorderColor={theme.palette.text.primary}\n                        monthBorderWidth={1}\n                        daySpacing={0.25}\n                        dayBorderWidth={0}\n                        tooltip={({ day, value, color }) => {\n                            const tooltipData = dataArray.find(item => item.day === day);\n                            const tooltipText = tooltipData ? extractTooltipText(tooltipData.tooltip) : '';\n\n                            return (\n                                <TooltipCalendarChart\n                                    day={day}\n                                    color={color}\n                                    tooltipText={tooltipText}\n                                    dateRange={dateRange}\n                                    inFirstTwoRowsOfChart={inFirstTwoRowsOfChart}\n                                />\n                            );\n                        }}\n                    />\n                </Box>\n            </Box>\n\n        </GoogleChartStyleWrapper>\n    );\n};\n\nexport default NivoCalendarChart;\n\n","/* eslint-disable */\n\nimport { styled } from '@mui/material/styles';\nimport { Paper } from '@mui/material';\n\nimport { addDays, endOfDay, startOfDay, format, addHours } from \"date-fns\";\nimport AggregationType from './AggregationType';\n\nconst today = new Date();\n\nconst yesterday = {\n  label: \"Yesterday\",\n  range: () => ({\n    startDate: startOfDay(addHours(today, -48)),\n    endDate: today\n  })\n};\n\nconst last14Days = {\n  label: \"Last 14d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -14)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last30Days = {\n  label: \"Last 30d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -30)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last365Days = {\n  label: \"Last 365d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -365)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst allTime = ({ minDateOfDataset }) => {\n  const formattedMinDate = format(minDateOfDataset, \"MMM yyyy\");\n  return {\n    label: `All Time (${formattedMinDate} - Now)`,\n    range: () => ({\n      startDate: minDateOfDataset,\n      endDate: endOfDay(today)\n    })\n  }\n};\n\nexport const returnCustomStaticRanges = ({ minDateOfDataset, aggregationType }) => {\n  switch (aggregationType) {\n    case AggregationType.minute:\n      return [yesterday];\n    case AggregationType.day:\n      return [last30Days, last365Days];\n    case AggregationType.month:\n    case AggregationType.year:\n      return [allTime({ minDateOfDataset })];\n    default:\n      return [last14Days, last30Days];\n  }\n};\n\nexport const AggregationTypeMetadata = {\n  [AggregationType.minute]: {\n    maxDays: 2,\n    label: \"Real-time\"\n  },\n  [AggregationType.hour]: {\n    maxDays: 30,\n    label: \"Hourly\"\n  },\n  [AggregationType.day]: {\n    maxDays: 365,\n    label: \"Daily\"\n  },\n  [AggregationType.month]: {\n    maxDays: Infinity,\n    label: \"Monthly\"\n  },\n  [AggregationType.year]: {\n    maxDays: Infinity,\n    label: \"Yearly\"\n  }\n}\n\nexport const StyledDateRangePicker = styled(Paper, {\n  shouldForwardProp: (prop) => prop !== 'showPickerPanel' && prop !== 'smallScreen',\n})(({ theme, showPickerPanel, smallScreen }) => ({\n  zIndex: showPickerPanel === true && 1,\n  position: \"relative\",\n  padding: showPickerPanel ? theme.spacing(1) : 0,\n  margin: (showPickerPanel && !smallScreen) ? theme.spacing(-1) : 0,\n  maxWidth: '100%',\n  background: showPickerPanel ? theme.palette.customAlternateBackground : 'transparent',\n  boxShadow: showPickerPanel === false && 'none',\n  '& .rdrDateInput::before': {\n    display: \"none !important\"\n  },\n  '& .rdrDateInput': {\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: 'none',\n    padding: 0\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary\n  },\n  '& .rdrDateDisplayWrapper, .rdrCalendarWrapper, .rdrDefinedRangesWrapper, .rdrStaticRange, .rdrDateDisplayItem': {\n    background: 'transparent'\n  },\n  '& .rdrDateDisplayItemActive': {\n    border: showPickerPanel === false && 'none'\n  },\n  '& .rdrDateDisplay': {\n    margin: 0,\n    minWidth: \"10rem\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"2rem\"\n  },\n  '& .rdrDateDisplayItem': {\n    margin: 0,\n    borderRadius: showPickerPanel ? theme.shape.borderRadius : 0,\n    \"&:hover:not(.rdrDateDisplayItemActive)\": {\n      border: showPickerPanel ? `1px solid ${theme.palette.action.disabled}` : \"none\"\n    }\n  },\n  '& .rdrDateDisplayItem:hover:not(.rdrDateDisplayItemActive)': {\n    border: showPickerPanel === false && '1px solid transparent'\n  },\n  '& .rdrDateDisplayItem + .rdrDateDisplayItem': {\n    margin: 0\n  },\n  '& .rdrDateDisplayItem:first-of-type': {\n    borderRight: showPickerPanel === false && `1px solid ${theme.palette.action.disabled} !important`\n  },\n  '& .rdrMonthAndYearWrapper, .rdrInputRanges': {\n    display: showPickerPanel === false && 'none !important',\n    padding: 0\n  },\n  '& .rdrMonthName': {\n    display: 'none',\n  },\n  '& .rdrDefinedRangesWrapper, .rdrMonths': {\n    display: showPickerPanel === false && 'none'\n  },\n  '&  .rdrInfiniteMonths': {\n    visibility: showPickerPanel === false && 'hidden',\n    width: \"100% !important\",\n    maxWidth: \"675px\",\n    margin: \"auto\"\n  },\n  '& .rdrDateDisplayWrapper': {\n    minWidth: '9rem',\n    height: '2rem',\n    borderRadius: theme.shape.borderRadius,\n    border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.action.disabled}`,\n    \"&:hover\": {\n      border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.text.primary}`,\n    }\n  },\n  '& .rdrDateRangePickerWrapper': {\n    width: '100%',\n    flexDirection: 'column-reverse'\n  },\n  '& .rdrStaticRanges': {\n    flexDirection: 'row',\n    minWidth: '10.5rem'\n  },\n  '& .rdrStaticRangeLabel': {\n    color: theme.palette.text.secondary,\n    borderRadius: theme.shape.borderRadius,\n    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`\n  },\n  '& .rdrDefinedRangesWrapper': {\n    border: 'none',\n    width: '100%'\n  },\n  '& .rdrNextPrevButton': {\n    background: theme.palette.primary.main,\n    borderRadius: theme.shape.borderRadius,\n    opacity: 1,\n    '&:hover': {\n      opacity: 0.5,\n      background: theme.palette.primary.main\n    }\n  },\n  '& .rdrNextPrevButton > i': {\n    color: \"white\"\n  },\n  '& .rdrNextButton > i': {\n    borderColor: `transparent transparent transparent white`\n  },\n  '& .rdrPprevButton > i': {\n    borderColor: `transparent white transparent transparent`\n  },\n  '& .rdrStaticRange': {\n    border: 'none'\n  },\n  '& .rdrStaticRangeSelected > .rdrStaticRangeLabel, .rdrMonthAndYearPickers': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrMonthAndYearPickers': {\n    fontSize: '1rem'\n  },\n  '& .rdrStaticRange:hover .rdrStaticRangeLabel, .rdrStaticRange:focus .rdrStaticRangeLabel': {\n    background: theme.palette.customBackground.toString()\n  },\n  '& .rdrDayNumber span': {\n    color: theme.palette.text.primary.toString()\n  },\n  '& .rdrDayPassive .rdrDayNumber span': {\n    opacity: 0.5\n  },\n  '& .rdrMonthAndYearWrapper select': {\n    color: theme.palette.text.secondary.toString(),\n    background: 'none',\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette.text.secondary}`\n    }\n  },\n  '& .rdrDateDisplayItem input': {\n    color: theme.palette.text.secondary\n  },\n  '& .rdrDayDisabled': {\n    backgroundColor: theme.palette.customBackground\n  },\n  '& .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfMonth .rdrStartEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge, .rdrEndEdge, .rdrDayEndOfMonth .rdrDayInPreview, .rdrDayEndOfMonth .rdrDayStartPreview, .rdrDayEndOfWeek .rdrDayInPreview, .rdrDayEndOfWeek .rdrDayStartPreview, .rdrDayEndPreview': {\n    borderTopRightRadius: '2rem',\n    borderBottomRightRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfWeek .rdrEndEdge, .rdrDayStartOfMonth .rdrDayInPreview, .rdrDayStartOfMonth .rdrDayEndPreview, .rdrDayStartOfWeek .rdrDayInPreview, .rdrDayStartOfWeek .rdrDayEndPreview, .rdrDayStartPreview': {\n    borderTopLeftRadius: '2rem',\n    borderBottomLeftRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrEndEdge': {\n    left: 0\n  },\n  '& .rdrEndEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge': {\n    right: 0\n  },\n  '& .rdrSelected, .rdrInRange, .rdrStartEdge, .rdrEndEdge': {\n    top: '0px',\n    bottom: '0px',\n  },\n  '& .rdrMonths': {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  '& .rdrDay': {\n    marginBottom: \"1px\",\n    '& span': {\n      top: '0px',\n      bottom: '0px'\n    }\n  },\n  '& .rdrMonthsHorizontal': {\n    overflowY: 'hidden'\n  },\n  '& .rdrDateInput:first-of-type:before': {\n    content: '\"\"',\n    backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='MuiSvgIcon-root' focusable='false' aria-hidden='true' viewBox='0 0 24 24' data-testid='DateRangeIcon'%3E%3Cpath d='M9 11H7v2h2zm4 0h-2v2h2zm4 0h-2v2h2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V9h14z' fill='${theme.palette.text.secondary}'/%3E%3C/svg%3E\")`,\n    width: \"0.75rem\",\n    height: \"0.75rem\",\n    display: \"block\",\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    left: \"0.75rem\"\n  },\n  '& .rdrStaticRangeSelected span': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary.main,\n    width: \"0.25rem\",\n    height: \"0.25rem\",\n    borderRadius: \"50%\"\n  }\n}));\n\nexport const returnFormattedDates = ({ startDateObject, endDateObject }) => {\n  return {\n    startDate: format(startDateObject, 'yyyy-MM-dd'),\n    endDate: format(endDateObject, 'yyyy-MM-dd')\n  }\n}","import { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { useMediaQuery } from '@mui/material';\nimport { keyframes } from '@mui/system';\n\nimport AggregationType from './AggregationType';\nimport { AggregationTypeMetadata } from './DateRangePickerUtils';\nimport { useContext } from 'react';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { KAMPALA } from '../../Utils/GlobalVariables';\nimport { useTheme } from '@emotion/react';\nimport RadioButtonCheckedIcon from '@mui/icons-material/RadioButtonChecked';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\n\nconst pulse = keyframes`\n  0% { opacity: 1; }\n  50% { opacity: 0.6; }\n  100% { opacity: 1; }\n`;\n\nexport default function AggregationTypeToggle({ aggregationType, setAggregationType }) {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const theme = useTheme();\n\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n  const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  // Filter out AggregationType.minute if the school is Kampala\n  const aggregationTypesToShow = Object.values(AggregationType).filter(type => {\n    if (currentSchoolID === KAMPALA && type === AggregationType.minute) {\n      return false;\n    }\n    return true;\n  });\n\n  const handleChange = (_, newType) => {\n    if (newType !== null) {\n      setAggregationType(newType);\n    }\n  };\n\n\n  return (\n    <ToggleButtonGroup\n      fullWidth={extraSmallScreen}\n      color=\"primary\"\n      value={aggregationType}\n      exclusive\n      onChange={handleChange}\n      aria-label=\"aggregation type toggle for graph average\"\n      size=\"small\"\n      sx={{ height: \"100%\", [theme.breakpoints.down('sm')]: { width: '100%' } }}\n      orientation={isLargeScreen ? \"vertical\" : \"horizontal\"}\n    >\n      {Object.values(aggregationTypesToShow).map(type => (\n        <ToggleButton\n          key={type}\n          size=\"small\"\n          sx={{ textTransform: \"capitalize !important\", px: 1.25, py: 0.5, color: \"text.secondary\" }}\n          value={type}\n          aria-label={type}\n        >\n          {/* Show pulsing red icon if type === AggregationType.minute */}\n          {type === AggregationType.minute && (\n            <RadioButtonCheckedIcon\n              sx={{\n                ...(isLargeScreen ? {\n                  position: 'absolute',\n                  left: '50%',\n                  transform: 'translateX(calc(-50% - 2.5rem))',\n                } : {\n                  mr: 0.3,\n                }),\n                color: AQI_Database[3].color.Light,\n                fontSize: \"0.75rem\",\n                animation: `${pulse} 2s infinite ease-in-out`,\n              }}\n            />\n          )}\n\n          {AggregationTypeMetadata[type]?.label || \"\"}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  );\n}","import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getChartApiUrl } from '../API/ApiUrls';\n\nconst useChartData = (chartID) => {\n    const { allChartsConfigs, currentSchoolID } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartID];\n\n    return useQuery({\n        queryKey: ['chartData', chartID, chartConfig, currentSchoolID],\n        queryFn: async () => {\n            const url = getChartApiUrl({\n                endpoint: chartConfig.endpoint,\n                school_id: currentSchoolID,\n                queryParams: chartConfig.queryParams\n            });\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID && !!chartConfig?.endpoint, // only run when ready\n        staleTime: 1000 * 60 * 10, // 10-minute cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useChartData;\n","import { useState, useRef, useEffect, useContext } from 'react';\n\nimport { DateRangePicker, createStaticRanges } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport { Box, Grid, Stack, Typography, useMediaQuery, useTheme } from '@mui/material';\n\nimport { AggregationTypeMetadata, StyledDateRangePicker, returnCustomStaticRanges, returnFormattedDates } from './DateRangePickerUtils';\nimport AggregationTypeToggle from './AggregationTypeToggle';\nimport AggregationType from './AggregationType';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport { differenceInDays, isSameDay } from 'date-fns';\n\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport useChartData from '../../hooks/useChartData';\n\nconst CustomDateRangePicker = (props) => {\n  const { minDateOfDataset, chartIndex } = props;\n  const [isFirstRequest, setIsFirstRequest] = useState(true)\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { isFetching } = useChartData(chartIndex);\n\n  const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n  const chartConfig = allChartsConfigs[chartIndex] || {};\n  const queryParams = chartConfig.queryParams || {};\n\n  const [aggregationType, setAggregationType] = useState(queryParams.aggregationType || AggregationType.hour);\n  const [dateRange, setDateRange] = useState(() => {\n    const { startDate, endDate } = queryParams;\n    if (startDate && endDate) {\n      return {\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        key: 'selection',\n      };\n    }\n    // Default if not set\n    return {\n      startDate: null,\n      endDate: null,\n      key: 'selection',\n    };\n  });\n\n  const today = new Date();\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  // Set aggregationType\n  useEffect(() => {\n    // Initialize with the range of the first static range (default)\n    const defaultRange = {\n      ...returnCustomStaticRanges({\n        aggregationType: aggregationType || AggregationType.hour,\n        minDateOfDataset\n      })[0].range(), key: 'selection'\n    };\n    setDateRange(defaultRange);\n  }, [aggregationType]);\n\n  // Handle date range change → update DashboardContext queryParams\n  useEffect(() => {\n    // Early return if this is the first request (already fetched by useChartData hook)\n    if (isFirstRequest) {\n      setIsFirstRequest(false);\n      return;\n    }\n\n    const { startDate, endDate } = dateRange || {};\n    if (!startDate || !endDate) return;\n\n    // Start date and end date can't be the same date\n    if (isSameDay(startDate, endDate)) {\n      // No need to display error message as this is usually caused when only the start date is selected\n      return;\n    }\n\n    // Restrict the selection to only max days per aggregationType\n    const maxAllowedDays = AggregationTypeMetadata[aggregationType]?.maxDays;\n    if (differenceInDays(endDate, startDate) > maxAllowedDays) {\n      enqueueSnackbar(`${AggregationTypeMetadata[aggregationType].label} data is limited to maximum ${maxAllowedDays} day${maxAllowedDays > 1 ? \"s\" : \"\"}`, SnackbarMetadata.error);\n      return;\n    }\n\n    // Change the config\n    const formattedDates = returnFormattedDates({\n      startDateObject: startDate,\n      endDateObject: endDate\n    });\n    updateIndividualChartConfigQueryParams(chartIndex, {\n      aggregationType,\n      startDate: formattedDates.startDate,\n      endDate: formattedDates.endDate\n    });\n\n  }, [dateRange]);\n\n  // Control displaying / hiding of the date range picker\n  const [showPickerPanel, setShowPickerPanel] = useState(false);\n  const paperRef = useRef(null);\n\n  // Hide or show the date-range-picker panel on user's manual input\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (paperRef.current && !paperRef.current.contains(event.target)) {\n        setShowPickerPanel(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [paperRef]);\n\n  // Hide the panel on data fetching done\n  useEffect(() => {\n    if (!isFetching && showPickerPanel) {\n      setShowPickerPanel(false);\n    }\n  }, [isFetching]);\n\n  return (\n    <>\n      <Grid item alignItems={showPickerPanel ? \"start\" : \"stretch\"} xs sm=\"auto\" lg>\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Averaging Period</Typography> : null\n          }\n          <AggregationTypeToggle\n            aggregationType={aggregationType}\n            setAggregationType={setAggregationType}\n            smallScreen={smallScreen}\n          />\n        </Stack>\n      </Grid>\n\n      <Grid\n        item\n        sx={{\n          height: \"2rem\",\n          flex: 1,\n          [theme.breakpoints.up('lg')]: { minHeight: '4rem' }\n          // width: { [theme.breakpoints.down(\"sm\")]: { width: \"100%\" } },\n        }}\n      >\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5}>\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Date Range</Typography> : null\n          }\n          <StyledDateRangePicker\n            showPickerPanel={showPickerPanel}\n            smallScreen={smallScreen}\n            ref={paperRef}\n            elevation={8}\n            onClick={() => setShowPickerPanel(true)}\n            sx={{ position: \"relative\" }}\n          >\n\n            <Box\n              sx={{\n                transition: \"filter 0.2s ease-in-out\"\n              }}\n            >\n              <DateRangePicker\n                ranges={[dateRange]}\n                onChange={(ranges) => {\n                  if (!ranges) return;\n                  setDateRange(ranges.selection);\n                }}\n                staticRanges={createStaticRanges(\n                  returnCustomStaticRanges({ minDateOfDataset, aggregationType })\n                )}\n                inputRanges={[]}\n                rangeColors={[\n                  theme.palette.primary.main,\n                  theme.palette.secondary.main,\n                  theme.palette.text.secondary,\n                ]}\n                minDate={minDateOfDataset}\n                maxDate={today}\n                months={1}\n                showMonthAndYearPickers={true}\n                direction=\"vertical\"\n                fixedHeight={true}\n                preventSnapRefocus={true}\n                startDatePlaceholder=\"Start Date\"\n                endDatePlaceholder=\"End Date\"\n                editableDateInputs={true}\n                showMonthArrow={true}\n                weekStartsOn={1}\n              />\n            </Box>\n          </StyledDateRangePicker>\n        </Stack>\n      </Grid >\n\n    </>\n  );\n};\n\nexport default CustomDateRangePicker;\n","import { createContext, useMemo, useState, useContext } from 'react';\n\nconst AxesPickerContext = createContext();\n\nexport function AxesPickerProvider({ children }) {\n    const [hAxis, setHAxis] = useState();\n    const [vAxis, setVAxis] = useState();\n\n    const contextValue = useMemo(() => ({\n        hAxis, setHAxis,\n        vAxis, setVAxis\n    }), [hAxis, vAxis]);\n\n    return (\n        <AxesPickerContext.Provider value={contextValue}>\n            {children}\n        </AxesPickerContext.Provider>\n    );\n}\n\n// Custom hook \nexport const useAxesPicker = () => useContext(AxesPickerContext);","import { useContext, useEffect, useState } from 'react';\nimport { Select, MenuItem, FormControl, InputLabel, Button, Grid, CircularProgress, Stack, useMediaQuery, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useAxesPicker } from '../../ContextProviders/AxesPickerContext';\nimport { ChartAPIendpointsOrder } from \"../../API/Utils\";\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport useChartData from '../../hooks/useChartData';\n\nconst SELECT_MIN_WIDTH = \"150px\";\n\n// Define custom styled components for shared border radius\nconst LeftSelect = styled(FormControl)(({ theme }) => ({\n  textTransform: 'capitalize',\n  minWidth: SELECT_MIN_WIDTH,\n\n  // Only between sm–lg: stitched (merge right side)\n  [theme.breakpoints.between('sm', 'lg')]: {\n    '& .MuiOutlinedInput-root': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n    },\n    '& .MuiOutlinedInput-notchedOutline': {\n      borderRight: 'none',\n    },\n  },\n\n  // Focused border fix (optional highlight)\n  '& .Mui-focused .MuiOutlinedInput-notchedOutline': {\n    borderRight: `2px solid ${theme.palette.primary.main}`,\n  },\n}));\n\n\nconst RightSelect = styled(FormControl)(({ theme }) => ({\n  textTransform: 'capitalize',\n  minWidth: SELECT_MIN_WIDTH,\n\n  // Only between sm–lg: stitched (merge left side)\n  [theme.breakpoints.between('sm', 'lg')]: {\n    '& .MuiOutlinedInput-root': {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    },\n    '& .MuiOutlinedInput-notchedOutline': {\n      borderLeft: 'none',\n    },\n  },\n}));\n\n\n\nconst AxesPicker = (props) => {\n  const { currentSchoolID, setIndividualChartConfig } = useContext(DashboardContext);\n  const { chartID, allowedAxes, selectedAxes, dataType } = props;\n  const { hAxis, vAxis, setHAxis, setVAxis } = useAxesPicker();\n\n  const { isFetching } = useChartData(chartID);\n  const [shouldDisableApplyButton, setShouldDisableApplyButton] = useState(true);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes || {};\n\n    if (!(receivedHAxis && receivedVAxis)) {\n      setShouldDisableApplyButton(true);\n      return;\n    }\n\n    setHAxis(receivedHAxis);\n    setVAxis(receivedVAxis);\n  }, [selectedAxes, setHAxis, setVAxis]);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes;\n    if (!(receivedHAxis && receivedVAxis)) {\n      return;\n    };\n\n    setShouldDisableApplyButton(hAxis === receivedHAxis && vAxis === receivedVAxis);\n\n  }, [hAxis, vAxis, selectedAxes]);\n\n  const applyChanges = () => {\n    if (!(vAxis && hAxis)) return;\n\n    setIndividualChartConfig(chartID, {\n      endpoint: ChartAPIendpointsOrder[chartID],\n      school_id: currentSchoolID,\n      queryParams: {\n        dataType: dataType,\n        sensorX: hAxis,\n        sensorY: vAxis\n      }\n    });\n  }\n\n  // Disable option if the current dataType isn't in its allowedDataTypes array\n  const shouldDisableOption = (option) => {\n    return !option.allowedDataTypes.includes(dataType);\n  }\n\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  return (\n    <Stack direction=\"column\" alignItems=\"stretch\" gap={1.5} width=\"100%\">\n      {\n        isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Sensor Pair Selection</Typography> : null\n      }\n      <Grid container item rowGap={1.5} columnGap={1} alignItems=\"center\">\n        <Grid container item rowGap={1.5}>\n          <Grid item xs={12} sm=\"auto\" lg>\n            <LeftSelect fullWidth size=\"small\">\n              <InputLabel id=\"x-axis-select-label\">Horizontal Axis</InputLabel>\n              <Select\n                labelId=\"x-axis-select-label\"\n                value={hAxis || selectedAxes?.hAxis || null}\n                label=\"Horizontal Axis\"\n                onChange={(event) => {\n                  setHAxis(event.target.value)\n                }}\n                autoWidth\n              >\n                {allowedAxes?.map(option => (\n                  <MenuItem\n                    key={option.sensor}\n                    value={option.sensor}\n                    disabled={option.sensor === vAxis || shouldDisableOption(option)}\n                    sx={{ textTransform: 'capitalize' }}\n                  >\n                    {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                  </MenuItem>\n                ))}\n              </Select>\n            </LeftSelect>\n          </Grid>\n          <Grid item xs={12} sm=\"auto\" lg>\n            <RightSelect fullWidth size=\"small\">\n              <InputLabel id=\"y-axis-select-label\">Vertical Axis</InputLabel>\n              <Select\n                labelId=\"y-axis-select-label\"\n                value={vAxis || selectedAxes?.vAxis || null}\n                label=\"Vertical Axis\"\n                onChange={(event) => {\n                  setVAxis(event.target.value)\n                }}\n                autoWidth\n              >\n                {allowedAxes?.map(option => (\n                  <MenuItem\n                    key={option.sensor}\n                    value={option.sensor}\n                    disabled={option.sensor === hAxis || shouldDisableOption(option)}\n                    sx={{ textTransform: 'capitalize' }}\n                  >\n                    {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                  </MenuItem>\n                ))}\n              </Select>\n            </RightSelect>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12} sm=\"auto\" lg>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            sx={{ height: \"100%\" }}\n            onClick={applyChanges}\n            disabled={shouldDisableApplyButton || isFetching}\n          >\n            APPLY\n          </Button>\n        </Grid>\n      </Grid>\n    </Stack>\n  );\n};\n\nexport default AxesPicker;\n","import { Alert, Box } from \"@mui/material\";\n\nconst NoChartToRender = ({ customMessage, dataType, height, selectableAxes }) => {\n    let messagePrefix = \"This sensor \";\n    let messageSuffix = \" data. Choose a different sensor or data type.\";\n\n    if (selectableAxes) {\n        messagePrefix = \"This pair of sensors \";\n        messageSuffix = \" correlation data. Choose another pair or a different data type.\"\n    }\n\n    return (\n        <Box height={height}>\n            <Alert severity=\"error\" sx={{ my: 2 }}>\n                {\n                    customMessage ? customMessage : (\n                        <>\n                            {messagePrefix}\n                            does not have&nbsp;\n                            <Box component=\"span\" textTransform=\"capitalize\">\n                                {dataType}\n                            </Box>\n                            {messageSuffix}\n                        </>\n                    )\n                }\n            </Alert>\n        </Box>\n    )\n}\n\nexport default NoChartToRender;","export const returnHoursFromMinutesPastMidnight = (minutes) => {\n  const hoursPastMidnight = Math.floor(minutes / 60);\n  return hoursPastMidnight.toString().padStart(2, '0') + ':00';\n};\n\nexport const HOURS = Array.from({ length: 24 }, (_, i) => {\n  const minutesPastMidnight = i * 60;\n  return {\n    label: returnHoursFromMinutesPastMidnight(minutesPastMidnight),\n    value: minutesPastMidnight\n  };\n});\n\nexport const PREDEFINED_TIMERANGES = {\n  allday: { id: \"allday\", label: \"All Day\", start: HOURS[0].value, end: HOURS[HOURS.length - 1].value, timeRangeLabel: \"0-23h\" },\n  schoolHour: { id: \"schoolHour\", label: \"School Hour\", start: HOURS[7].value, end: HOURS[17].value, timeRangeLabel: \"7-17h\" },\n  custom: { id: \"custom\", label: \"Custom\" }\n};\n\n\n\n","import { Box, FormControl, InputLabel, Select, MenuItem, Stack } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport { isValidArray } from '../../../../../Utils/UtilFunctions';\n\nexport const SimplePicker = (props) => {\n  const { icon, label, value, options, handleChange, disabled, isExtraSmall, ...otherProps } = props;\n  const theme = useTheme();\n\n  return (\n    <Stack\n      direction=\"row\"\n      gap={icon ? 1 : 0}\n      alignItems=\"center\"\n      {...otherProps}\n    >\n      <Box\n        aria-hidden={true}\n        sx={{\n          '& .MuiSvgIcon-root': {\n            color: disabled ? theme.palette.text.secondary : theme.palette.primary.main,\n            verticalAlign: \"middle\"\n          }\n        }}\n      >\n        {icon}\n      </Box>\n\n      <FormControl\n        fullWidth\n        size='small'\n        disabled={disabled}\n        sx={{\n          minWidth: \"5rem\",\n          marginLeft: \"0 !important\",\n          \"& .MuiInputBase-root\": {\n            [theme.breakpoints.down('sm')]: {\n              fontSize: isExtraSmall ?? \"0.75rem\"\n            }\n          }\n        }}\n      >\n        <InputLabel id={`${label}-picker-label`}>{label}</InputLabel>\n        <Select\n          labelId={`${label}-picker-label`}\n          id={`${label}-picker`}\n          value={value}\n          label={label}\n          onChange={handleChange}\n        >\n          {isValidArray(options) &&\n            options.map((option) => (\n              <MenuItem key={option.value} value={option.value} is>\n                {option.label}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n    </Stack >\n  );\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { Box, Stack, ToggleButtonGroup, ToggleButton, useMediaQuery, useTheme, Typography } from \"@mui/material\";\nimport WatchLaterIcon from '@mui/icons-material/WatchLater';\nimport { SimplePicker } from \"../AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker\";\nimport { HOURS } from \"./TimeRangeUtils\";\nimport { isValidArray } from \"../../Utils/UtilFunctions\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelector = (props) => {\n    const { timeRange, defaultTimeRange, disabled, handleChange, isResponsive = false, hasTitle = false } = props;\n\n    const theme = useTheme();\n    const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n    const [displayFromToPickers, setDisplayFromToPickers] = useState(false);\n\n    // Always normalize into a [string, string]\n    const [startTime, endTime] = isValidArray(timeRange) ? timeRange : defaultTimeRange;\n\n    const [predefinedRange, setPredefinedRange] = useState(() => {\n        // Sync initial toggle‑button state\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        return match ? match.id : PREDEFINED_TIMERANGES.custom.id;\n    });\n\n    // When `timeRange` actually changes, keep buttons in sync:\n    useEffect(() => {\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        setPredefinedRange(match ? match.id : PREDEFINED_TIMERANGES.custom.id);\n    }, [startTime, endTime]);\n\n    const handleModeChange = useCallback((_, newMode) => {\n        if (!newMode) return;\n        setPredefinedRange(newMode);\n        const range = PREDEFINED_TIMERANGES[newMode];\n        if (range.start != null && range.end != null) {\n            handleChange([range.start, range.end]);\n        }\n\n        // only display the hour pickers if custom time is used\n        setDisplayFromToPickers(newMode === PREDEFINED_TIMERANGES.custom.id);\n    }, [handleChange]);\n\n    // Add useMediaQuery to detect xs screens\n    const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n    return (\n        <Stack direction={hasTitle ? \"column\" : \"row\"} alignItems=\"start\" gap={0.5} width=\"100%\">\n            {\n                hasTitle ?\n                    (isLargeScreen && isResponsive ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Time Range</Typography> : null)\n                    : (\n                        <Box\n                            aria-hidden\n                            sx={{\n                                '& .MuiSvgIcon-root': {\n                                    color: disabled\n                                        ? theme.palette.text.secondary\n                                        : theme.palette.primary.main,\n                                    verticalAlign: \"-webkit-baseline-middle\"\n                                }\n                            }}\n                        >\n                            <WatchLaterIcon sx={{ mt: 0.75 }} />\n                        </Box>\n                    )\n            }\n\n            <Stack direction=\"column\" width=\"100%\" gap={1.5}>\n                <ToggleButtonGroup\n                    fullWidth={extraSmallScreen}\n                    color={disabled ? \"standard\" : \"primary\"}\n                    value={predefinedRange}\n                    exclusive\n                    onChange={handleModeChange}\n                    size=\"small\"\n                    disabled={disabled}\n                    orientation={isResponsive ?\n                        (isLargeScreen ? \"vertical\" : \"horizontal\") :\n                        \"horizontal\"\n                    }\n                >\n                    {Object.values(PREDEFINED_TIMERANGES).map((range, idx, arr) => (\n                        <ToggleButton\n                            key={range.id}\n                            value={range.id}\n                            aria-label={range.label}\n                            sx={{\n                                color: \"text.secondary\",\n                                textTransform: 'none',\n                                px: (idx === arr.length - 1) ? 2 : 1,\n                                py: 0.5,\n                                flex: (idx === arr.length - 1) ? 1 : undefined\n                            }}\n                            size=\"small\"\n                        >\n                            {range.label}\n                            {range.timeRangeLabel && (\n                                <>\n                                    &nbsp;({range.timeRangeLabel})\n                                </>\n                            )\n                            }\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n\n                {\n                    displayFromToPickers ? (\n                        <Stack direction=\"row\" flex={1} gap={1}>\n                            <SimplePicker\n                                label=\"From\"\n                                value={startTime}\n                                options={HOURS}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={(e) => {\n                                    // Set toValue to null if new startTime is larger than endTime's current value\n                                    if (e.target.value > endTime) {\n                                        handleChange([e.target.value, null]);\n                                    }\n                                    // Else, proceed with startTime\n                                    else {\n                                        handleChange([e.target.value, endTime])\n                                    }\n                                }}\n                                flex={1}\n                            />\n                            <SimplePicker\n                                label=\"To\"\n                                value={endTime}\n                                options={HOURS.filter(h => h.value > startTime)}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={e => handleChange([startTime, e.target.value])}\n                                flex={1}\n                            />\n                        </Stack>\n                    ) : null\n                }\n            </Stack>\n        </Stack>\n    );\n};\n\n\nexport default TimeRangeSelector;\n","import { useContext, useState } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport TimeRangeSelector from \"./TimeRangeSelector\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelectorWrapperForDataHook = (props) => {\n    const { defaultTimeRange, isResponsive, hasTitle, chartIndex } = props;\n\n    const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartIndex] || {};\n    const queryParams = chartConfig.queryParams || {};\n    const { startTime, endTime } = queryParams;\n\n    const [timeRange, setTimeRange] = useState([\n        startTime ?? defaultTimeRange.startTime,\n        endTime ?? defaultTimeRange.endTime,\n    ]);\n\n    return (\n        <TimeRangeSelector\n            timeRange={timeRange}\n            defaultTimeRange={defaultTimeRange}\n            handleChange={(newRange) => {\n                // Handle timeRange change → update DashboardContext queryParams\n                setTimeRange(newRange);\n\n                const [startTime, endTime] = newRange || [];\n                if (startTime === null || endTime === null || startTime > endTime) return;\n\n                // Change the config\n                if (startTime === PREDEFINED_TIMERANGES.allday.start && endTime === PREDEFINED_TIMERANGES.allday.end) {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime: null,\n                        endTime: null\n                    });\n                } else {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime,\n                        endTime\n                    });\n                }\n            }}\n            isResponsive={isResponsive}\n            hasTitle={hasTitle}\n        />\n    );\n}\n\nexport default TimeRangeSelectorWrapperForDataHook;","/* eslint-disable */\n\nimport { useContext, useEffect, useMemo, useState, useCallback } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Grid, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SubchartUtils/SeriesSelector';\nimport { generateRandomID, returnGenericOptions, returnChartControlUI, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './SubchartUtils/GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport NivoCalendarChart from './NivoCharts/NivoCalendarChart/NivoCalendarChart';\nimport { generateSvgFillGradient, BackgroundGradient } from '../../Utils/Gradient/GradientUtils';\n\nimport CustomDateRangePicker from '../../Components/DateRangePicker/CustomDateRangePicker'\nimport { isValidArray } from '../../Utils/UtilFunctions';\nimport { returnSelectedDataType } from '../../Utils/AirQuality/DataTypes';\n\nimport AxesPicker from '../../Components/AxesPicker/AxesPicker';\n\nimport NoChartToRender from './NoChartToRender';\nimport { PREDEFINED_TIMERANGES } from '../../Components/TimeRange/TimeRangeUtils';\nimport TimeRangeSelectorWrapperForDataHook from '../../Components/TimeRange/TimeRangeSelectorWrapperForDataHook';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, height, maxHeight, selectedDataType, allowedDataTypes } = props;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const google = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  const [previousChartData, setPreviousChartData] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // To determine if the charts should be rendered or not\n  const [shouldRenderChart, setShouldRenderChart] = useState(true);\n  const [renderChartNow, setRenderChartNow] = useState(false);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Get the options object for chart\n  const options = useMemo(() => {\n    return returnGenericOptions({ ...props, theme });\n  }, [props, theme, chartData.chartType]);\n\n  // State to store transformed data for CalendarChart\n  const [calendarDataArray, setCalendarDataArray] = useState(null);\n\n  // Early exit for 'Calendar' chartType\n  if (chartData.chartType === 'Calendar') {\n    useEffect(() => {\n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      if (!isValidArray(dataArray)) {\n        setShouldRenderChart(false);\n        return; // early return if there is no data to render\n      }\n\n      setCalendarDataArray(dataArray)\n      setShouldRenderChart(true);\n    }, [chartData]);\n\n    if (!calendarDataArray) {\n      return (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )\n    }\n\n    return (\n      shouldRenderChart ? (\n        <NivoCalendarChart\n          dataArray={calendarDataArray}\n          valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n          isPortrait={isPortrait}\n          options={options}\n          windowSize={windowSize}\n        />\n      ) : (\n        <>\n          <NoChartToRender dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })} />\n          <NivoCalendarChart\n            dataArray={[]}\n            valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n            isPortrait={isPortrait}\n            options={options}\n            windowSize={windowSize}\n          />\n        </>\n      )\n    );\n  }\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Properties for date-range-picker and time range selector\n  const dateRangePicker = options.dateRangePicker || null;\n  const timeRangeSelector = options.timeRangeSelector || null;\n\n  // Properties for data formatters\n  const formatters = options.formatters || null;\n\n  // Properties for selectableAxes\n  let selectableAxes = chartData.selectableAxes || null;\n  if (selectableAxes) {\n    if (isValidArray(selectableAxes.allowedAxes)) {\n      if (selectableAxes.allowedAxes.length <= 2) selectableAxes = null; // don't display selectableAxes if number of allowedSensors is less than 3\n    }\n  }\n\n  const hasAtLeastOneAuxillaryControl = seriesSelector || dateRangePicker || selectableAxes || timeRangeSelector;\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection({ newDataColumns: dataColumns }); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection({ newDataColumns: dataColumns });\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    const prevSelections = dataColumns?.map(c => ({ label: c.label, selected: c.selected })) || [];\n\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    let initialView = chartWrapper.getView();\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({ columns: viewFromDataTable.columns });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') {\n        col = {\n          role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n          sourceColumn: col,\n        };\n      }\n\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n      shouldAssignDomainRoleToFistColumn = false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // First, try to restore previous selection by label\n        const prev = prevSelections.find(p => p.label === col.label);\n        if (prev) {\n          col.selected = prev.selected;\n        } else {\n          // Else, fallback to default logic if new series or first load (if defaultSeriesToDisplayInitially is available)\n          if (seriesSelector.defaultSeriesToDisplayInitially) {\n            col.selected = seriesSelector.defaultSeriesToDisplayInitially.includes(index);\n          }\n          // Else of no defaultSeriesToDisplayInitially is presented, then, all data columns are selected if multiple series are selectable\n          else if (seriesSelector.allowMultiple) {\n            col.selected = true;\n          } else {\n            // Else, for single serie selector, only first data column is selected\n            col.selected = (dataSeriesIndex === 0);\n          }\n        }\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n\n      return col;\n    });\n\n    setAllInitialColumns(allInitialColumns);\n\n    const initialVAxisRange = getInitialVAxisRange({ dataTable, allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n\n    const dataCols = allInitialColumns.filter(col => col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false);\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataCols });\n\n    setDataColumns(dataCols);\n\n    return { initAllInitialColumns: allInitialColumns, initDataColumns: dataCols };\n  };\n\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = useCallback(({\n    newDataColumns,\n    _allInitialColumns = allInitialColumns,\n    _chartWrapper = chartWrapper,\n    _controlWrapper = controlWrapper\n  }) => {\n    if (!_allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              series: {\n                ...options.series,\n                ...hiddenSeriesObject\n              }\n            }\n          }\n        });\n      }\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          if (isValidArray(_allInitialColumns)) {\n            for (let i = dataColumn.indexIn_ + 1; i < _allInitialColumns.length; i++) {\n              if (_allInitialColumns[i].role !== 'data') {\n                newViewColumns.push(_allInitialColumns[i]);\n              }\n              // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n              else {\n                break;\n              }\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              colors: newOptions.colors,\n              series: newOptions.series\n            },\n            chartView: {\n              columns: newViewColumns\n            }\n          }\n        });\n      }\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      _controlWrapper?.draw();\n    }\n  }, [allInitialColumns, options, seriesSelector, chartWrapper, controlWrapper, initialVAxisRange, hasChartControl]);\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n  // Prepare to draw the chart if there is any change in chartData\n  // but only set flag renderChartNow if the chart should draw in the next rendering cycle\n  // to prevent chartID container not being mounted on time\n  useEffect(() => {\n    if (google && chartData) {\n      // Do not draw again if deep comparison between current chartData and previousChartData is true\n      if (JSON.stringify(chartData) === JSON.stringify(previousChartData)) return;\n      setPreviousChartData(chartData);\n\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      const _shouldRenderChart = isValidArray(dataArray);\n      setShouldRenderChart(_shouldRenderChart);\n      if (_shouldRenderChart === true) {\n        setRenderChartNow(true);\n        const dataTable = google.visualization.arrayToDataTable(dataArray);\n\n        // Call functions for formatting the number if numberFormat/dateFormat is specified \n        if (formatters && typeof formatters === 'object') {\n          if (formatters.hasOwnProperty(\"numberFormatter\")) {\n            const numberFormat = new google.visualization.NumberFormat(formatters.numberFormatter.numberFormat);\n            formatters.numberFormatter.columns.forEach(col => numberFormat.format(dataTable, col));\n          }\n        }\n        setDataTable(dataTable);\n      }\n    }\n  }, [google, chartData]);\n\n  // Actually draw the chart now because chartID container is already mounted from shouldRenderChart flag\n  useEffect(() => {\n    if (renderChartNow === true) {\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? dataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      let thisControlWrapper;\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `${chartControl.controlType === \"CategoryFilter\" ? \"CategoryFilter\" : \"other-chart-control\"}-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(dataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const { initAllInitialColumns, initDataColumns } = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: dataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection({\n          _allInitialColumns: initAllInitialColumns,\n          newDataColumns: initDataColumns,\n          _chartWrapper: thisChartWrapper,\n          _controlWrapper: thisControlWrapper\n        });\n      }\n\n      setRenderChartNow(false);\n    }\n  }, [renderChartNow])\n\n  const renderChart = () => {\n    return (\n      <Grid id={`dashboard-${chartID}`} container alignItems=\"start\">\n        {hasAtLeastOneAuxillaryControl && (\n          <Grid lg={2} container item\n            sx={{\n              mt: 1,\n              ml: 2,\n              gap: 2,\n              [theme.breakpoints.down('lg')]: { gap: 1, ml: 0 }\n            }}\n          >\n            {\n              isFirstRender === false && (\n                <>\n                  {seriesSelector &&\n                    <Grid item xs=\"auto\" lg={12}\n                      sx={{\n                        [theme.breakpoints.down('sm')]: { width: '100%' }\n                      }}\n                    >\n                      <SeriesSelector\n                        items={dataColumns}\n                        allowMultiple={seriesSelector.allowMultiple}\n                        seriesLabel={seriesSelector.seriesLabel}\n                        selectorID={`${chartData.title}-selector`}\n                        onSeriesSelection={handleSeriesSelection}\n                        displayChip={false}\n                      />\n                    </Grid>\n                  }\n\n                  {\n                    dateRangePicker &&\n                    <CustomDateRangePicker\n                      minDateOfDataset={new Date(dateRangePicker.minDate)}\n                      chartIndex={chartData.id}\n                    />\n                  }\n\n                  {selectableAxes &&\n                    <AxesPicker\n                      chartID={chartData.id}\n                      allowedAxes={selectableAxes.allowedAxes}\n                      selectedAxes={selectableAxes.selectedAxes}\n                      dataType={selectedDataType}\n                    />\n                  }\n\n                  {\n                    timeRangeSelector &&\n                    <Grid item xs=\"auto\" lg={12}\n                      sx={{\n                        [theme.breakpoints.down('sm')]: { width: '100%' }\n                      }}\n                    >\n                      <TimeRangeSelectorWrapperForDataHook\n                        defaultTimeRange={[PREDEFINED_TIMERANGES.allday.start, PREDEFINED_TIMERANGES.allday.end]}\n                        handleChange={() => {\n                          return null;\n                        }}\n                        isResponsive\n                        hasTitle\n                        chartIndex={chartData.id}\n                      />\n                    </Grid>\n                  }\n                </>\n              )\n            }\n\n            <Grid item xs=\"auto\" lg={12}\n              sx={{\n                [theme.breakpoints.down('sm')]: { width: '100%' }\n              }}\n            >\n              {/* Special div for CategoryFilter to align its position with other auxillary controls */}\n              <Box\n                id={`CategoryFilter-${chartID}`} sx={{\n                  display: hasChartControl && chartControl.controlType === 'CategoryFilter' ? \"block\" : \"none\"\n                }} />\n            </Grid>\n          </Grid>\n        )}\n\n        <Grid item xs>\n          <Stack>\n            <Box\n              id={chartID}\n              sx={{ height: height, maxHeight: maxHeight }}\n            />\n\n            {/* Div for all other types of chart control */}\n            <Box\n              id={`other-chart-control-${chartID}`}\n              sx={{\n                display: (hasChartControl && chartControl.controlType !== 'CategoryFilter') ? \"block\" : \"none\",\n                height: `calc(${height} / 8)`,\n                filter: 'saturate(0.3)',\n                opacity: 0.7\n              }}\n            />\n          </Stack>\n        </Grid>\n      </Grid>\n    )\n  };\n\n  // Generate the gradient background if it exists in options parameter\n  const gradientBackgroundColor = options.gradientBackgroundColor;\n  let gradientBackgroundId, svgFillGradient;\n  if (gradientBackgroundColor) {\n    gradientBackgroundId = `${chartID}-backgroundGradient`;\n    svgFillGradient = generateSvgFillGradient({\n      colors: theme.palette.chart.colorAxes[gradientBackgroundColor].colors,\n      optionalMinValue: options.vAxis?.viewWindow?.min,\n      optionalMaxValue: options.vAxis?.viewWindow?.max\n    });\n  }\n\n  const onChartReady = () => {\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  const showAuxiliaryControls = () => {\n    if (!isFirstRender) {\n      return (\n        <>\n\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    shouldRenderChart ?\n      (\n        <GoogleChartStyleWrapper\n          isPortrait={isPortrait}\n          gradientBackgroundId={gradientBackgroundId}\n          className={chartData.chartType}\n          position=\"relative\"\n          height=\"100%\"\n          minHeight={chartData.chartType === 'Calendar' && '200px'}\n        >\n          {/* Conditionally display loading animation here */}\n          {isFirstRender && (\n            <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n              <LoadingAnimation />\n            </Box>\n          )}\n          {renderChart()}\n          {gradientBackgroundColor ? <BackgroundGradient id={gradientBackgroundId} colors={svgFillGradient} /> : null}\n        </GoogleChartStyleWrapper>\n      ) :\n      (\n        <NoChartToRender\n          dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })}\n          selectableAxes={selectableAxes}\n          // If the visualization has a series selector or control, we need to account for its height\n          // And since the height is a string, we need to parse it to a number before adding to it\n          height={seriesSelector || hasChartControl ? (parseFloat(height) * 1.2 + 'vw') : height}\n\n        />\n      )\n  );\n}","import { useState, useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport parse from 'html-react-parser';\nimport { useMediaQuery, useTheme } from '@mui/material';\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/UtilFunctions';\n\nfunction CollapsibleSubtitle({ text, wordLimit = 40, reference }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const subtitleRef = useRef(null);\n\n  const words = text.split(' ');\n\n  // If not on mobile or words are within limit, just display the full text\n  if (!isMobile || words.length / wordLimit <= 1.4) {\n    return (\n      <Box>\n        <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n        {reference && (\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {parse(reference, { replace: replacePlainHTMLWithMuiComponents })}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  let displayText = words.slice(0, wordLimit).join(' ');\n  const lastFullStop = displayText.lastIndexOf('.');\n\n  if (lastFullStop !== -1) {\n    displayText = displayText.slice(0, lastFullStop + 1);\n  }\n\n  // Do not collapse if the user clicks on the chart associated with the subtitle\n  const isClickWithinSharedParent = (event) => {\n    let { target } = event;\n    // .MuiContainer-root - Container for both the subtitle and the chart\n    const subtitleParent = subtitleRef.current.closest('.MuiContainer-root');\n    // Elements used to detect if the click is on a chart\n    const chartElements = new Set(['rect', 'path', 'svg', 'circle']);\n\n    while (target != null) {\n      // Check if a chart is clicked\n      if (chartElements.has(target?.tagName)) {\n        // If the chart element and the subtitle element share the same container\n        // it means that the click is on the chart associated with the subtitle\n        // As such, we should not collapse the subtitle\n        const targetParent = target.closest('.MuiContainer-root');\n        return targetParent === subtitleParent;\n      }\n      target = target.parentNode; // Move up the DOM tree\n    }\n    return false;\n  };\n\n  // Custom onClickAway handler\n  const handleOnClickAway = (event) => {\n    if (!isClickWithinSharedParent(event)) {\n      setIsExpanded(false);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleOnClickAway}>\n      <Box ref={subtitleRef} onClick={() => setIsExpanded(!isExpanded)} style={{ cursor: 'pointer' }}>\n        {isExpanded ? (\n          <>\n            <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n            {reference && <Typography variant=\"caption\" color=\"text.secondary\">{parse(reference, { replace: replacePlainHTMLWithMuiComponents })}</Typography>}\n          </>\n        ) : (\n          <>\n            <Typography display=\"inline\">\n              {parse(displayText, { replace: replacePlainHTMLWithMuiComponents })}\n              ...\n            </Typography>\n            <Typography display=\"inline\" color=\"text.primary\" fontWeight=\"500\" sx={{ ml: 0.5, '& :hover': { textDecoration: 'underline' } }}>\n              See more\n            </Typography>\n          </>\n        )}\n      </Box>\n    </ClickAwayListener>\n  );\n}\n\nexport default CollapsibleSubtitle;\n","import { useContext, useState } from \"react\";\nimport { Button, Menu, MenuItem, Typography } from \"@mui/material\";\nimport { isValidArray } from \"../Utils/UtilFunctions\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { returnSelectedDataType } from \"../Utils/AirQuality/DataTypes\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst DataTypeDropDownMenu = ({ selectedDataType, dataTypes, chartID }) => {\n  const { updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  if (!isValidArray(dataTypes)) return null;\n\n  // If there is only 1 dataType, display it as a string of text\n  if (dataTypes.length <= 1) {\n    return (\n      <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n        {dataTypes[0].name_title}\n      </Typography>\n    )\n  }\n\n  // If there are more than 1 dataTypes to choose from, display a popup dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuItemClick = (dataType) => {\n    updateIndividualChartConfigQueryParams(chartID, { dataType })\n    handleClose();\n  };\n\n  return (\n    <>\n      <Button\n        id=\"data-type-drop-down-menu-button\"\n        aria-controls={open ? 'data-type-drop-down-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n        variant=\"text\"\n        size=\"small\"\n        sx={{\n          p: 0,\n          minWidth: 'unset',\n          borderRadius: 0,\n          verticalAlign: 'top',\n          textTransform: 'unset'\n        }}\n      >\n        <Typography display=\"inline\" variant=\"h6\" borderBottom=\"dotted\">\n          {returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: dataTypes, showUnit: true })}\n        </Typography>\n        <ArrowDropDownIcon />\n      </Button>\n      <Menu\n        id=\"data-type-drop-down-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'data-type-drop-down-menu-button',\n        }}\n      >\n\n        {dataTypes.map((dataType, index) => (\n          <MenuItem\n            key={index}\n            sx={{ fontSize: '0.8rem' }}\n            onClick={() => handleMenuItemClick(dataType.key)}\n          >\n            {dataType.name_title}\n          </MenuItem>\n        ))}\n\n      </Menu>\n    </>\n  );\n};\n\nexport default DataTypeDropDownMenu;","import { styled } from '@mui/material/styles';\nimport { Tabs } from '@mui/material/';\n\nexport const StyledTabs = styled(Tabs, {\n  shouldForwardProp: (prop) => prop !== 'smallFontSize',\n})(({ theme, smallFontSize = '0.625rem' }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: smallFontSize,\n      padding: theme.spacing(0.5)\n    },\n  },\n  '& .MuiSvgIcon-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: \"1rem\"\n    }\n  }\n}));\n\nexport default StyledTabs;","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tab, useMediaQuery, Typography, Menu, MenuItem, Stack } from '@mui/material/';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nimport SubChart from './Subchart/SubChart';\n\nimport CollapsibleSubtitle from '../Components/CollapsibleSubtitle';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DataTypeDropDownMenu from './DataTypeDropDown';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport StyledTabs from '../Components/StyledTabs';\nimport NoChartToRender from './Subchart/NoChartToRender';\nimport useChartData from '../hooks/useChartData';\nimport LoadingAnimation from '../Components/LoadingAnimation';\n\nconst DEBOUNCE_IN_MILLISECONDS = 100;\n\nconst MAX_NUM_TABS_TO_DISPLAY = 3;\nconst INITIAL_DROPDOWN_MENU_TAB_INDEX = -1;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledMenuItem = styled(MenuItem)(({ theme }) => ({\n  '& .MuiBox-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem'\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponentWrapper({ chartID }) {\n  const { data: chartData, isLoading, isFetching, error } = useChartData(chartID);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  // Props for tab panels (multiple data visualizations in the same chart area, navigate with tab panels)\n  const [currentTab, setCurrentTab] = useState(0); // start with the first tab\n  const [previousTab, setPreviousTab] = useState(0); // keep tracking of previous tab to keep displaying it if the currentTab = initialDropdownMenuTabIndex (selecting the dropdown menu tab)\n  const [dropdownMenuTabIndex, setDropdownMenuTabIndex] = useState(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n  const [dropdownMenuCurrentTitle, setDropdownMenuCurrentTitle] = useState();\n  const [anchorEl, setAnchorEl] = useState(null); // Define anchorEl state for dropdown menu of the tabs\n\n  // Props for dataType management\n  const [allowedDataTypes, setAllowedDataTypes] = useState([]);\n  const [selectedDataType, setSelectedDataType] = useState(null);\n\n  const initializeAllowedDataTypes = (chartData, setAllowedDataTypes, setSelectedDataType) => {\n    if (!chartData?.allowedDataTypes) return;\n\n    const dataTypesArr = chartData.allowedDataTypes.map((dataType) => {\n      const { name_title, name_short, unit } = DataTypes[dataType];\n      return {\n        key: dataType,\n        name_title,\n        name_short,\n        unit,\n      };\n    });\n\n    setAllowedDataTypes(dataTypesArr);\n    setSelectedDataType(chartData.selectedDataType);\n  };\n\n  const setupResizeListener = (setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS) => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      timeoutID = setTimeout(() => {\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  };\n\n  useEffect(() => {\n    if (!chartData) return;\n\n    // Initialize allowed data types\n    initializeAllowedDataTypes(chartData, setAllowedDataTypes, setSelectedDataType);\n\n    // Setup resize listener\n    const cleanupResize = setupResizeListener(setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS);\n\n    // Cleanup listener on unmount\n    return cleanupResize;\n  }, [chartData]);\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  // set tab back to 0 if school is changed\n  useEffect(() => {\n    setPreviousTab(currentTab);\n    setCurrentTab(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentSchoolID]);\n\n  let chartHeight, chartMaxHeight;\n  if (chartData?.chartType !== 'Calendar') {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '450px';\n  }\n\n  // Function to render only one chart (no subchart --> no tab control)\n  const renderOnlyOneChart = () => {\n    if (!isValidArray(chartData.dataArray)) {\n      return <NoChartToRender customMessage={\"Not enough historical data to display this chart\"} />\n    }\n    return (\n      <SubChart\n        selectedDataType={selectedDataType}\n        allowedDataTypes={allowedDataTypes}\n        chartData={chartData}\n        isPortrait={isPortrait}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n      />\n    );\n  }\n\n  // Function to render multiple subcharts with tab control\n  const renderMultipleSubcharts = () => {\n    // Handle tab change\n    const handleTabChange = (__, newIndex) => {\n      setPreviousTab(currentTab);\n      setCurrentTab(newIndex);\n\n      if (needsDropdownMenu && newIndex < MAX_NUM_TABS_TO_DISPLAY && newIndex !== dropdownMenuTabIndex) {\n        setDropdownMenuCurrentTitle();\n        setDropdownMenuTabIndex(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n      }\n    };\n\n    // Determine if dropdown menu is needed\n    const needsDropdownMenu = chartData.subcharts.length > MAX_NUM_TABS_TO_DISPLAY + 1; // maxTabsToDisplay = 3 by default, but here +1 for some leeway, some schools have 4 sensors which is still okay. But if > 4, then only display max 3\n\n    const subchartsDataForTabs = needsDropdownMenu ? chartData.subcharts.slice(0, MAX_NUM_TABS_TO_DISPLAY) : chartData.subcharts;\n    const subchartsDataForDropDownMenu = needsDropdownMenu ? chartData.subcharts.slice(MAX_NUM_TABS_TO_DISPLAY) : null;\n\n    // Function to handle selection from dropdown menu\n    const handleDropdownMenuSelection = (index) => {\n      setPreviousTab(currentTab);\n\n      // Because the original chartData.subcharts array was split in subchartsDataForTabs (length maxTabsToDisplay) and subchartsDataForDropDownMenu (the remaining item), the selected subcharts index is the sum of the length of subchartsDataForTabs array and the index of the selected item from subchartsDataForDropDownMenu\n      setCurrentTab(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Same index with the one above to keep the dropdown menu tab highlighted  \n      setDropdownMenuTabIndex(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Set title of the selected item in the dropdown menu to display it\n      setDropdownMenuCurrentTitle(subchartsDataForDropDownMenu[index].subchartTitleShort);\n\n      // Close the dropdown menu after selection\n      setAnchorEl(null);\n    };\n\n    const getOtherLocationsLabel = () => {\n      return (\n        <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          <Box flex={1}>\n            Other sensors\n            {\n              dropdownMenuCurrentTitle && ` (${dropdownMenuCurrentTitle})`\n            }\n            &nbsp;\n          </Box>\n          < ExpandMoreIcon />\n        </Stack>\n      )\n    }\n\n    const shouldDisplayThisSubchart = (index) => {\n      if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n        return previousTab === index;\n      } else {\n        return currentTab === index;\n      }\n    }\n\n    return (\n      <>\n        <StyledTabs\n          value={currentTab}\n          onChange={handleTabChange}\n          variant={isSmallWidth ? 'fullWidth' : 'standard'}\n        >\n          {subchartsDataForTabs.map((_, index) => (\n            <Tab\n              key={index}\n              value={index}\n              label={chartData.subcharts[index].subchartTitle}\n              sx={{\n                // If this subchart doesn't have a valid dataArray to render chart\n                // Make the Tab's text line-through to let user know\n                textDecoration: !isValidArray(chartData.subcharts[index].dataArray) && 'line-through'\n              }}\n            />\n          ))}\n          {/* Render dropdown menu if needed */}\n          {needsDropdownMenu && (\n            <Tab\n              value={dropdownMenuTabIndex}\n              label={getOtherLocationsLabel()}\n              aria-controls=\"submenu\"\n              aria-haspopup=\"true\"\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n            />\n          )}\n        </StyledTabs>\n        {\n          needsDropdownMenu && <Menu\n            id=\"submenu\"\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={() => {\n              // Reset currentTab to the previous valid tab if the user opened the menu (clicked on the drop down menu tab, if shown), but didn't select any menu item\n              if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n                setPreviousTab(currentTab);\n                setCurrentTab(previousTab);\n              };\n\n              // Close the menu\n              setAnchorEl(null);\n            }}\n          >\n            {/* Render remaining subchart selector in the dropdown menu */}\n            {subchartsDataForDropDownMenu.map((_, index) => (\n              <StyledMenuItem\n                key={index}\n                selected={index === currentTab - MAX_NUM_TABS_TO_DISPLAY}\n                onClick={() => handleDropdownMenuSelection(index)}\n                sx={{\n                  // If this subchart doesn't have a valid dataArray to render chart\n                  // Make the Tab's text line-through to let user know\n                  textDecoration: !isValidArray(chartData.subcharts[index + MAX_NUM_TABS_TO_DISPLAY].dataArray) && 'line-through'\n                }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  <Box>\n                    {subchartsDataForDropDownMenu[index].subchartTitle}\n                  </Box>\n                  {\n                    (index === currentTab - MAX_NUM_TABS_TO_DISPLAY) &&\n                    <VisibilityIcon fontSize=\"1rem\" sx={{ color: 'text.secondary' }} />\n                  }\n                </Stack>\n              </StyledMenuItem>\n            ))}\n          </Menu>\n        }\n\n        <Box\n          position=\"relative\"\n          sx={{\n            overflowX: isPortrait && 'auto',\n            WebkitOverflowScrolling: isPortrait && 'touch',\n            overflowY: 'hidden',\n          }}\n        >\n\n          {chartData.subcharts.map((__, index) => (\n            <Box\n              key={index}\n              width=\"100%\"\n              height=\"100%\"\n              role=\"tabpanel\"\n              sx={{\n                transition: '0.35s',\n                position: (index === 0) ? '' : 'absolute',\n                opacity: shouldDisplayThisSubchart(index) ? '1' : '0',\n                pointerEvents: shouldDisplayThisSubchart(index) ? 'auto' : 'none',\n                top: (index === 0) ? '' : 0,\n                overflowX: 'auto',\n                overflowY: 'hidden',\n              }}\n            >\n              <SubChart\n                selectedDataType={selectedDataType}\n                allowedDataTypes={allowedDataTypes}\n                chartData={chartData}\n                subchartIndex={index}\n                isPortrait={isPortrait}\n                windowSize={windowSize}\n                height={chartData.height ? chartData.height : chartHeight}\n                maxHeight={\n                  ['Calendar'].includes(chartData.chartType)\n                    ? ''\n                    : chartMaxHeight\n                }\n                currentSubchart={currentTab}\n              />\n            </Box>\n          ))}\n        </Box>\n      </>\n    )\n  };\n\n  // Function to render remaining subtitles and references for chart with multiple subcharts\n  const getSubtitles = () => {\n    let text = chartData.subtitle || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.subchartSubtitle) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].subchartSubtitle;\n    }\n    return text;\n  }\n  const getReferences = () => {\n    let text = chartData.reference || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.reference) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].reference;\n    }\n    return text;\n  }\n\n  if (!chartData) return;\n\n  if (isLoading) return <LoadingAnimation optionalText={`Loading chart ${chartID + 1}...`} />;\n  if (error) return <NoChartToRender customMessage={`Error loading chart ${chartID + 1}, please try later`} />\n\n  return (\n    <Box\n      position=\"relative\"\n    >\n      <Box>\n        <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n          {chartID + 1}. {chartData.title}\n          &nbsp;\n        </Typography>\n        <Box display=\"inline\">\n          <DataTypeDropDownMenu\n            selectedDataType={selectedDataType}\n            dataTypes={allowedDataTypes}\n            chartID={chartID}\n          />\n        </Box>\n      </Box>\n\n      <ChartStyleWrapper height=\"100%\" sx={{\n        filter: isFetching ? 'blur(1px)' : 'none',\n        transition: 'filter 0.2s',\n        pointerEvents: isFetching ? \"none\" : \"auto\",\n      }}>\n        {isValidArray(chartData.subcharts) ? renderMultipleSubcharts() : renderOnlyOneChart()}\n\n        {/* Render subtitle and reference below */}\n        <Box sx={{ my: 3 }}>\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mb: 1 }}\n          >\n            <CollapsibleSubtitle\n              text={getSubtitles()}\n              reference={getReferences()}\n            />\n          </Typography>\n        </Box>\n      </ChartStyleWrapper>\n\n      {isFetching && (\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(255,255,255,0.3)',\n            zIndex: 10,\n          }}\n        >\n          <LoadingAnimation />\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default ChartComponentWrapper;\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from '../SpeedDial/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport AirQualityIndexTable from './AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable tiny hideAQIDescription />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useContext, useCallback } from \"react\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\n\nconst useLoginHandler = (openLoginPopup) => {\n    const { authenticationState, user } = useContext(UserContext);\n    const loggedIn = authenticationState.authenticated && authenticationState.checkedAuthentication;\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleRestrictedAccess = useCallback(\n        (action) => {\n            if (!loggedIn) {\n                openLoginPopup?.();\n                return false;\n            } else {\n                if (user?.allowedSchools.some(school => school.school_id === currentSchoolID)) {\n                    action?.();\n                    return true;\n                } else {\n                    enqueueSnackbar(`Your account does not have access to ${currentSchoolID.toUpperCase()} Alerts`, SnackbarMetadata.error);\n                    return false;\n                }\n            }\n        },\n        [loggedIn, openLoginPopup, currentSchoolID, user, enqueueSnackbar]\n    );\n\n    return {\n        loggedIn,\n        handleRestrictedAccess,\n    };\n};\n\nexport default useLoginHandler;\n","import { useState, useContext } from \"react\";\nimport { Button, Menu, MenuItem } from \"@mui/material\";\nimport TvIcon from \"@mui/icons-material/Tv\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\nimport { isValidArray } from \"../../../Utils/UtilFunctions\";\nimport useLoginHandler from \"../../Account/useLoginHandler\";\nimport useSchoolMetadata from \"../../../hooks/useSchoolMetadata\";\n\nconst ScreenDropDownMenu = ({ onButtonClick }) => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const navigate = useNavigate();\n\n  if (!schoolMetadata) return null;\n\n  const screens = schoolMetadata.screens;\n\n  if (!isValidArray(screens)) return null;\n\n  const handleSingleScreenClick = () => {\n    handleRestrictedAccess(() => {\n      const screen_name = screens && screens[0]?.screen_name;\n      if (screen_name === \"screen\") navigate(`/screen/${currentSchoolID}`);\n      else navigate(`/screen/${currentSchoolID}/${screen_name}`);\n    });\n  };\n\n  // If there is only 1 screen, show a single button\n  if (screens.length <= 1) {\n    return (\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        onClick={handleSingleScreenClick}\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />&nbsp;TV Screen\n      </Button>\n    );\n  }\n\n  // If there are multiple screens, show a dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleMenuItemClick = (screenName) => {\n    handleRestrictedAccess(() => {\n      setAnchorEl(null);\n      navigate(`/screen/${currentSchoolID}/${screenName}`);\n    });\n  };\n\n  const handleMenuOpen = (event) => {\n    handleRestrictedAccess(() => setAnchorEl(event.currentTarget));\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Button\n        id=\"basic-button\"\n        aria-controls={open ? \"tv-screen-list-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleMenuOpen}\n        variant=\"contained\"\n        size=\"small\"\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />\n        &nbsp;\n        TV Screens\n      </Button>\n      <Menu\n        id=\"tv-screen-list-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleMenuClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        {screens.map((screen, index) => (\n          <MenuItem\n            key={index}\n            onClick={() => handleMenuItemClick(screen.screen_name)}\n            sx={{ fontSize: \"0.8rem\" }}\n          >\n            {screen.location_long}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default ScreenDropDownMenu;\n","import { useState, useContext } from 'react';\nimport { Chip, Tooltip, IconButton, Dialog, Button, DialogActions, DialogTitle, DialogContent, useMediaQuery } from '@mui/material';\nimport * as Tracking from '../../Utils/Tracking';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { useTheme } from '@mui/material';\n\nconst CustomDialog = (props) => {\n  const {\n    buttonIcon,\n    buttonIconAria,\n    buttonLabel,\n    buttonVariant = 'contained',\n    trackingEvent,\n    dialogTitle,\n    dialogOpenHandler = null,\n    dialogCloseHandler = null,\n    displaySchoolID = true,\n    maxWidth = \"lg\",\n    children,\n    disabled\n  } = props;\n\n  let iconOnly;\n  if (buttonIcon && !buttonLabel) iconOnly = true;\n  else iconOnly = false;\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    if (dialogOpenHandler) {\n      dialogOpenHandler(() => {\n        setOpen(true); // Only opens if dialogOpenHandler allows it\n        if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n      });\n    } else {\n      setOpen(true);\n      if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n    }\n  };\n\n  const onClose = () => {\n    setOpen(false);\n    if (dialogCloseHandler) dialogCloseHandler();\n  };\n\n  const theme = useTheme();\n\n  const displayButton = () => {\n    if (iconOnly) return (\n      <Tooltip title={buttonIconAria}>\n        <IconButton\n          onClick={onOpen}\n          aria-label={buttonIconAria}\n          size=\"small\"\n          sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n          disabled={disabled}\n        >\n          {buttonIcon}\n        </IconButton>\n      </Tooltip>\n    );\n\n    else return (\n      <Button\n        onClick={onOpen}\n        variant={buttonVariant}\n        disabled={disabled}\n        size=\"small\"\n      >\n        {buttonIcon}&nbsp;{buttonLabel}\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {displayButton()}\n\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth={maxWidth}\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        <DialogActions sx={{ justifyContent: \"start\" }}>\n          <Button onClick={onClose}>\n            <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n          </Button>\n        </DialogActions>\n\n        <DialogTitle>\n          {displaySchoolID === true ?\n            (<>\n              <Chip\n                label={currentSchoolID ? `School: ${currentSchoolID.toUpperCase()}` : \"No School\"}\n                size=\"small\"\n                display=\"block\"\n                sx={{ mb: 1 }}\n              />\n              <br />\n            </>\n            ) : null}\n\n          {dialogTitle}\n        </DialogTitle>\n\n        <DialogContent>\n          {children}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CustomDialog;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Button, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from '../../API/ApiFetch';\nimport { SupportedFetchExtensions } from \"../../API/Utils\";\nimport { getRawDatasetUrl } from '../../API/ApiUrls';\nimport LoadingAnimation from '../LoadingAnimation';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport CustomDialog from '../CustomDialog/CustomDialog';\nimport { CITIESair } from '../../Utils/GlobalVariables';\nimport useLoginHandler from '../Account/useLoginHandler';\nimport AggregationType from '../DateRangePicker/AggregationType';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\n\nexport default function DatasetDownloadDialog({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n\n  const [sensorsDatasets, updateSensorsDatasets] = useState({});\n\n  const [previewingDataset, setPreviewingDataset] = useState(\"placeholder\");\n\n  // Construct the structure of sensorsDatasets based on current data\n  useEffect(() => {\n    if (!currentSensorsData) return;\n\n    const sensorsDatasets = currentSensorsData\n      .filter(item => item && item.sensor)  // Filter out null or undefined items and sensors\n      .reduce((acc, item) => {\n        // Use location_short as the key for each sensor\n        const key = item.sensor.location_short;\n        acc[key] = {\n          location_type: item.sensor.location_type,\n          location_short: item.sensor.location_short,\n          location_long: item.sensor.location_long,\n          last_seen: item.sensor.last_seen?.split('T')[0],\n          rawDatasets: Object.keys(AggregationType).reverse().reduce((datasetAcc, datasetKey) => {\n            datasetAcc[AggregationType[datasetKey]] = {\n              sample: null,\n              full: null\n            };\n            return datasetAcc;\n          }, {})\n        };\n        return acc;\n      }, {});\n\n    updateSensorsDatasets(sensorsDatasets);\n  }, [currentSensorsData]);\n\n  return (\n    <CustomDialog\n      buttonIcon={<DataObjectIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Dataset\"\n      trackingEvent={Tracking.Events.rawDatasetButtonClicked}\n      dialogTitle=\"Preview and download raw dataset(s)\"\n      dialogOpenHandler={((action) => {\n        setPreviewingDataset(null);\n        handleRestrictedAccess(action);\n      })}\n    >\n      <DatasetSelectorAndPreviewer\n        sensorsDatasets={sensorsDatasets}\n        updateSensorsDatasets={updateSensorsDatasets}\n        previewingDataset={previewingDataset}\n        setPreviewingDataset={setPreviewingDataset}\n        schoolID={currentSchoolID}\n      />\n      {\n        sensorsDatasets &&\n        <Typography variant=\"caption\" sx={{ my: 2, fontStyle: 'italic', display: \"block\" }} >\n          These datasets are provided by {CITIESair} from sensors operated by {CITIESair}. Should you intend to utilize them for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n        </Typography>\n      }\n    </CustomDialog>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, setPreviewingDataset, schoolID } = props;\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Preview the hourly type of the first sensor initially\n  useEffect(() => {\n    if (Object.keys(sensorsDatasets).length > 0 && !previewingDataset) {\n      const firstSensor = Object.keys(sensorsDatasets)[0];\n      const initialDatasetType = AggregationType.hour;\n\n      setPreviewingDataset({\n        sensor: firstSensor,\n        datasetType: initialDatasetType\n      });\n\n      // If this dataset has been fetched before, early return\n      if (sensorsDatasets[firstSensor].rawDatasets[initialDatasetType].sample) return;\n\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: firstSensor,\n        aggregationType: initialDatasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[firstSensor].rawDatasets[initialDatasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [sensorsDatasets, previewingDataset]);\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"start\"\n      spacing={smallScreen ? 1 : 2}\n      sx={{ mt: 0, overflowY: 'scroll', overflowX: 'hidden' }}\n    >\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          schoolID={schoolID}\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          previewingDataset={previewingDataset}\n          schoolID={schoolID}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { schoolID, sensorsDatasets, smallScreen, previewingDataset, setPreviewingDataset, updateSensorsDatasets } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed'\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Sensor Location\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>\n            Average Period\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sensorsDatasets && Object.keys(sensorsDatasets).map((location_short) => (\n          <Dataset\n            key={location_short}\n            schoolID={schoolID}\n            smallScreen={smallScreen}\n            sensor={location_short}\n            sensorsDatasets={sensorsDatasets}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={location_short === previewingDataset?.sensor}\n            updateSensorsDatasets={updateSensorsDatasets}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { schoolID, sensorsDatasets, sensor, previewingDataset, setPreviewingDataset, isPreviewing, updateSensorsDatasets } = props;\n\n  const [selectedDatasetType, setSelectedDatasetType] = useState(AggregationType.hour);\n\n  useEffect(() => {\n    if (selectedDatasetType !== AggregationType.hour) setSelectedDatasetType(AggregationType.hour);\n  }, [schoolID])\n\n  const handleDatasetTypeChange = (event) => {\n    const selectedVal = event.target.value;\n    setSelectedDatasetType(selectedVal);\n    setPreviewingDataset({ datasetType: selectedVal, sensor });\n    fetchThisDataset(selectedVal);\n  };\n\n  const fetchThisDataset = (datasetType) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!sensorsDatasets[sensor].rawDatasets[datasetType].sample) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: sensorsDatasets[sensor].location_short,\n        aggregationType: datasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[sensor].rawDatasets[datasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        });\n    }\n  }\n\n  const setThisSensorToPreview = () => {\n    if (previewingDataset?.sensor !== sensor) {\n      setPreviewingDataset({\n        datasetType: selectedDatasetType,\n        sensor: sensor\n      });\n      fetchThisDataset(selectedDatasetType);\n    }\n  }\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <TableRow key={sensor}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisSensorToPreview}>\n          {sensorsDatasets[sensor].location_long}\n        </TableCell>\n\n        <TableCell\n          sx={{\n            position: 'relative',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}>\n          <FormControl size=\"small\">\n            <Select\n              value={selectedDatasetType}\n              onChange={handleDatasetTypeChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {Object.keys(sensorsDatasets[sensor].rawDatasets).reverse().map((datasetType, index) => (\n                <MenuItem\n                  key={index}\n                  value={datasetType}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {datasetType.charAt(0).toUpperCase() + datasetType.slice(1).toLowerCase()}\n                  </Stack>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, schoolID, smallScreen } = props;\n  const theme = useTheme();\n\n  const [previewingDatasetName, setPreviewingDatasetName] = useState(\"Not previewing any dataset\");\n  const [csvFileName, setCsvFileName] = useState(\"No dataset\");\n  const [isDatasetLoading, setIsDatasetLoading] = useState(false);\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset) return;\n\n    const fetchedDataset = sensorsDatasets[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full;\n\n    // Fetch the full dataset if it has not been fetched before\n    if (!fetchedDataset) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: previewingDataset.sensor,\n        aggregationType: previewingDataset.datasetType,\n        isSample: false\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true }).then((data) => {\n        const tmp = { ...sensorsDatasets };\n        tmp[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full = data;\n        updateSensorsDatasets(tmp);\n\n        convertCSVforDownload(data);\n      });\n    }\n    else {\n      convertCSVforDownload(fetchedDataset);\n    }\n\n  };\n\n  const convertCSVforDownload = (dataset) => {\n    const blob = new Blob([dataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = csvFileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  }\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowNumber, setRowNumber] = useState('');\n\n  useEffect(() => {\n    // If no dataset is chosen to be previewed, early return\n    if (!previewingDataset) return;\n\n    // Update previewing dataset name regardless if the dataset preview has finished loading\n    setPreviewingDatasetName(`Previewing: ${previewingDataset.sensor} (${previewingDataset.datasetType})`);\n\n    // Get the raw dataset\n    const csvData = sensorsDatasets[previewingDataset.sensor]?.rawDatasets[previewingDataset.datasetType]?.sample;\n\n    // If it is empty, then it hasn't been loaded yet\n    if (!csvData) {\n      setRowNumber(null);\n      setFormattedData(null);\n      setCsvFileName(\"Loading...\");\n      setIsDatasetLoading(true);\n      return;\n    };\n\n    if (isDatasetLoading) setIsDatasetLoading(false);\n\n    const lines = csvData.split('\\n');\n\n    const headers = lines[0].split(',');\n    const rows = lines.slice(1);\n\n    setRowNumber([\n      \"\",\n      ...rows.map(row => row.split(',')[0])\n    ].join('\\n'));\n\n    setFormattedData([\n      headers.slice(1).join(','), // Keep the headers for the rest of the columns\n      ...rows.map(row => row.split(',').slice(1).join(',')) // Remove the first column from each row\n    ].join('\\n'));\n\n    // Get the second column of the last row and extract the date part to set the csv's file name\n    let dateString;\n    if (rows.length > 0) {\n      const lastRow = rows[rows.length - 1];\n      const columns = lastRow.split(',');\n      if (columns.length >= 2) {\n        const dateTimeString = columns[1]; // Get the second column\n        dateString = dateTimeString.split('T')[0]; // Extract the date part\n      }\n    }\n\n    const csvFileName = `${schoolID}-${previewingDataset.sensor}-${previewingDataset.datasetType}-${dateString}.csv`;\n    setCsvFileName(csvFileName);\n  }, [previewingDataset, sensorsDatasets]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDatasetName}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: 1,\n            height: smallScreen ? '11.8rem' : '14rem',\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack\n            direction=\"row\"\n            sx={{ fontSize: '0.75rem' }}\n          >\n            {\n              formattedData ?\n                <>\n                  <Box sx={{ mr: 2, userSelect: 'none' }}>\n                    {rowNumber}\n                  </Box>\n                  <Box>\n                    {formattedData}\n                  </Box>\n                </>\n                :\n                <LoadingAnimation optionalText=\"Loading\" />\n            }\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              dataset_type: previewingDataset?.datasetType,\n              sensor: previewingDataset?.sensor\n            });\n          }}\n          disabled={isDatasetLoading}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {csvFileName}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","import { useContext, useEffect, useState } from 'react';\nimport { Box, TextField, Chip, Menu, MenuItem, Grid, Typography, Button, Stack, useMediaQuery, Alert, Tooltip, Link, CircularProgress } from '@mui/material';\nimport { fetchDataFromURL } from \"../../../API/ApiFetch\";\nimport { RESTmethods } from \"../../../API/Utils\";\nimport { getApiUrl } from '../../../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../../../API/Utils\";\nimport { DashboardContext } from '../../../ContextProviders/DashboardContext';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { validateEmail } from '../../../Utils/UtilFunctions';\nimport { useSnackbar } from 'notistack';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nconst compareArrays = (arr1, arr2) => {\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n}\n\nconst EmailsInput = () => {\n  const { enqueueSnackbar } = useSnackbar()\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: alertEmails = [] } = useQuery({\n    queryKey: ['alertEmails', currentSchoolID],\n    queryFn: async () => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        extension: 'json',\n        needsAuthorization: true\n      });\n    },\n    enabled: !!currentSchoolID,\n    staleTime: 0\n  });\n\n  const queryClient = useQueryClient();\n  const saveEmailsMutation = useMutation({\n    mutationFn: async (emailsToSave) => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        restMethod: RESTmethods.POST,\n        body: emailsToSave\n      });\n    },\n    onSuccess: (data) => {\n      // Update cache immediately so UI updates without refetch\n      queryClient.setQueryData(['alertEmails', currentSchoolID], data);\n      enqueueSnackbar('Email recipients saved successfully.', SnackbarMetadata.success);\n    },\n    onError: () => {\n      enqueueSnackbar('There was an error saving email recipients. Please try again.', SnackbarMetadata.error);\n    }\n  });\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [localEmails, setLocalEmails] = useState([]);\n  const [emailsListChanged, setEmailsListChanged] = useState(false);\n\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [menuAnchor, setMenuAnchor] = useState(null);\n\n  const [saveButtonTooltipTitle, setSaveButtonTooltipTitle] = useState('');\n\n  const maxEmails = 150;\n\n  useEffect(() => {\n    setLocalEmails(alertEmails);\n  }, [alertEmails]);\n\n  useEffect(() => {\n    setEmailsListChanged(!compareArrays(localEmails, alertEmails));\n  }, [localEmails]);\n\n  useEffect(() => {\n    setSaveButtonTooltipTitle(emailsListChanged ? \"Click to save new changes on server\" : \"No changes detected to save\");\n  }, [emailsListChanged]);\n\n  const handleAddEmail = (passedEmail) => {\n    const email = passedEmail.trim().toLowerCase();\n\n    // If email address follows email format\n    if (validateEmail(email)) {\n      const newEmails = [...localEmails, email];\n\n      // Make sure currentEmail hasn't been added before\n      if (localEmails.includes(email)) {\n        enqueueSnackbar(`Already added: ${email}`, SnackbarMetadata.error);\n        setCurrentEmail('');\n        return;\n      }\n\n      // Display alert if reached maximum number of email recipients\n      if (newEmails.length === maxEmails) {\n        enqueueSnackbar('Maximum number of recipients reached', SnackbarMetadata.warning);\n      }\n\n      setLocalEmails(newEmails);\n      setCurrentEmail('');\n    } else {\n      enqueueSnackbar('Invalid email address. Valid format: abc@def.xyz', SnackbarMetadata.error);\n    }\n  };\n\n  const handleDeleteEmail = (index) => {\n    const newEmails = localEmails.filter((_, i) => i !== index);\n    setLocalEmails(newEmails);\n  };\n\n  const handleEditEmail = (index) => {\n    setCurrentEmail(localEmails[index]);\n    handleDeleteEmail(index);\n  };\n\n  const handleMenuOpen = (event, index) => {\n    setMenuAnchor({ index, element: event.currentTarget });\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchor(null);\n  };\n\n  const handlePaste = (event) => {\n    const pastedText = event.clipboardData.getData('text');\n    setCurrentEmail(pastedText);\n    handleAddEmail(pastedText);\n    event.preventDefault();\n  };\n\n  const handleSaveEmails = (_emails) => {\n    const emailsToSave = isValidArray(_emails) ? _emails : (isValidArray(localEmails) ? localEmails : []);\n    saveEmailsMutation.mutate(emailsToSave);\n  }\n\n  useEffect(() => {\n    const handleBeforeUnload = (event) => {\n      if (!compareArrays(localEmails, alertEmails)) {\n        event.preventDefault();\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [localEmails, alertEmails]);\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" wrap=\"wrap\">\n        <Grid item>\n          <Typography\n            variant='body1'\n            fontWeight={500}\n            sx={{ p: 0, mb: smallScreen && 1, mr: !smallScreen && 2 }}\n          >\n            Email Recipients:\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          lg\n          sx={{\n            overflowY: \"scroll\",\n            maxHeight: \"300px\"\n          }}\n        >\n          <Grid\n            container\n            alignItems=\"center\"\n            sx={{\n              border: '1px solid rgba(0, 0, 0, 0.23)',\n              borderRadius: 2,\n              p: 0.5,\n              flexWrap: 'wrap',\n              width: '100%'\n            }}\n          >\n            {localEmails.map((email, index) => (\n              <Grid item key={index} sx={{ m: 0.5 }}>\n                <Chip\n                  label={email}\n                  onDelete={() => handleDeleteEmail(index)}\n                  onClick={(event) => handleMenuOpen(event, index)}\n                />\n              </Grid>\n            )\n            )}\n            {\n              localEmails.length < maxEmails ? (\n                <Grid item xs={12} sm minWidth=\"200px\" >\n                  <TextField\n                    fullWidth\n                    variant=\"standard\"\n                    value={currentEmail}\n                    onChange={(e) => {\n                      const tmp = e.target.value;\n                      setCurrentEmail(tmp);\n                      if (tmp !== '') {\n                        setSaveButtonTooltipTitle(\"Finalize currently edited email by pressing Enter/Return\")\n                      }\n                    }}\n                    onKeyUp={(e) => {\n                      if (['Enter', 'Spacebar', ' '].includes(e.key)) {\n                        handleAddEmail(currentEmail);\n                      }\n                    }}\n                    onPaste={handlePaste}\n                    placeholder=\"Add recipient\"\n                    sx={{\n                      mx: 0.5\n                    }}\n                    InputProps={{\n                      disableUnderline: true,\n                      style: { textTransform: \"lowercase\" }\n                    }}\n                  />\n                </Grid>\n              ) : null\n            }\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Stack sx={{ mt: 1 }} spacing={1} alignItems={smallScreen ? \"stretch\" : \"end\"}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" gap={1}>\n          <Typography\n            variant=\"caption\"\n            display=\"block\"\n            color=\"text.secondary\"\n            textAlign=\"right\"\n          >\n            {localEmails.length} / {maxEmails} recipient{localEmails.length > 1 ? 's' : null} added\n          </Typography>\n\n          <Link\n            variant=\"caption\"\n            sx={{\n              cursor: \"pointer\"\n            }}\n            onClick={(e) => {\n              e.preventDefault();\n              setCurrentEmail('');\n              setLocalEmails([])\n            }}\n          >\n            Clear All\n          </Link>\n        </Stack>\n\n\n        {\n          alertEmails.length === 0 ?\n            (\n              <Alert\n                severity='error'\n                sx={{\n                  mt: 1\n                }}>\n                The alert(s) above will not be sent unless at least one email recipient is saved\n              </Alert>\n            ) : null\n        }\n\n        <Tooltip title={saveButtonTooltipTitle} enterTouchDelay={0}>\n          {/* Span is needed to display Tooltip on a disabled Button */}\n          <span>\n            <Button\n              onClick={handleSaveEmails}\n              variant=\"contained\"\n              sx={{ width: smallScreen ? \"100%\" : \"fit-content\" }}\n              disabled={!emailsListChanged || saveEmailsMutation.isPending}\n            >\n              {saveEmailsMutation.isPending ? <CircularProgress disableShrink color=\"inherit\" size=\"1.5rem\" /> : \"SAVE EMAIL LIST\"}\n            </Button>\n          </span>\n        </Tooltip>\n\n      </Stack>\n\n      <Menu\n        anchorEl={menuAnchor?.element}\n        open={Boolean(menuAnchor)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem\n          onClick={() => {\n            handleEditEmail(menuAnchor.index);\n            handleMenuClose();\n          }}\n        >\n          Edit\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport default EmailsInput;\n","import SpeedIcon from '@mui/icons-material/Speed';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\n\nconst AlertTypes = {\n  threshold: {\n    id: \"threshold\",\n    index: 0,\n    name: \"Threshold\",\n    tableColumnHeader: \"Threshold\",\n    icon: <SpeedIcon />\n  },\n  daily: {\n    id: \"daily\",\n    index: 1,\n    name: \"Daily\",\n    tableColumnHeader: \"Alert Hour\",\n    icon: <CalendarMonthIcon />\n  }\n};\n\nexport const ThresholdAlertTypes = {\n  below_threshold: {\n    id: 'below_threshold',\n    sign: \"<\",\n    name: \"below\"\n  },\n  above_threshold: {\n    id: 'above_threshold',\n    sign: \"≥\",\n    name: \"above\"\n  }\n}\n\nexport default AlertTypes;","import { createContext, useMemo, useState, useContext, useEffect, useCallback } from 'react';\nimport { DashboardContext } from './DashboardContext';\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { getAlertsApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../API/Utils\";\nimport AlertTypes, { ThresholdAlertTypes } from '../Components/AirQuality/AirQualityAlerts/AlertTypes';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport { PREDEFINED_TIMERANGES } from \"../Components/TimeRange/TimeRangeUtils\";\nimport useSchoolMetadata from '../hooks/useSchoolMetadata';\n\nconst AirQualityAlertContext = createContext();\n\nexport const AirQualityAlertKeys = {\n  id: \"id\",\n  alert_type: \"alert_type\",\n  sensor_id: \"sensor_id\",\n  location_short: \"location_short\",\n  datatypekey: \"datatypekey\",\n  threshold_value: \"threshold_value\",\n  days_of_week: \"days_of_week\",\n  minutespastmidnight: \"minutespastmidnight\",\n  time_range: \"time_range\",\n  is_enabled: \"is_enabled\",\n  excluded_dates: \"excluded_dates\",\n  owner_role: \"owner_role\",\n  self_is_owner: \"self_is_owner\",\n  is_allowed_to_modify: \"is_allowed_to_modify\",\n  message: \"message\",\n  max_once_a_day: \"max_once_a_day\",\n  parent_alert_id: \"parent_alert_id\",\n  child_alert: \"child_alert\",\n  has_child_alert: \"has_child_alert\"\n};\n\nexport const getAlertDefaultPlaceholder = (alert_type = AlertTypes.daily.id) => {\n  let localAlertType, localOppositeAlertType;\n  if (alert_type === AlertTypes.threshold.id) {\n    localAlertType = ThresholdAlertTypes.above_threshold.id;\n    localOppositeAlertType = ThresholdAlertTypes.below_threshold.id;\n  }\n\n  return {\n    [AirQualityAlertKeys.id]: '',\n    [AirQualityAlertKeys.alert_type]: localAlertType || alert_type,\n    [AirQualityAlertKeys.sensor_id]: '',\n    [AirQualityAlertKeys.datatypekey]: '',\n    [AirQualityAlertKeys.days_of_week]: [0, 1, 2, 3, 4],\n    [AirQualityAlertKeys.time_range]: alert_type === AlertTypes.threshold.id ? [PREDEFINED_TIMERANGES.schoolHour.start, PREDEFINED_TIMERANGES.schoolHour.end] : null,\n    [AirQualityAlertKeys.threshold_value]: -1,\n    [AirQualityAlertKeys.minutespastmidnight]: '',\n    [AirQualityAlertKeys.is_enabled]: true,\n    [AirQualityAlertKeys.excluded_dates]: [],\n    [AirQualityAlertKeys.message]: '',\n    [AirQualityAlertKeys.max_once_a_day]: true,\n    [AirQualityAlertKeys.parent_alert_id]: null,\n    [AirQualityAlertKeys.has_child_alert]: false,\n    [AirQualityAlertKeys.child_alert]: alert_type === AlertTypes.threshold.id ? {\n      [AirQualityAlertKeys.alert_type]: localOppositeAlertType || alert_type,\n      [AirQualityAlertKeys.threshold_value]: -1,\n      [AirQualityAlertKeys.message]: '',\n    } : null,\n  }\n}\n\nexport function AirQualityAlertProvider({ children }) {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const [selectedAlert, setSelectedAlert] = useState(getAlertDefaultPlaceholder());\n\n  const [editingAlert, setEditingAlert] = useState(selectedAlert);\n\n  const [allowedDataTypesForSensor, setAllowedDataTypesForSensor] = useState([]);\n\n  const [alerts, setAlerts] = useState([]);\n\n  const [hasFetchedAlerts, setHasFetchedAlerts] = useState();\n\n  const returnAllowedDataTypesForThisSensor = useCallback((sensor) => {\n    if (!schoolMetadata) return [];\n\n    const { sensors } = schoolMetadata;\n    if (!isValidArray(sensors)) return [];\n\n    const sensorData = sensors.find(elem => elem.sensor_id === sensor);\n    const allowedDataTypesForThisSensor = sensorData?.allowedDataTypes;\n\n    if (allowedDataTypesForThisSensor) {\n      return allowedDataTypesForThisSensor.map(dataType => ({\n        value: dataType,\n        label: DataTypes[dataType].name_title\n      }));\n    }\n\n    return [];\n  }, [schoolMetadata]);\n\n  useEffect(() => {\n    setEditingAlert({ ...selectedAlert });\n  }, [selectedAlert]);\n\n  useEffect(() => {\n    const sensor_id = editingAlert[AirQualityAlertKeys.sensor_id];\n    if (sensor_id && sensor_id !== '') {\n      setAllowedDataTypesForSensor(\n        returnAllowedDataTypesForThisSensor(sensor_id)\n      )\n    }\n  }, [editingAlert, returnAllowedDataTypesForThisSensor]);\n\n  // Add child alert to parent\n  const addChildToAlerts = useCallback((alertList = []) => {\n    const processed = [...alertList];\n\n    processed.forEach(alert => {\n      if (!alert) return;\n\n      const isChild = !!alert[AirQualityAlertKeys.parent_alert_id];\n\n      if (isChild) {\n        const parent = processed.find(\n          a => a[AirQualityAlertKeys.id] === alert[AirQualityAlertKeys.parent_alert_id]\n        );\n\n        if (parent) {\n          parent[AirQualityAlertKeys.has_child_alert] = true;\n          parent[AirQualityAlertKeys.child_alert] = {\n            [AirQualityAlertKeys.id]: alert[AirQualityAlertKeys.id],\n            [AirQualityAlertKeys.alert_type]: alert[AirQualityAlertKeys.alert_type],\n            [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n            [AirQualityAlertKeys.message]: alert[AirQualityAlertKeys.message],\n          };\n        }\n      } else {\n        if (alert[AirQualityAlertKeys.alert_type] === AlertTypes.daily.id) return;\n\n        alert[AirQualityAlertKeys.has_child_alert] = false;\n        alert[AirQualityAlertKeys.child_alert] = {\n          [AirQualityAlertKeys.alert_type]:\n            alert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id\n              ? ThresholdAlertTypes.below_threshold.id\n              : ThresholdAlertTypes.above_threshold.id,\n          [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n          [AirQualityAlertKeys.message]: \"\"\n        };\n      }\n    });\n\n    return processed;\n  }, []);\n\n  // Fetch alerts for individual school\n  const fetchAlerts = useCallback(() => {\n    if (!currentSchoolID) return;\n\n    fetchDataFromURL({\n      url: getAlertsApiUrl({\n        endpoint: GeneralAPIendpoints.alerts,\n        school_id: currentSchoolID\n      })\n    }).then((data) => {\n      if (!isValidArray(data)) return;\n\n      setAlerts(\n        addChildToAlerts(data)\n      );\n\n    }).catch((error) => {\n      console.log(error);\n    });\n  }, [currentSchoolID, addChildToAlerts]);\n\n  useEffect(() => {\n    if (!currentSchoolID) return;\n\n    setHasFetchedAlerts(false);\n  }, [currentSchoolID, fetchAlerts]);\n\n  const contextValue = useMemo(() => ({\n    selectedAlert, setSelectedAlert,\n    editingAlert, setEditingAlert,\n    allowedDataTypesForSensor, setAllowedDataTypesForSensor,\n    alerts, setAlerts,\n    fetchAlerts,\n    hasFetchedAlerts, setHasFetchedAlerts,\n    addChildToAlerts\n  }), [selectedAlert, editingAlert, allowedDataTypesForSensor, alerts, fetchAlerts, hasFetchedAlerts, setHasFetchedAlerts, addChildToAlerts]);\n\n  return (\n    <AirQualityAlertContext.Provider value={contextValue}>\n      {children}\n    </AirQualityAlertContext.Provider>\n  );\n}\n\n// Custom hook \nexport const useAirQualityAlert = () => useContext(AirQualityAlertContext);","export const CrudTypes = {\n  add: 'ADD',\n  edit: 'EDIT',\n  delete: 'DELETE'\n}\n\nexport const SharedColumnHeader = {\n  location: \"Location\",\n  dataType: \"Data Type\",\n  selectedDaysOfWeek: \"Days\",\n  createdBy: \"Created By\"\n}","import { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, useTheme } from '@mui/material';\n\nexport default function AlertDeletionDialog(props) {\n  const { onConfirmedDelete } = props;\n\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n\n  return (\n    <>\n      <Button\n        variant=\"text\"\n        color=\"error\"\n        onClick={() => {\n          setOpen(true)\n        }}>\n        Delete\n      </Button>\n      <Dialog\n        open={open}\n        onClose={() => {\n          setOpen(false)\n        }}\n        aria-labelledby=\"alert-deletion-confirmation-dialog-title\"\n        aria-describedby=\"alert-deletion-confirmation-dialog-description\"\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"alert-deletion-confirmation-dialog-title\">\n          Are you sure?\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-deletion-confirmation-dialog-description\">\n            Deletion is permanent. If you simply wish to pause this alert, disable it with the toggle switch instead.</DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: \"end\" }}>\n          <Button\n            onClick={() => {\n              setOpen(false)\n            }}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n\n          <Button\n            onClick={() => {\n              onConfirmedDelete();\n              setOpen(false);\n            }}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}","import { CrudTypes } from '../Utils';\n\nexport const DialogData = {\n  [CrudTypes.add]: {\n    title: \"Add A New Alert\",\n    primaryButtonLabel: \"Save Alert\",\n    errorMessage: \"Server error: new alert was not saved. Please try again\",\n    successMessage: \"New alert added successfully\"\n  },\n  [CrudTypes.edit]: {\n    title: \"Edit Alert\",\n    primaryButtonLabel: \"Save Edit\",\n    errorMessage: \"Server error: changes were not saved. Please try again\",\n    successMessage: \"Changes saved successfully\"\n  },\n  [CrudTypes.delete]: {\n    title: \"Delete Alert\",\n    contentText: \"Are you sure you want to delete this alert?\",\n    primaryButtonLabel: \"Delete\",\n    errorMessage: \"Server error: alert not deleted. Please try again.\",\n    successMessage: \"Alert deleted successfully\"\n  }\n};\n","import { Box, Stack, TextField, Typography } from \"@mui/material\";\n\nconst OptionalMessage = (props) => {\n    const {\n        label = \"Optional Message\",\n        value,\n        handleChange,\n        maxLength,\n        showTip = true,\n        disabled\n    } = props;\n    const currentLength = value ? value.length : 0;\n\n    return (\n        <Stack direction=\"column\">\n            <TextField\n                label={label}\n                multiline\n                minRows={2}\n                maxRows={4}\n                inputProps={{\n                    maxLength,\n                }}\n                value={value || ''}\n                onChange={(event) => {\n                    handleChange(event);\n                }}\n                disabled={disabled}\n            />\n            <Stack direction=\"row\" gap={1} justifyContent=\"space-between\" sx={{ mx: 1, my: 0.5 }}>\n                {showTip ? (\n                    <Typography color=\"text.secondary\" variant=\"caption\">\n                        Optional message that will appear in the alert\n                    </Typography>\n                ) : <Box />}\n\n                <Typography color=\"text.secondary\" variant=\"caption\" textAlign=\"right\">\n                    {currentLength}/{maxLength}\n                </Typography>\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default OptionalMessage;","export const DAYS_OF_WEEK = [\n  { value: 0, label: 'Monday' },\n  { value: 1, label: 'Tuesday' },\n  { value: 2, label: 'Wednesday' },\n  { value: 3, label: 'Thursday' },\n  { value: 4, label: 'Friday' },\n  { value: 5, label: 'Saturday' },\n  { value: 6, label: 'Sunday' }\n];\n","import dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\n\nimport { Link, Typography } from '@mui/material';\nimport CustomDialog from '../../../../CustomDialog/CustomDialog';\n\n// Custom styling for the selected days\nconst CustomPickersDay = styled(PickersDay, {\n  shouldForwardProp: (prop) => prop !== \"selected\"\n})(({ theme, selected }) => ({\n  ...(selected && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    \"&:hover, &:focus\": {\n      backgroundColor: theme.palette.primary.dark\n    },\n    borderRadius: \"50%\",\n  })\n}));\n\n// Custom day component that highlights the selected dates\nconst CustomDayComponent = (props) => {\n  const { day, selectedDates, ...other } = props;\n\n  // Check if the day is selected\n  const isSelected = selectedDates.includes(dayjs(day).format('YYYY-MM-DD'));\n\n  return (\n    <CustomPickersDay {...other} day={day} selected={isSelected} />\n  )\n}\n\nexport default function MultiDaysCalendarPicker(props) {\n  const { selectedDates, handleChange, disabled } = props;\n\n  // Ensure selectedDates is formatted as \"YYYY-MM-DD\"\n  const parsedSelectedDates = selectedDates.map((date) => dayjs(date).format('YYYY-MM-DD'));\n\n  const len = selectedDates.length;\n  const title = len > 0 ? `Excluded Dates (${len} Days)` : `Excluded Dates`;\n\n  return (\n    <CustomDialog\n      dialogTitle={title}\n      buttonLabel={title}\n      buttonVariant='text'\n      disabled={disabled}\n      maxWidth=\"xs\"\n      displaySchoolID={false}\n    >\n      <Typography color=\"text.secondary\" variant='body2' gutterBottom>\n        Select dates when you do <b>NOT</b> want to receive alerts.\n        <br />\n        Useful for holidays or school breaks.\n      </Typography>\n\n      <Link\n        variant=\"caption\"\n        sx={{\n          cursor: \"pointer\",\n          display: \"block\",\n          textAlign: \"right\"\n        }}\n        onClick={(e) => {\n          e.preventDefault();\n          handleChange(selectedDates);\n        }}\n      >\n        Clear All\n      </Link>\n\n      <LocalizationProvider\n        dateAdapter={AdapterDayjs}\n        localeText={{\n          calendarWeekNumberHeaderText: 'Week',\n          calendarWeekNumberText: (weekNumber) => `${weekNumber}.`,\n        }}\n      >\n        <DateCalendar\n          displayWeekNumber\n          slots={{\n            day: (dayProps) => (\n              <CustomDayComponent\n                {...dayProps}\n                selectedDates={parsedSelectedDates}\n              />\n            ),\n          }}\n          onChange={(value, selectionState) => {\n            if (selectionState === 'finish') {\n              handleChange([dayjs(value).format('YYYY-MM-DD')]);\n            }\n          }}\n          disableHighlightToday\n          minDate={dayjs().startOf('month')} // Restrict to dates after the start of the current month\n        />\n      </LocalizationProvider>\n    </CustomDialog>\n  );\n}\n","import { Box, Grid, Stack, ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport { DAYS_OF_WEEK } from './DAYS_OF_WEEK';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder } from '../../../../../ContextProviders/AirQualityAlertContext';\nimport { useTheme } from '@mui/material';\nimport MultiDaysCalendarPicker from './MultiDaysCalendarPicker';\n\nexport default function DateSelector(props) {\n  const { daysOfWeek, excludedDates, handleDaysOfWeekChange, handleExcludedDatesChange, disabled } = props;\n  const theme = useTheme();\n\n  return (\n    <Grid\n      container\n      rowSpacing={0.5}\n      columnSpacing={2}\n      alignItems=\"center\"\n      justifyContent=\"stretch\"\n    >\n      <Grid item xs={12} md={6}>\n        <Stack\n          direction=\"row\"\n          gap={1}\n          alignItems=\"start\"\n        >\n          <Box\n            aria-hidden\n            sx={{\n              '& .MuiSvgIcon-root': {\n                color: disabled\n                  ? theme.palette.text.secondary\n                  : theme.palette.primary.main,\n                verticalAlign: \"middle\"\n              }\n            }}\n          >\n            <CalendarMonthIcon sx={{ mt: 0.75 }} />\n          </Box>\n\n          <ToggleButtonGroup\n            value={daysOfWeek || getAlertDefaultPlaceholder()[AirQualityAlertKeys.days_of_week]}\n            onChange={handleDaysOfWeekChange}\n            aria-label=\"days of the week to receive alert\"\n            sx={{ display: 'flex', justifyContent: 'center' }} // Center the buttons horizontally\n            size=\"small\"\n            fullWidth\n            disabled={disabled}\n            color={disabled ? \"standard\" : \"primary\"}\n          >\n            {DAYS_OF_WEEK.map((day) => (\n              <Tooltip key={day.value} title={day.label} arrow>\n                <ToggleButton value={day.value} aria-label={day.label} sx={{ textTransform: 'none' }}>\n                  {day.label.slice(0, 3)}\n                </ToggleButton>\n              </Tooltip>\n            ))}\n          </ToggleButtonGroup>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={6} ml={{ xs: 3, sm: 0 }}>\n        <MultiDaysCalendarPicker\n          selectedDates={excludedDates}\n          disabled={disabled}\n          handleChange={handleExcludedDatesChange}\n        />\n      </Grid>\n    </Grid>\n\n  );\n}\n","import { Slider, colors, TextField, Grid, Typography } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTheme } from '@mui/material';\n\nexport const ThresholdSlider = (props) => {\n  const {\n    min = 0,\n    max = 100,\n    value,\n    defaultValue,\n    stepsForThreshold = 1,\n    marks = null,\n    handleChange,\n    disabled,\n    backgroundCssGradient,\n    invertSelection = false,\n    showInput = true,\n    inputUnit,\n    valueLabelDisplay = \"on\",\n    showTip = true\n  } = props;\n\n  const theme = useTheme();\n\n  // sliderValue is an array\n  const [sliderRangeMin, setSliderRangeMin] = useState(invertSelection ? value || defaultValue : min);\n  const [sliderRangeMax, setSliderRangeMax] = useState(invertSelection ? max : value || defaultValue);\n  const [nearestDataIndex, setNearestDataIndex] = useState(-1);\n\n  const [error, setError] = useState(false);\n  const [helperText, setHelperText] = useState('');\n\n  const findNearestDataIndex = useCallback((val) => {\n    if (!marks) return -1;\n\n    // Filter marks to get those with values greater than currentVal\n    const greaterMarks = marks.filter(mark => mark.value >= val);\n\n    // If no marks are greater, return -1\n    if (greaterMarks.length === 0) {\n      return -1;\n    }\n\n    // Find the mark with the nearest value greater than val\n    const nearestMark = greaterMarks.reduce((prev, curr) => {\n      return (curr.value - val) < (prev.value - val) ? curr : prev;\n    });\n\n    // Return the index of the nearest mark in the original marks array\n    const index = marks.indexOf(nearestMark)\n    return invertSelection ? index - 1 : index;\n  }, [marks, invertSelection]);\n\n  useEffect(() => {\n    const localSliderRangeMin = invertSelection ? value : min;\n    const localSliderRangeMax = invertSelection ? max : value;\n    setSliderRangeMin(localSliderRangeMin);\n    setSliderRangeMax(localSliderRangeMax);\n\n    setNearestDataIndex(findNearestDataIndex(invertSelection ? localSliderRangeMin : localSliderRangeMax));\n  }, [findNearestDataIndex, invertSelection, value, max, min]);\n\n  const handleSliderChange = (event, newValue) => {\n    const val = newValue[invertSelection ? 0 : 1];\n\n    setSliderRangeMin(invertSelection ? val : min);\n    setSliderRangeMax(invertSelection ? max : val);\n\n    handleChange(val);\n    setNearestDataIndex(findNearestDataIndex(val));\n  };\n\n  const handleInputChange = (event) => {\n    const val = event.target.value === '' ? '' : Number(event.target.value);\n\n    // Empty val\n    if (!val || val === '') {\n      handleChange(val);\n    }\n\n    // Non-empty val\n    if (val !== '' && (val >= min && val <= max)) {\n      setSliderRangeMin(invertSelection ? val : min);\n      setSliderRangeMax(invertSelection ? max : val);\n\n      handleChange(val);\n      setNearestDataIndex(findNearestDataIndex(val));\n\n      setError(false);\n      setHelperText('');\n    } else {\n      setError(true);\n      setHelperText(`Threshold must be between ${min} and ${max}`);\n    }\n  };\n\n  const stripedGradient = `repeating-linear-gradient(-45deg, ${colors.grey[800]}, ${colors.grey[800]} 4px, ${colors.common.white} 4px, ${colors.common.white} 8px)`;\n\n  const sliderSX = {\n    height: \"20vh\",\n    minHeight: \"250px\",\n    maxHeight: \"500px\",\n    cursor: disabled ? 'not-allowed' : 'inherit',\n    pointerEvents: 'all',\n    '& *': {\n      transition: 'none !important'\n    },\n    '& .MuiSlider-thumb': {\n      width: '2rem',\n      height: '4px',\n      borderRadius: 1,\n      color: colors.common.black,\n    },\n    [`& .MuiSlider-thumb[data-index=\"${invertSelection ? 1 : 0}\"]`]: {\n      display: 'none',\n    },\n    '& .MuiSlider-mark, .MuiSlider-markActive': {\n      width: '2rem',\n      height: '3px',\n      background: theme.palette.background.paper,\n      backgroundImage: theme.palette.background.paperBackgroundGradient\n    },\n    '& .MuiSlider-thumb, .MuiSlider-mark': {\n      transform: `translate(-50%,50%})`\n    },\n    '& .MuiSlider-rail, .MuiSlider-track': {\n      width: '1rem',\n      opacity: 0.75,\n      border: 'none'\n    },\n    '& .MuiSlider-rail': {\n      background: disabled ? colors.grey[400] : backgroundCssGradient,\n    },\n    '& .MuiSlider-track': {\n      background: stripedGradient,\n      ...(invertSelection ? {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      } : {\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      })\n    },\n    [`& .MuiSlider-markLabel, .MuiSlider-markLabel[data-index=\"${nearestDataIndex}\"]`]: {\n      color: theme.palette.text.primary,\n      fontWeight: 500,\n      textDecoration: 'underline',\n    },\n    '& .MuiSlider-markLabelActive': {\n      color: theme.palette.text.secondary,\n      fontWeight: 'inherit',\n      textDecoration: 'inherit',\n    },\n    '& .MuiSlider-valueLabel': {\n      transform: 'translate(-10px, -50%)',\n    }\n  };\n\n  return (\n    <>\n      <Grid container item xs=\"auto\" alignItems=\"end\" spacing={0.5}>\n        <Grid item xs=\"auto\" minWidth=\"4.5rem\">\n          {showInput ? (\n            <TextField\n              variant='standard'\n              type=\"number\"\n              label=\"Threshold\"\n              value={invertSelection ? sliderRangeMin : sliderRangeMax}\n              onChange={handleInputChange}\n              error={error}\n              helperText={helperText}\n              size='small'\n              fullWidth\n              disabled={disabled}\n              inputProps={{\n                step: stepsForThreshold,\n                min,\n                max,\n                type: 'number',\n                'aria-labelledby': 'input-threshold-slider'\n              }}\n            />\n          ) : null}\n        </Grid>\n\n        {\n          inputUnit ? (\n            <Grid item>\n              <Typography variant='body2'>\n                {inputUnit}\n              </Typography>\n            </Grid>\n          ) : null\n        }\n      </Grid>\n\n      <Grid item xs={12} sx={{ mt: 2, ml: 7.5 }}>\n        <Slider\n          getAriaLabel={() => 'Alert Threshold Slider'}\n          aria-labelledby=\"input-threshold-slider\"\n          value={[sliderRangeMin, sliderRangeMax]}\n          step={marks === null ? stepsForThreshold : null} // only allow discrete equal step if marks are not provided\n          marks={marks}\n          disabled={disabled}\n          min={min}\n          max={max}\n          onChange={handleSliderChange}\n          valueLabelDisplay={valueLabelDisplay}\n          orientation=\"vertical\"\n          sx={sliderSX} />\n      </Grid>\n\n      <Grid item sx={{ mt: 1, ml: 1, visibility: showTip === true ? 'visible' : 'hidden' }}>\n        <Typography color=\"text.secondary\" variant='caption' display='block'>\n          Move the slider to change the alert's threshold value or use the text input box for more precise control.\n        </Typography>\n      </Grid>\n    </>\n  );\n};","import { ThresholdSlider } from \"./ThresholdSlider\";\nimport { DataTypeKeys, DataTypes } from \"../../../../../../Utils/AirQuality/DataTypes\";\nimport { AirQualityAlertKeys, useAirQualityAlert } from \"../../../../../../ContextProviders/AirQualityAlertContext\";\nimport { AQI_Database, HeatIndex_Database, VOC_Database } from \"../../../../../../Utils/AirQuality/AirQualityIndexHelper\";\nimport { useTheme } from '@mui/material';\nimport { generateCssBackgroundGradient } from \"../../../../../../Utils/Gradient/GradientUtils\";\nimport { getTranslation } from \"../../../../../../Utils/UtilFunctions\";\nimport { useContext } from \"react\";\nimport { PreferenceContext } from \"../../../../../../ContextProviders/PreferenceContext\";\n\nexport const ThresholdComponentWrapper = (props) => {\n    const {\n        value,\n        invertSelection,\n        handleValueChange,\n        placeholderValueBeforeDataTypeSelection = 0.5,\n        disabledSlider,\n        showTip = true\n    } = props;\n\n    const { editingAlert } = useAirQualityAlert();\n    const theme = useTheme();\n    const { language } = useContext(PreferenceContext);\n\n    let thresholdSlider = null;\n\n    const currentDataTypeKey = editingAlert[AirQualityAlertKeys.datatypekey];\n    if (currentDataTypeKey && DataTypes[currentDataTypeKey]) {\n        const dataType = DataTypes[currentDataTypeKey];\n        const dataTypeColorAxis = theme.palette.chart.colorAxes[dataType.color_axis];\n        const { colors, minValue, maxValue, defaultValueForAlert, stepsForThreshold } = dataTypeColorAxis;\n\n        const backgroundCssGradient = generateCssBackgroundGradient({\n            gradientDirection: 'to top',\n            colors: colors\n        });\n\n        // Check if this dataType exists in the AQI_Database\n        // If yes, return value and label accordingly to the marks\n        let marks, database;\n\n        switch (currentDataTypeKey) {\n            case DataTypeKeys.voc:\n                database = VOC_Database;\n                break;\n            case DataTypeKeys.aqi:\n            case DataTypeKeys.pm2_5:\n            case DataTypeKeys.pm10_raw:\n            case DataTypeKeys.co2:\n                database = AQI_Database;\n                break;\n            case DataTypeKeys.heat_index_C:\n                database = HeatIndex_Database;\n                break;\n            default:\n                database = null;\n        }\n\n        if (database) {\n            marks = database\n                .filter((_, index) => index !== 0) // do not return the lowest category\n                .map((element) => {\n                    const val = element[dataType.threshold_mapping_name].low;\n                    return {\n                        value: val,\n                        label: getTranslation(element.category, language)\n                    }\n                })\n        }\n\n        const inputUnit = Object.keys(DataTypes)\n            .filter(key => key === editingAlert[AirQualityAlertKeys.datatypekey])\n            .map(key => DataTypes[key].unit)[0]\n\n        thresholdSlider = (\n            <ThresholdSlider\n                min={minValue}\n                max={maxValue}\n                marks={marks}\n                defaultValue={defaultValueForAlert}\n                value={value}\n                stepsForThreshold={stepsForThreshold}\n                disabled={disabledSlider}\n                backgroundCssGradient={backgroundCssGradient}\n                invertSelection={invertSelection}\n                handleChange={handleValueChange}\n                inputUnit={inputUnit}\n                showTip={showTip}\n            />\n        )\n    } else {\n        thresholdSlider = (\n            <ThresholdSlider\n                min={0}\n                max={1}\n                value={placeholderValueBeforeDataTypeSelection}\n                disabled={true}\n                showInput={false}\n                invertSelection={invertSelection}\n                valueLabelDisplay=\"off\"\n                showTip={showTip}\n            />\n        )\n    }\n\n    return thresholdSlider;\n}","import { FormControl, FormGroup, FormControlLabel, FormHelperText, Checkbox, Typography } from '@mui/material';\n\nexport const MaxOnceADayCheckbox = ({ value, handleChange, disabled }) => {\n\n  const returnHelperText = () => {\n    if (value === true) {\n      return (\n        <>\n          Send alert <strong>at most once a day</strong> when the threshold is breached\n        </>\n      );\n    } else {\n      return (\n        <>\n          Send alert <strong>every hour</strong> for as long as the threshold is breached\n        </>\n      );\n    }\n  };\n  return (\n    <FormControl\n      component=\"fieldset\"\n      variant=\"standard\"\n      sx={{ mt: { md: -1 } }}\n      disabled={disabled}\n    >\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={value}\n              onChange={handleChange}\n              size='small'\n            />\n          }\n          label={<Typography color=\"text.secondary\" fontWeight={500}>Max Once a Day</Typography>}\n          color=\"text.secondary\"\n        />\n      </FormGroup>\n      <FormHelperText sx={{ mt: -0.5 }}>{returnHelperText()}</FormHelperText>\n    </FormControl>\n  );\n};\n","import { ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { ThresholdAlertTypes } from '../../../AlertTypes';\n\nexport const ThresholdTypeToggle = ({ currentAlertType, handleChange, disabled, ...others }) => {\n  return (\n    <ToggleButtonGroup\n      color={disabled ? \"standard\" : \"primary\"}\n      disabled={disabled}\n      defaultValue={ThresholdAlertTypes.above_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"toggle to choose alert below or above a threshold\"\n      size=\"small\"\n      onChange={handleChange}\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n};\n\nexport const ThresholdType = ({ currentAlertType, ...others }) => {\n\n  return (\n    <ToggleButtonGroup\n      color={\"standard\"}\n      disabled={true}\n      defaultValue={ThresholdAlertTypes.below_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"non-interactive button displaying threshold type\"\n      size=\"small\"\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n        if (thresholdAlertType.id !== currentAlertType) return null;\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n}\n","import { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from \"../../../../../ContextProviders/AirQualityAlertContext\";\nimport AlertTypes, { ThresholdAlertTypes } from \"../../AlertTypes\";\nimport { SimplePicker } from \"./SimplePicker\";\n\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { SharedColumnHeader } from \"../../Utils\";\nimport TimeRangeSelector from \"../../../../TimeRange/TimeRangeSelector\";\nimport { DataTypes } from \"../../../../../Utils/AirQuality/DataTypes\";\nimport { capitalizePhrase } from \"../../../../../Utils/UtilFunctions\";\nimport { HOURS } from \"../../../../TimeRange/TimeRangeUtils\";\nimport { Checkbox, DialogContentText, FormControlLabel, FormGroup, Grid, Stack, Switch, Typography, useTheme } from \"@mui/material\";\n\nimport OptionalMessage from \"./OptionalMessage\";\nimport DateSelector from \"./DaySelector\";\nimport { ThresholdComponentWrapper } from \"./ThresholdAlertComponents/ThresholdComponentWrapper\";\n\nimport { DialogData } from \"../DialogData\";\nimport { MaxOnceADayCheckbox } from \"./MaxOnceADayCheckbox\";\nimport { ThresholdType, ThresholdTypeToggle } from \"./ThresholdAlertComponents/ThresholdTypeToggle\";\n\nimport useSchoolMetadata from \"../../../../../hooks/useSchoolMetadata\";\n\nconst returnFormattedStatusString = (editingAlert) => {\n    const status = editingAlert[AirQualityAlertKeys.is_enabled] ? \"enabled\" : \"disabled\";\n    const tense = editingAlert[AirQualityAlertKeys.id] ? \"is\" : \"will be\"; // if this alert doesn't have id, it's not d in DB yet, thus we use future tense \n\n    return `This alert ${tense} ${status}`;\n}\n\nexport const AlertPropertyComponents = ({ alertTypeKey, crudType }) => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n    const { editingAlert, allowedDataTypesForSensor, setEditingAlert } = useAirQualityAlert();\n\n    const theme = useTheme();\n\n    // Get the available sensors (locations) for this school\n    const allSensorsOfSchool = schoolMetadata?.sensors?.map(sensor => (\n        {\n            value: sensor.sensor_id,\n            label: capitalizePhrase(sensor.location_short)\n        }\n    ));\n\n    // Helper function to check if the previous field has a value to disable this field\n    const isDisabled = (key) => {\n        switch (key) {\n            case AirQualityAlertKeys.sensor_id:\n            case AirQualityAlertKeys.is_enabled:\n                // sensor_id and is_enabled can never be disabled because it's the first field\n                return false;\n\n            case AirQualityAlertKeys.datatypekey:\n                // datatypekey depends on sensor_id having a placeholder value\n                return editingAlert[AirQualityAlertKeys.sensor_id] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.sensor_id];\n\n            case AirQualityAlertKeys.child_alert:\n                // child_alert depends on has_child_alert being true\n                return editingAlert[AirQualityAlertKeys.has_child_alert] !== true;\n\n            default:\n                // all other fields depends on datatypekey having a placeholder value\n                return editingAlert[AirQualityAlertKeys.datatypekey] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.datatypekey];\n        }\n    };\n\n    const displayHourPicker = () => {\n        switch (alertTypeKey) {\n            case AlertTypes.daily.id:\n                return (\n                    <SimplePicker\n                        icon={<AccessTimeIcon />}\n                        label={AlertTypes.daily.tableColumnHeader}\n                        value={editingAlert[AirQualityAlertKeys.minutespastmidnight]}\n                        options={HOURS}\n                        disabled={isDisabled(AirQualityAlertKeys.minutespastmidnight)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.minutespastmidnight]: event.target.value\n                            });\n                        }}\n                    />\n                );\n            case AlertTypes.threshold.id:\n                return (\n                    <Grid container columnSpacing={2} rowSpacing={0.5}>\n                        <Grid item xs={12} md={6}>\n                            <TimeRangeSelector\n                                timeRange={editingAlert[AirQualityAlertKeys.time_range]}\n                                defaultTimeRange={getAlertDefaultPlaceholder(AlertTypes.threshold.id)[AirQualityAlertKeys.time_range]}\n                                disabled={isDisabled(AirQualityAlertKeys.time_range)}\n                                handleChange={(newRange) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.time_range]: newRange\n                                    });\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <MaxOnceADayCheckbox\n                                value={editingAlert[AirQualityAlertKeys.max_once_a_day]}\n                                handleChange={(event) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.max_once_a_day]: event.target.checked\n                                    })\n                                }}\n                                disabled={isDisabled(AirQualityAlertKeys.max_once_a_day)}\n                            />\n                        </Grid>\n                    </Grid>\n                );\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <Stack\n            direction=\"column\"\n            gap={2}\n            mt={1}\n            width=\"100%\"\n        >\n            {\n                DialogData[crudType]?.contentText ?\n                    (\n                        <DialogContentText fontWeight=\"500\">\n                            {DialogData[crudType].contentText}\n                        </DialogContentText>\n                    ) : null\n            }\n\n            <Stack\n                direction=\"row\"\n                gap={1}\n                alignItems=\"center\"\n                mb={2}\n            >\n                <Switch\n                    size='small'\n                    checked={editingAlert[AirQualityAlertKeys.is_enabled]}\n                    onChange={(event) => {\n                        setEditingAlert({\n                            ...editingAlert,\n                            [AirQualityAlertKeys.is_enabled]: event.target.checked\n                        });\n                    }}\n                    disabled={isDisabled(AirQualityAlertKeys.is_enabled)}\n                />\n                <Typography\n                    fontWeight={500}\n                    color=\"text.secondary\"\n                >\n                    {returnFormattedStatusString(editingAlert)}\n                </Typography>\n            </Stack>\n\n            <Grid\n                container\n                columnSpacing={2}\n                alignItems=\"center\"\n            >\n                <Grid item xs={6}>\n                    <SimplePicker\n                        icon={<PlaceIcon />}\n                        label={SharedColumnHeader.location}\n                        value={editingAlert[AirQualityAlertKeys.sensor_id]}\n                        options={allSensorsOfSchool}\n                        disabled={isDisabled(AirQualityAlertKeys.sensor_id)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.sensor_id]: event.target.value,\n                                [AirQualityAlertKeys.datatypekey]: ''\n                            });\n                        }}\n                    />\n                </Grid>\n\n                <Grid item xs={6}>\n                    <SimplePicker\n                        label={SharedColumnHeader.dataType}\n                        value={editingAlert[AirQualityAlertKeys.datatypekey]}\n                        options={allowedDataTypesForSensor}\n                        disabled={isDisabled(AirQualityAlertKeys.datatypekey)}\n                        handleChange={(event) => {\n                            const selectedDataTypeKey = event.target.value;\n                            const dataType = DataTypes[selectedDataTypeKey];\n\n                            // After data type is determined, set the threshold value to defaultValueForAlert\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.datatypekey]: selectedDataTypeKey,\n                                [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForAlert,\n                                [AirQualityAlertKeys.child_alert]: {\n                                    ...editingAlert[AirQualityAlertKeys.child_alert],\n                                    [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForChildAlert\n                                }\n                            });\n                        }}\n                        flex={1}\n                    />\n                </Grid>\n            </Grid>\n\n            <DateSelector\n                daysOfWeek={editingAlert[AirQualityAlertKeys.days_of_week]}\n                excludedDates={editingAlert[AirQualityAlertKeys.excluded_dates] || []}\n                disabled={isDisabled(AirQualityAlertKeys.days_of_week)}\n                handleDaysOfWeekChange={(_, newValue) => {\n                    const validDaysOfWeek = Array.isArray(newValue) ? newValue : [];\n\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.days_of_week]: validDaysOfWeek.sort()\n                    });\n                }}\n                handleExcludedDatesChange={(valueArray) => {\n                    // Get the current excluded dates or initialize as an empty array\n                    const currentExcludedDates = editingAlert[AirQualityAlertKeys.excluded_dates] || [];\n\n                    // Create a new array that updates the excluded dates\n                    const updatedExcludedDates = valueArray.reduce((acc, date) => {\n                        // Check if the date is already excluded\n                        if (acc.includes(date)) {\n                            // If it exists, filter it out (remove the date)\n                            return acc.filter(excludedDate => excludedDate !== date);\n                        } else {\n                            // If it doesn't exist, add the date to the array\n                            return [...acc, date];\n                        }\n                    }, currentExcludedDates); // Start with the current excluded dates\n\n                    // Update the state with the new excluded_dates array\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.excluded_dates]: updatedExcludedDates\n                    });\n                }}\n            />\n\n\n            {displayHourPicker(alertTypeKey)}\n\n            {alertTypeKey === AlertTypes.threshold.id ?\n                (\n                    <Grid container alignItems=\"start\" spacing={2}>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='body1'\n                                    fontWeight={500}\n                                    color=\"text.secondary\"\n                                    sx={{ mt: \"2px\", mb: \"12px\" }} // absolute value to align with the other side\n                                >\n                                    1. Alert if it is:\n                                </Typography>\n                            </Grid>\n\n                            <Grid item sx={{ mr: 2 }}>\n                                <ThresholdTypeToggle\n                                    currentAlertType={editingAlert[AirQualityAlertKeys.alert_type]}\n                                    handleChange={(event) => {\n                                        const selectedAlertType = event.target.value;\n                                        const oppositeAlertTypeForChildAlert = selectedAlertType === ThresholdAlertTypes.above_threshold.id\n                                            ? ThresholdAlertTypes.below_threshold.id\n                                            : ThresholdAlertTypes.above_threshold.id;\n\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.alert_type]: selectedAlertType,\n                                            [AirQualityAlertKeys.child_alert]: {\n                                                ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                [AirQualityAlertKeys.alert_type]: oppositeAlertTypeForChildAlert\n                                            }\n                                        });\n                                    }}\n                                    disabled={isDisabled(AirQualityAlertKeys.alert_type)}\n                                    sx={{\n                                        height: \"100%\"\n                                    }}\n                                />\n                            </Grid>\n\n                            <ThresholdComponentWrapper\n                                value={editingAlert[AirQualityAlertKeys.threshold_value]}\n                                invertSelection={editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id}\n                                handleValueChange={(value) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.threshold_value]: value\n                                    });\n                                }}\n                                disabledToggle={isDisabled(AirQualityAlertKeys.alert_type)}\n                                disabledSlider={isDisabled(AirQualityAlertKeys.threshold_value)}\n                                placeholderValueBeforeDataTypeSelection={2 / 3}\n                            />\n\n                            <Grid item xs={12} mt={2}>\n                                <OptionalMessage\n                                    value={editingAlert[AirQualityAlertKeys.message]}\n                                    handleChange={(event) => {\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.message]: event.target.value\n                                        });\n                                    }}\n                                    maxLength={200}\n                                    label=\"Optional Message for Main Alert\"\n                                    disabled={isDisabled(AirQualityAlertKeys.message)}\n                                />\n                            </Grid>\n\n                        </Grid>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <FormGroup>\n                                    <FormControlLabel\n                                        disabled={isDisabled(AirQualityAlertKeys.has_child_alert)}\n                                        control={\n                                            <Checkbox\n                                                checked={!!editingAlert[AirQualityAlertKeys.has_child_alert]} // fallback in case undefined in first render\n                                                onChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.has_child_alert]: event.target.checked\n                                                    });\n                                                }}\n                                                size=\"small\"\n                                            />\n                                        }\n                                        label={\n                                            <Typography\n                                                variant={'body1'}\n                                                fontWeight={500}\n                                                color=\"text.secondary\"\n                                            >\n                                                2. [Optional] Follow-up alert if it changes to:\n                                            </Typography>\n                                        }\n                                        color=\"text.secondary\"\n                                    />\n                                </FormGroup>\n                            </Grid>\n\n                            {\n                                editingAlert[AirQualityAlertKeys.child_alert] && (\n                                    <>\n                                        <Grid item sx={{ mr: 2 }}>\n                                            <ThresholdType\n                                                currentAlertType={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type]}\n                                                sx={{\n                                                    height: \"100%\"\n                                                }}\n                                            />\n                                        </Grid>\n\n                                        <ThresholdComponentWrapper\n                                            value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.threshold_value]}\n                                            invertSelection={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id || true}\n                                            handleValueChange={(value) => {\n                                                setEditingAlert({\n                                                    ...editingAlert,\n                                                    [AirQualityAlertKeys.child_alert]: {\n                                                        ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                        [AirQualityAlertKeys.threshold_value]: value\n                                                    }\n                                                });\n                                            }}\n                                            disabledToggle={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            disabledSlider={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            showTip={false}\n                                            placeholderValueBeforeDataTypeSelection={1 / 3}\n                                        />\n\n                                        <Grid item xs={12} mt={2}>\n                                            <OptionalMessage\n                                                value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.message]}\n                                                handleChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.child_alert]: {\n                                                            ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                            [AirQualityAlertKeys.message]: event.target.value\n                                                        }\n                                                    });\n                                                }}\n                                                maxLength={200}\n                                                label=\"Optional Message for Follow-up Alert\"\n                                                showTip={false}\n                                                disabled={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            />\n                                        </Grid>\n                                    </>\n                                )\n                            }\n                        </Grid>\n                    </Grid>\n\n                ) : (\n                    <OptionalMessage\n                        value={editingAlert[AirQualityAlertKeys.message]}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.message]: event.target.value\n                            });\n                        }}\n                        maxLength={200}\n                        disabled={isDisabled(AirQualityAlertKeys.message)}\n                    />\n                )}\n        </Stack>\n    );\n}","import { Button, Dialog, DialogTitle, DialogActions, DialogContent, Stack, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport AlertTypes, { ThresholdAlertTypes } from '../AlertTypes';\nimport { CrudTypes } from '../Utils';\n\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../../ContextProviders/AirQualityAlertContext';\n\nimport { useContext, useEffect, useState } from 'react';\nimport { DashboardContext } from '../../../../ContextProviders/DashboardContext';\nimport { fetchDataFromURL } from '../../../../API/ApiFetch';\nimport { RESTmethods } from \"../../../../API/Utils\";\nimport { getAlertsApiUrl } from '../../../../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../../../../API/Utils\";\n\nimport { SnackbarMetadata } from '../../../../Utils/SnackbarMetadata';\n\nimport isEqual from 'lodash.isequal';\nimport AlertDeletionDialog from './AlertDeletionDialog';\nimport { useSnackbar } from 'notistack';\n\nimport { DialogData } from './DialogData';\nimport { AlertPropertyComponents } from './AlertPropertyComponents/AlertPropertyComponents';\n\nconst AlertModificationDialog = (props) => {\n  const {\n    alertTypeKey,\n    openAlertModificationDialog,\n    crudType,\n    handleClose\n  } = props;\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const { selectedAlert, setSelectedAlert, editingAlert, setEditingAlert, setAlerts, addChildToAlerts } = useAirQualityAlert();\n\n  const [shouldDisableButton, setShouldDisableButton] = useState(false);\n\n  const { enqueueSnackbar } = useSnackbar()\n\n  const theme = useTheme();\n\n  const sanityCheckAlertBeforeSaving = () => {\n    if (alertTypeKey === AlertTypes.daily.id) return { valid: true };\n\n    if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return { valid: true };\n\n    const isAbove = editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id;\n    const threshold = editingAlert[AirQualityAlertKeys.threshold_value];\n    const childThreshold = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.threshold_value];\n\n    if (childThreshold === undefined) return { valid: true };\n\n    if (\n      (isAbove && threshold <= childThreshold) ||\n      (!isAbove && threshold >= childThreshold)\n    ) {\n      return {\n        valid: false,\n        message: `The follow-up alert must have a ${isAbove ? \"lower\" : \"higher\"} threshold than the first alert`\n      };\n    }\n\n    return { valid: true };\n  };\n\n  const removeChildAlertFromParentAlertBody = (body) => {\n    const newBody = { ...body };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n    return newBody;\n  }\n\n  const formatChildAlertBody = (body, parent_alert_id) => {\n    const newBody = {\n      ...body, // copy all properties from parent\n      ...body[AirQualityAlertKeys.child_alert], // but then, override with child's unique properties\n      [AirQualityAlertKeys.parent_alert_id]: parent_alert_id, // finally, link child to parent\n      [AirQualityAlertKeys.id]: null // destroy parent's id just in case\n    };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n\n    return newBody;\n  };\n\n  const handleAlertModification = ({ passedCrudType }) => {\n    const handleFetchError = (error) => {\n      enqueueSnackbar(DialogData[passedCrudType].errorMessage, SnackbarMetadata.error);\n    };\n\n    const handleFetchSuccess = () => {\n      enqueueSnackbar(DialogData[passedCrudType].successMessage, SnackbarMetadata.success);\n      handleClose();\n    }\n\n    switch (passedCrudType) {\n      case CrudTypes.add: {\n        const result = sanityCheckAlertBeforeSaving();\n        if (!result.valid) {\n          enqueueSnackbar(result.message, SnackbarMetadata.error);\n          return;\n        }\n\n        // 1. POST to create the main alert (always run)\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID\n          }),\n          restMethod: RESTmethods.POST,\n          body: removeChildAlertFromParentAlertBody(editingAlert)\n        }).then((createdAlert) => {\n          setAlerts(prevAlerts => {\n            const updatedAlerts = [...prevAlerts, createdAlert];\n            return addChildToAlerts(updatedAlerts);\n          });\n          handleFetchSuccess();\n\n          const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n          setSelectedAlert(placeholder);\n          setEditingAlert(placeholder);\n\n          // 2. POST for child alert associated with this main alert (only if it exists)\n          if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return;\n\n          const parent_alert_id = createdAlert[AirQualityAlertKeys.id];\n          if (parent_alert_id === null || parent_alert_id === undefined) return;\n\n          fetchDataFromURL({\n            url: getAlertsApiUrl({\n              endpoint: GeneralAPIendpoints.alerts,\n              school_id: currentSchoolID\n            }),\n            restMethod: RESTmethods.POST,\n            body: formatChildAlertBody(editingAlert, parent_alert_id)\n          }).then((createdChildAlert) => {\n            setAlerts(prevAlerts => {\n              const updatedAlerts = [...prevAlerts, createdChildAlert];\n              return addChildToAlerts(updatedAlerts);\n            });\n          }).catch((childError) => handleFetchError(childError));\n\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      }\n      case CrudTypes.edit: {\n        const result = sanityCheckAlertBeforeSaving();\n        if (!result.valid) {\n          enqueueSnackbar(result.message, SnackbarMetadata.error);\n          return;\n        }\n\n        // 1. PUT to modify the main alert (always run)\n        const alert_id = selectedAlert[AirQualityAlertKeys.id];\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID,\n            alert_id: alert_id\n          }),\n          restMethod: RESTmethods.PUT,\n          body: removeChildAlertFromParentAlertBody(editingAlert)\n        }).then((updatedAlert) => {\n          setAlerts(prevAlerts => {\n            const updatedAlerts = prevAlerts.map(alert =>\n              alert.id === alert_id ? updatedAlert : alert\n            );\n            return addChildToAlerts(updatedAlerts);\n          });\n          handleFetchSuccess();\n\n          // 2. Editing for child alert associated with this main alert\n          const child_alert_id = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.id];\n          // 2.1. There should NOT be child alert\n          if (!editingAlert[AirQualityAlertKeys.has_child_alert]) {\n            // If child alert existed before but now is removed, then trigger deletion\n            if (child_alert_id !== null && child_alert_id !== undefined) {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID,\n                  alert_id: child_alert_id\n                }),\n                restMethod: RESTmethods.DELETE\n              }).then(() => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = prevAlerts.filter(alert => alert.id !== child_alert_id)\n                  return addChildToAlerts(updatedAlerts);\n                });\n                handleFetchSuccess();\n              }).catch((error) => handleFetchError(error));\n            }\n          }\n          // 2.2. There should be child alert\n          else {\n            // 2.2.1. If there is no child alert id before, create one\n            if (child_alert_id === null || child_alert_id === undefined) {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID\n                }),\n                restMethod: RESTmethods.POST,\n                body: formatChildAlertBody(editingAlert, alert_id)\n              }).then((createdChildAlert) => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = [...prevAlerts, createdChildAlert];\n                  return addChildToAlerts(updatedAlerts);\n                });\n              }).catch((childError) => handleFetchError(childError));\n            }\n\n            // 2.2.2. Else, update that child alert\n            else {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID,\n                  alert_id: child_alert_id\n                }),\n                restMethod: RESTmethods.PUT,\n                body: formatChildAlertBody(editingAlert, alert_id)\n              }).then((updatedChildAlert) => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = prevAlerts.map(alert =>\n                    alert.id === child_alert_id ? updatedChildAlert : alert\n                  );\n\n                  return addChildToAlerts(updatedAlerts);\n                });\n              }).catch((childError) => handleFetchError(childError));\n            }\n          }\n\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      }\n      case CrudTypes.delete:\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID,\n            alert_id: selectedAlert.id\n          }),\n          restMethod: RESTmethods.DELETE\n        }).then(() => {\n          setAlerts(prevAlerts => prevAlerts.filter(alert => alert.id !== selectedAlert.id));\n          handleFetchSuccess();\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Disable / Enable save button depends on context\n  useEffect(() => {\n    // startTime cannot be larger than endTime\n    if (editingAlert[AirQualityAlertKeys.time_range]?.[0] > editingAlert[AirQualityAlertKeys.time_range]?.[1]) {\n      setShouldDisableButton(true);\n      return;\n    }\n\n    switch (crudType) {\n      case CrudTypes.add:\n        const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n\n        if (editingAlert[AirQualityAlertKeys.sensor_id] === placeholder[AirQualityAlertKeys.sensor_id] ||\n          editingAlert[AirQualityAlertKeys.datatypekey] === placeholder[AirQualityAlertKeys.datatypekey]) {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(true);\n          }\n        } else {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(false);\n          }\n        }\n        break;\n\n      case CrudTypes.edit:\n        // Case empty editing value\n        let alertVal;\n        if (alertTypeKey === AlertTypes.daily.id) {\n          alertVal = editingAlert[AirQualityAlertKeys.minutespastmidnight]\n        } else {\n          alertVal = editingAlert[AirQualityAlertKeys.threshold_value]\n        }\n        const datatypeKeyVal = editingAlert[AirQualityAlertKeys.datatypekey];\n\n        if (!alertVal || alertVal === '' || !datatypeKeyVal || datatypeKeyVal === '') {\n          setShouldDisableButton(true);\n          break;\n        }\n\n        setShouldDisableButton(isEqual(selectedAlert, editingAlert));\n        break;\n      default:\n        setShouldDisableButton(false);\n        break;\n    }\n  }, [crudType, selectedAlert, editingAlert, alertTypeKey]);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  return (\n    <Dialog\n      open={openAlertModificationDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-modification-dialog\"\n      maxWidth=\"md\"\n      fullWidth\n      fullScreen={smallScreen}\n    >\n      <DialogTitle id=\"alert-modification-dialog\">\n        {DialogData[crudType]?.title}\n      </DialogTitle>\n\n      <DialogContent>\n        <AlertPropertyComponents\n          alertTypeKey={alertTypeKey}\n          crudType={crudType}\n        />\n      </DialogContent>\n      <DialogActions sx={{\n        justifyContent: \"space-between\"\n      }}>\n        {\n          crudType === CrudTypes.edit ? (\n            <AlertDeletionDialog\n              onConfirmedDelete={() => {\n                handleAlertModification({ passedCrudType: CrudTypes.delete })\n              }}\n            />\n          ) : null\n        }\n\n        <Stack direction=\"row\" width=\"100%\" justifyContent=\"end\">\n          <Button\n            onClick={handleClose}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleAlertModification({ passedCrudType: crudType });\n            }}\n            color=\"primary\"\n            disabled={shouldDisableButton}\n          >\n            Save Edit\n          </Button>\n        </Stack>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AlertModificationDialog;\n\n\n","import { useContext, useState } from 'react';\nimport { Box, Button, IconButton, Stack, Table, TableBody, TableCell, TableHead, TableRow, Tooltip, Alert, Grow, Switch, Chip } from '@mui/material';\n\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddAlarmIcon from '@mui/icons-material/AddAlarm';\n\nimport { useTheme } from '@mui/material';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\n\nimport AlertTypes from './AlertTypes';\nimport { ThresholdAlertTypes } from './AlertTypes';\n\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport AlertModificationDialog from './AlertModificationDialog/AlertModificationDialog';\n\nimport { CrudTypes, SharedColumnHeader } from './Utils';\nimport { TransitionGroup } from 'react-transition-group';\n\nimport { fetchDataFromURL } from '../../../API/ApiFetch';\nimport { GeneralAPIendpoints, RESTmethods } from '../../../API/Utils';\nimport { DashboardContext } from '../../../ContextProviders/DashboardContext';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { getAlertsApiUrl } from '../../../API/ApiUrls';\nimport { useSnackbar } from 'notistack';\nimport { UserRoles } from '../../Account/Utils';\nimport { DataTypes } from '../../../Utils/AirQuality/DataTypes';\nimport { DAYS_OF_WEEK } from './AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK';\nimport { returnHoursFromMinutesPastMidnight } from '../../TimeRange/TimeRangeUtils';\n\nconst returnDaysOfWeekString = (days_of_week) => {\n  if (!days_of_week || !isValidArray(days_of_week)) return \"N/A\";\n\n  // Case where all days are selected\n  if (days_of_week.length === DAYS_OF_WEEK.length) return \"Everyday\";\n\n  // Check if two days are missing and if both are weekend days\n  const missingDays = DAYS_OF_WEEK.filter(d => !days_of_week.includes(d.value));\n  if (missingDays.length === 2 && missingDays.every(d => [5, 6].includes(d.value))) {\n    return \"Only weekdays\";\n  }\n\n  // Default case: map the selected days to their short labels\n  return days_of_week\n    .map(day => DAYS_OF_WEEK.find(d => d.value === day)?.label.slice(0, 2))\n    .join(', ');\n};\n\nconst returnCreatedByString = (owner_role, self_is_owner) => {\n  if (self_is_owner === true) return \"You\";\n\n  if (owner_role) return UserRoles[owner_role].name;\n  else return \"N/A\";\n}\n\nconst returnAlertNotModifiableString = (owner_role, is_allowed_to_modify) => {\n  if (is_allowed_to_modify) return \"\";\n\n  if (owner_role && UserRoles[owner_role]) {\n    return `${UserRoles[owner_role].name} added your email to this school-wide alert. For edit or removal, please reach out to ${UserRoles[owner_role].name}.`;\n  }\n};\n\nconst AlertsTable = (props) => {\n  const { selectedAlert, setSelectedAlert, setAlerts, addChildToAlerts } = useAirQualityAlert();\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { enqueueSnackbar } = useSnackbar()\n\n  const { alertTypeKey, alertsForTable } = props;\n\n  const theme = useTheme();\n\n  const [openAlertModificationDialog, setOpenAlertModificationDialog] = useState(false);\n  const [crudType, setCrudType] = useState(null);\n\n  const handleModifyClick = ({ alert, crudType }) => {\n    setSelectedAlert(alert);\n    setCrudType(crudType);\n    setOpenAlertModificationDialog(true);\n  };\n\n  const handleClose = () => {\n    setOpenAlertModificationDialog(false);\n    setSelectedAlert(getAlertDefaultPlaceholder(alertTypeKey));\n  }\n\n  const handleEnableClick = ({ alert }) => {\n    const currentIsEnabled = alert[AirQualityAlertKeys.is_enabled];\n    const newIsEnabled = !currentIsEnabled;\n\n    fetchDataFromURL({\n      url: getAlertsApiUrl({\n        endpoint: GeneralAPIendpoints.alerts,\n        school_id: currentSchoolID,\n        alert_id: alert[AirQualityAlertKeys.id]\n      }),\n      restMethod: RESTmethods.PUT,\n      body: {\n        ...alert,\n        [AirQualityAlertKeys.is_enabled]: newIsEnabled\n      }\n    }).then((data) => {\n      setAlerts(prevAlerts => {\n        const updatedAlerts = prevAlerts.map(prevAlert =>\n          prevAlert[AirQualityAlertKeys.id] === alert[AirQualityAlertKeys.id] ? data : prevAlert\n        )\n        return addChildToAlerts(updatedAlerts);\n      }\n      );\n      enqueueSnackbar(`This alert will be ${newIsEnabled ? \"enabled\" : \"disabled\"}`, SnackbarMetadata.success);\n    }).catch((error) => {\n      enqueueSnackbar(error.message || `There was an error ${newIsEnabled ? \"enabling\" : \"disabling\"} this alert, try again!`, SnackbarMetadata.error);\n    });\n  }\n\n  return (\n    <>\n      <Stack spacing={2} alignItems=\"center\">\n        <Box sx={{ width: \"100%\", overflowX: 'auto' }}>\n          {\n            isValidArray(alertsForTable) ?\n              (\n                <Table size=\"small\" sx={{ my: 1 }}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ px: 0 }} />\n\n                      <TableCell>\n                        {SharedColumnHeader.location}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.dataType}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.selectedDaysOfWeek}\n                      </TableCell>\n\n                      <TableCell>\n                        {AlertTypes[alertTypeKey]?.tableColumnHeader || \"\"}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.createdBy}\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n\n                  <TransitionGroup component={TableBody}>\n                    {isValidArray(alertsForTable) ? alertsForTable.map((alert, index) => (\n                      <Grow key={index}>\n                        <TableRow\n                          sx={{\n                            background: alert[AirQualityAlertKeys.id] === selectedAlert[AirQualityAlertKeys.id] && theme.palette.background.NYUpurpleLight,\n                            textDecoration: alert[AirQualityAlertKeys.is_enabled] === false ? \"line-through\" : \"none\"\n                          }}\n                        >\n                          <TableCell sx={{ px: 0 }}>\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Click to ${alert[AirQualityAlertKeys.is_enabled] ? \"disable\" : \"enable\"} alert`\n                              }\n                            >\n                              {/* Wrap <Switch> in a <span> so that <Tooltip> will still display even if it's disabled */}\n                              <span\n                                onClick={() => {\n                                  if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n                                    enqueueSnackbar(\n                                      returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify]),\n                                      SnackbarMetadata.warning\n                                    );\n                                    return;\n                                  }\n                                  handleEnableClick({ alert });\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <Switch\n                                  size='small'\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  checked={alert[AirQualityAlertKeys.is_enabled]}\n                                />\n                              </span>\n                            </Tooltip>\n\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Edit alert`\n                              }\n                            >\n                              <span\n                                onClick={() => {\n                                  if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n                                    enqueueSnackbar(\n                                      returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify]),\n                                      SnackbarMetadata.warning\n                                    );\n                                    return;\n                                  }\n                                  handleModifyClick({ alert, crudType: CrudTypes.edit })\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <IconButton\n                                  aria-label=\"edit\"\n                                  size=\"small\"\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n                                >\n                                  <EditIcon />\n                                </IconButton>\n                              </span>\n                            </Tooltip>\n                          </TableCell>\n\n                          <TableCell sx={{ textTransform: 'capitalize' }}>\n                            {alert[AirQualityAlertKeys.location_short]}\n                          </TableCell>\n\n                          <TableCell>\n                            {\n                              Object.keys(DataTypes)\n                                .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                .map(key => DataTypes[key].name_title)[0]\n                            }\n                          </TableCell>\n\n                          <TableCell>\n                            {returnDaysOfWeekString(alert[AirQualityAlertKeys.days_of_week])}\n                          </TableCell>\n\n                          {alertTypeKey === AlertTypes.threshold.id ? (\n                            <TableCell>\n                              {ThresholdAlertTypes[alert[AirQualityAlertKeys.alert_type]].sign} {alert[AirQualityAlertKeys.threshold_value]}\n                              &nbsp;\n                              {\n                                Object.keys(DataTypes)\n                                  .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                  .map(key => DataTypes[key].unit)[0]\n                              }\n                            </TableCell>\n                          ) : null}\n\n                          {alertTypeKey === AlertTypes.daily.id ? (\n                            <TableCell>\n                              {returnHoursFromMinutesPastMidnight(alert[AirQualityAlertKeys.minutespastmidnight])}\n                            </TableCell>\n                          ) : null}\n\n                          <TableCell>\n                            <Chip\n                              label={\n                                returnCreatedByString(\n                                  alert[AirQualityAlertKeys.owner_role],\n                                  alert[AirQualityAlertKeys.self_is_owner]\n                                )\n                              }\n                              size='small'\n                            />\n                          </TableCell>\n                        </TableRow>\n                      </Grow>\n                    )) : null\n                    }\n                  </TransitionGroup>\n                </Table>\n              ) : (\n                <Alert\n                  severity='warning'\n                  sx={{\n                    mt: 2\n                  }}>\n                  No {AlertTypes[alertTypeKey].name.toLowerCase()} alert has been set up\n                </Alert>\n              )\n          }\n        </Box>\n\n        <Button\n          variant=\"outlined\"\n          startIcon={<AddAlarmIcon />}\n          fullWidth\n          sx={{ maxWidth: \"sm\", textTransform: 'uppercase' }}\n          onClick={() => handleModifyClick({\n            alert: getAlertDefaultPlaceholder(alertTypeKey), crudType: CrudTypes.add\n          })}\n        >\n          Add Alert\n        </Button>\n      </Stack>\n\n      <AlertModificationDialog\n        alertTypeKey={alertTypeKey}\n        crudType={crudType}\n        openAlertModificationDialog={openAlertModificationDialog}\n        handleClose={handleClose}\n      />\n    </>\n  );\n};\n\nexport default AlertsTable;","import { useState } from 'react';\nimport { Box, Tab, useMediaQuery } from '@mui/material';\n\nimport StyledTabs from '../../StyledTabs';\nimport AlertsTable from './AlertsTable';\n\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\nimport AlertTypes from './AlertTypes';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\n\nfunction AlertTab(props) {\n  const { children, value, index, alertType, alertsArray, ...other } = props;\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`alert-tabpanel-${alertType.id}`}\n      aria-labelledby={`alert-tab-${alertType.id}`}\n      width=\"100%\"\n      {...other}\n    >\n      <AlertsTable\n        alertTypeKey={alertType.id}\n        alertsForTable={alertsArray}\n      />\n    </Box>\n  );\n}\n\nexport default function AlertsTabs() {\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const { setSelectedAlert } = useAirQualityAlert();\n\n  const handleTabChange = (_, newVal) => {\n    setCurrentTab(newVal);\n    setSelectedAlert(\n      getAlertDefaultPlaceholder(AlertTypes[Object.keys(AlertTypes)?.[newVal]]?.id)\n    );\n  };\n\n  const { alerts } = useAirQualityAlert();\n\n  // Helper function to return filered alert:\n  // - based on alert_type (threshold or daily, depends on which alert tab is visible)\n  // - only return alert that is not child to another alert\n  const returnFilteredAlerts = (alertTypeKey) => {\n    const filteredAlerts = alerts.filter((alert) => {\n      if (!alert) return null;\n\n      const alertType = alert[AirQualityAlertKeys.alert_type]?.toLowerCase();\n      const parentAlertId = alert[AirQualityAlertKeys.parent_alert_id];\n\n      if (alertType.includes(alertTypeKey) && (parentAlertId === null || parentAlertId === undefined)) return alert;\n      else return null;\n    });\n\n    const alertsLength = isValidArray(filteredAlerts) ? filteredAlerts.length : \"0\";\n\n    return {\n      array: filteredAlerts,\n      alertsLength\n    }\n  }\n\n  return (\n    <Box>\n      <StyledTabs\n        value={currentTab}\n        onChange={handleTabChange}\n        variant={smallScreen ? 'fullWidth' : 'standard'}\n        smallFontSize=\"0.825rem\"\n      >\n        {Object.values(AlertTypes).map((type) => {\n          const filteredAlerts = returnFilteredAlerts(type.id);\n          return (\n            <Tab\n              key={type.id}\n              value={type.index}\n              icon={type.icon}\n              label={`${type.name} (${filteredAlerts?.alertsLength})`}\n              iconPosition=\"start\"\n              sx={{ py: 0 }}\n            />\n          )\n        }\n        )}\n      </StyledTabs>\n\n      {Object.values(AlertTypes).map((type) => {\n        const filteredAlerts = returnFilteredAlerts(type.id);\n        return (\n          <AlertTab\n            key={type.id}\n            alertType={type}\n            value={currentTab}\n            index={type.index}\n            alertsArray={filteredAlerts.array}\n          />\n        )\n      }\n      )}\n    </Box>\n  );\n}\n","import { Stack, Typography } from '@mui/material';\nimport NotificationImportantIcon from '@mui/icons-material/NotificationImportant';\n\nimport CustomDialog from '../../CustomDialog/CustomDialog';\nimport EmailsInput from './EmailsInput';\nimport AlertsTabs from './AlertsTabs';\nimport { useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\nimport useLoginHandler from '../../Account/useLoginHandler';\nimport { useContext } from 'react';\nimport { UserContext } from '../../../ContextProviders/UserContext';\nimport { UserRoles } from '../../Account/Utils';\n\n\nexport default function AirQualityAlerts({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { fetchAlerts, hasFetchedAlerts, setHasFetchedAlerts } = useAirQualityAlert();\n\n  const { user } = useContext(UserContext);\n\n  const isModifiable = [UserRoles.admin.id, UserRoles.school.id].includes(user?.user_role);\n\n  return (\n    <CustomDialog\n      buttonIcon={<NotificationImportantIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Alerts\"\n      dialogTitle=\"Air quality alerts\"\n      dialogOpenHandler={(action) => {\n        const isLoggedIn = handleRestrictedAccess(action);\n        if (isLoggedIn && !hasFetchedAlerts) {\n          fetchAlerts();\n          setHasFetchedAlerts(true);\n        }\n      }}\n    >\n      <Stack width=\"100%\" spacing={isModifiable ? 5 : 2}>\n        <AlertsTabs />\n\n        {isModifiable ? <EmailsInput /> : (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Alerts will be sent to your email address: <b>{user?.email}</b>\n          </Typography>\n        )}\n      </Stack>\n    </CustomDialog>\n  );\n}\n","import { useEffect, useRef, useCallback, useContext, useState } from \"react\";\nimport { AppRoutes } from \"../../Utils/AppRoutes\";\nimport { LoginTypes } from \"../Account/Utils\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport EmailVerificationDialog from \"./EmailVerificationDialog\";\nimport { useSnackbar } from \"notistack\";\n\nconst LoginPopupHandler = ({ onLoginSuccess, children }) => {\n    const popupRef = useRef(null);\n    const { enqueueSnackbar } = useSnackbar()\n    const { setAuthenticationState, setUser } = useContext(UserContext);\n\n    const [showVerificationDialog, setShowVerificationDialog] = useState(false);\n    const [email, setEmail] = useState(\"\");\n\n    const openLoginPopup = useCallback(() => {\n        const width = 500;\n        const height = 600;\n        const left = (window.screen.width - width) / 2;\n        const top = (window.screen.height - height) / 2;\n\n        const popup = window.open(\n            AppRoutes.login,\n            \"Login\",\n            `width=${width},height=${height},top=${top},left=${left}`\n        );\n\n        if (popup) {\n            popup.focus();\n            popupRef.current = popup;\n\n            const intervalId = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(intervalId);\n                    window.removeEventListener(\"message\", handleMessage);\n                    popupRef.current = null;\n                }\n            }, 500);\n        } else {\n            alert(\"Popup blocked. Please enable popups for login.\");\n        }\n    }, []);\n\n    const handleMessage = useCallback(\n        (event) => {\n            if (event.origin === window.location.origin && event.data.type === LoginTypes.password) {\n                if (event.data.success) {\n                    const user = event.data.user;\n\n                    setAuthenticationState({\n                        checkedAuthentication: true,\n                        authenticated: true,\n                    });\n                    setUser(user);\n\n                    if (user.message) {\n                        enqueueSnackbar(user.message, SnackbarMetadata.success);\n                    }\n\n                    if (user.is_verified === false) {\n                        setShowVerificationDialog(true);\n                        setEmail(user.email);\n                    }\n\n                    onLoginSuccess?.();\n                }\n            }\n        },\n        [onLoginSuccess]\n    );\n\n    useEffect(() => {\n        window.addEventListener(\"message\", handleMessage);\n        return () => {\n            window.removeEventListener(\"message\", handleMessage);\n        };\n    }, [handleMessage]);\n\n    return (\n        <>\n            {children({\n                openLoginPopup,\n            })}\n            <EmailVerificationDialog\n                open={showVerificationDialog}\n                email={email}\n            />\n        </>\n    );\n};\n\nexport default LoginPopupHandler;\n","import { Grid } from \"@mui/material\";\nimport ScreenDropDownMenu from \"../../Components/AirQuality/AirQualityScreen/ScreenDropDownMenu\";\nimport DatasetDownloadDialog from \"../../Components/DatasetDownload/DatasetDownloadDialog\";\nimport AirQualityAlerts from \"../../Components/AirQuality/AirQualityAlerts/AirQualityAlert\";\nimport LoginPopupHandler from \"../../Components/Account/LoginPopupHandler\";\nimport useLoginHandler from \"../../Components/Account/useLoginHandler\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\nimport { AirQualityAlertProvider } from \"../../ContextProviders/AirQualityAlertContext\";\nimport { useSnackbar } from \"notistack\";\n\nconst ProjectReservedArea = () => {\n    const { loggedIn } = useLoginHandler();\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleLoginSuccess = () => {\n        enqueueSnackbar(\"You can now access TV Screens, Dataset, and Alerts.\", {\n            variant: SnackbarMetadata.success.name,\n            duration: SnackbarMetadata.success.duration * 2\n        });\n    };\n\n    return (\n        <LoginPopupHandler\n            onLoginSuccess={handleLoginSuccess}\n        >\n            {({ openLoginPopup }) => (\n                <Grid container spacing={1} justifyContent=\"center\" alignItems=\"center\">\n                    <Grid item>\n                        <ScreenDropDownMenu onButtonClick={loggedIn ? null : openLoginPopup} />\n                    </Grid>\n                    <Grid item>\n                        <DatasetDownloadDialog onButtonClick={loggedIn ? null : openLoginPopup} />\n                    </Grid>\n                    <Grid item>\n                        <AirQualityAlertProvider>\n                            <AirQualityAlerts onButtonClick={loggedIn ? null : openLoginPopup} />\n                        </AirQualityAlertProvider>\n                    </Grid>\n                </Grid>\n            )}\n        </LoginPopupHandler>\n    );\n};\n\nexport default ProjectReservedArea;\n","import { Chip, Tooltip, Skeleton } from '@mui/material';\n\n// Custom Chip component to display metadata\nconst CustomChip = (props) => {\n    const { tooltipTitle, label, ...otherProps } = props;\n\n    const chip = (\n        <Chip\n            size=\"small\"\n            label={label || <Skeleton variant=\"text\" sx={{ minWidth: '5rem' }} />}\n            sx={{\n                userSelect: 'text',\n                '& .MuiChip-label': {\n                    userSelect: 'text'\n                }\n            }}\n            {...otherProps}\n        />\n    );\n\n\n    return tooltipTitle ? (\n        <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n            {chip}\n        </Tooltip>\n    ) : chip;\n}\n\nexport default CustomChip;","import { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Box, Menu, MenuItem, MenuList } from \"@mui/material\";\nimport CustomChip from \"./CustomChip\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { LocalStorage } from \"../Utils/LocalStorage\";\nimport { AppRoutes } from \"../Utils/AppRoutes\";\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../ContextProviders/UserContext\";\n\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\nimport useSchoolMetadata from \"../hooks/useSchoolMetadata\";\n\nconst SchoolSelector = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (newSchoolID) => () => {\n    if (currentSchoolID !== newSchoolID) {\n      localStorage.setItem(LocalStorage.schoolID, newSchoolID)\n\n      Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n        {\n          origin_school: currentSchoolID,\n          destination_school_id: newSchoolID,\n          origin_id: 'school_selector'\n        });\n\n      navigate(`${AppRoutes.dashboard}/${newSchoolID}`)\n    }\n    handleClose();\n  };\n\n  if (!schoolMetadata) return;\n\n  // If there is only one school, return a Chip displaying the name of that school\n  if (!Array.isArray(user.allowedSchools) || user.allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={schoolMetadata.name || \"No School Name Given\"}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  // Else, display a drop down menu that allows choosing between different schools\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={returnChipLabel(schoolMetadata.name, open)}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {user.allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nconst returnChipLabel = (name, open) => {\n  return (\n    <Box sx={{\n      '& svg': {\n        fontSize: \"1rem\", verticalAlign: \"sub\", marginLeft: \"0.25rem\"\n      }\n    }\n    }>\n      {name || \"Loading...\"}\n      {open ? (\n        <ArrowDropUpIcon />\n      ) : (\n        <ArrowDropDownIcon />\n      )}\n    </Box>\n  );\n};\n\nexport default SchoolSelector;","// import { MetadataContext } from \"../../ContextProviders/MetadataContext\";\nimport { Grid } from \"@mui/material\";\n\nimport SchoolSelector from \"../../Components/SchoolSelector\";\nimport CustomChip from \"../../Components/CustomChip\";\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n// import BarChartIcon from '@mui/icons-material/BarChart';\n// import CommentIcon from '@mui/icons-material/Comment';\n// import * as Tracking from '../../Utils/Tracking';\n// import { scrollToSection } from \"../../Components/Header/MenuItemAsNavLink\";\n// import sectionData from '../../section_data.json';\n// import { HYVOR_PAGE_NAME, NYUAD } from \"../../Utils/GlobalVariables\";\n\n// Temporarily not using HyvorTalk comment anymore\n// const GridOfMetadataChips = ({ displayCommentSection }) => {\n\n\nconst GridOfMetadataChips = () => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (!schoolMetadata) return;\n\n    // Temporarily not using HyvorTalk comment anymore\n    // const { commentCounts, fetchCommentCounts, setCommentCounts } = useContext(MetadataContext);\n    // Fetch comment count for NYUAD\n    // useEffect(() => {\n    //     if (!schoolMetadata) return;\n\n    //     const isNYUAD = schoolMetadata.school_id === NYUAD;\n    //     if (isNYUAD && !commentCounts) {\n    //         fetchCommentCounts().then((data) => {\n    //             setCommentCounts(data);\n    //         });\n    //     }\n    // }, [schoolMetadata])\n\n    return (\n        <Grid container item spacing={1} justifyContent=\"center\">\n            <Grid item>\n                <SchoolSelector />\n            </Grid>\n\n            <Grid item>\n                <CustomChip\n                    icon={<PersonIcon />}\n                    label={`${schoolMetadata.contactPerson} <${schoolMetadata.contactEmail}>`}\n                    tooltipTitle=\"Main Contact\"\n                    component=\"a\"\n                    href={`mailto:${schoolMetadata?.contactEmail}`}\n                    clickable\n                />\n            </Grid>\n\n            {/* Temporarily not using HyvorTalk comment anymore\n            {(displayCommentSection === true && commentCounts !== null) ?\n                (\n                    <Grid item>\n                        <CustomChip\n                            icon={<CommentIcon />}\n                            label={`${commentCounts[HYVOR_PAGE_NAME]} Comment${commentCounts[HYVOR_PAGE_NAME] > 1 ? \"s\" : \"\"}`}\n                            tooltipTitle=\"Number of Comments\"\n                            onClick={() => {\n                                scrollToSection(sectionData.commentSection.id);\n                                Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                                    {\n                                        destination_id: sectionData.commentSection.id,\n                                        destination_label: sectionData.commentSection.toString(),\n                                        origin_id: 'chip'\n                                    })\n                            }}\n                        />\n                    </Grid>\n                ) : null} */}\n        </Grid>\n    )\n}\n\nexport default GridOfMetadataChips;","import { Skeleton, Typography, useTheme } from \"@mui/material\";\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from \"../../Utils/UtilFunctions\";\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n\nconst ProjectDescription = () => {\n    const theme = useTheme();\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (schoolMetadata) return (\n        <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                    color: `${theme.palette.text.secondary}`\n                }\n            }}\n            gutterBottom\n        >\n            {\n                parse(schoolMetadata.description || '', {\n                    replace: replacePlainHTMLWithMuiComponents,\n                })\n            }\n        </Typography>\n    )\n    else {\n        return (\n            Array.from({ length: 3 }).map((_, index) => (\n                <Skeleton key={index} variant='text' />\n            ))\n        )\n    }\n}\n\nexport default ProjectDescription;","import { Stack, Button } from \"@mui/material\";\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\n\nconst LoadMoreButton = () => {\n    const { loadMoreCharts, setLoadMoreCharts } = useContext(DashboardContext);\n\n    if (loadMoreCharts === false) {\n        return (\n            <Stack sx={{ mt: 6, mx: 'auto', maxWidth: 'sm' }}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setLoadMoreCharts(true);\n                    }}\n                >\n                    <KeyboardArrowDownIcon sx={{ fontSize: '1rem' }} />&nbsp;Load More Charts\n                </Button>\n            </Stack>\n        )\n    }\n    else {\n        return null;\n    }\n}\n\nexport default LoadMoreButton;","import { useContext } from 'react';\nimport ChartComponentWrapper from '../../Graphs/ChartComponentWrapper';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\n\nimport { Box, Container, Divider, Grid } from '@mui/material';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQuality/AirQualityIndexLegendQuickGlance';\n\nimport sectionData from '../../section_data.json';\n\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport CurrentAQIGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIGrid';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport AQIexplanation from '../../Components/AirQuality/AQIexplanation';\nimport { AxesPickerProvider } from '../../ContextProviders/AxesPickerContext';\nimport { KAMPALA, NUMBER_OF_CHARTS_TO_LOAD_INITIALLY } from '../../Utils/GlobalVariables';\n\nimport ProjectReservedArea from './ProjectReservedArea';\nimport GridOfMetadataChips from './GridOfMetadataChips';\nimport ProjectDescription from './ProjectDescription';\nimport LoadMoreButton from './LoadMoreButton';\nimport CurrentAQIMapWithGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIMapWithGrid';\nimport { ChartAPIendpointsOrder } from '../../API/Utils';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\nimport useSchoolMetadata from '../../hooks/useSchoolMetadata';\n\n// Temporarily not using HyvorTalk comment anymore\n// import CommentSection from '../../Components/CommentSection';\n// import { HYVOR_PAGE_NAME } from '../../Utils/GlobalVariables';\n\nconst Project = () => {\n  const { currentSchoolID, loadMoreCharts } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const chartsToRender = loadMoreCharts\n    ? ChartAPIendpointsOrder.length\n    : NUMBER_OF_CHARTS_TO_LOAD_INITIALLY;\n\n  const { themePreference, temperatureUnitPreference } = useContext(PreferenceContext);\n\n  // Temporarily not using HyvorTalk comment anymore\n  // const [displayCommentSection, setDisplayCommentSection] = useState(false);\n\n  const getDashboardTitle = () => {\n    if (schoolMetadata?.school_id) return `Air Quality | ${schoolMetadata?.school_id}`\n  }\n\n  return (\n    <Box width=\"100%\">\n      <AirQualityIndexLegendQuickGlance />\n\n      <FullWidthBox backgroundColor='customAlternateBackground'>\n        <Container sx={{ pt: 2, pb: 2 }}>\n          <Grid container spacing={1.5} sx={{ mb: 4 }}>\n            <Grid item xs={12}>\n              <UppercaseTitle\n                text={getDashboardTitle()}\n                textAlign=\"center\"\n                sx={{ pb: 0 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <GridOfMetadataChips\n              // Temporarily not using HyvorTalk comment anymore\n              // displayCommentSection={displayCommentSection}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              {/* Reserved area that requires an account, even for public schools */}\n              <ProjectReservedArea />\n            </Grid>\n          </Grid>\n\n          {schoolMetadata?.has_map === true ?\n            (\n              <CurrentAQIMapWithGrid\n                currentSensorsData={currentSensorsData}\n                schoolID={currentSchoolID}\n                isOnBannerPage={false}\n                minMapHeight={\"250px\"}\n              />\n            ) : (\n              <Box textAlign=\"center\" sx={{ mb: 2 }}>\n                <CurrentAQIGrid\n                  currentSensorsData={currentSensorsData}\n                  isScreen={false}\n                  temperatureUnitPreference={temperatureUnitPreference}\n                  showHeatIndex={currentSchoolID === KAMPALA && false}\n                  showWeather={currentSchoolID === KAMPALA && false}\n                />\n              </Box>\n            )\n          }\n\n          <ProjectDescription />\n\n          <AQIexplanation />\n\n        </Container>\n      </FullWidthBox>\n\n      <Box id={sectionData.charts.id}>\n        {ChartAPIendpointsOrder.slice(0, chartsToRender).map((_, index) => (\n          <FullWidthBox\n            key={index}\n            backgroundColor={index % 2 !== 0 ? 'customAlternateBackground' : ''}\n          >\n            <Container\n              sx={{ pt: 4, pb: 4 }}\n              height=\"auto\"\n              className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n              id={`chart-${index + 1}`}\n            >\n\n              <AxesPickerProvider>\n                <ChartComponentWrapper chartID={index} />\n              </AxesPickerProvider>\n\n              {\n                // Optionally display the button to load more charts at the bottom of the last chart\n                // (if not already fetched every chart)\n                index === chartsToRender - 1 && !loadMoreCharts && <LoadMoreButton />\n              }\n            </Container>\n          </FullWidthBox>\n        ))}\n      </Box>\n      <Divider />\n\n      {/* Temporarily not using HyvorTalk comment anymore\n      {displayCommentSection === true &&\n        <FullWidthBox id={sectionData.commentSection.id} sx={{ pt: 3, pb: 4 }}>\n          <CommentSection pageID={HYVOR_PAGE_NAME} />\n        </FullWidthBox>\n      } */}\n    </Box >\n  );\n};\n\nexport default Project;\n\n","import { useEffect, useContext } from \"react\";\n\nimport Project from \"./Project/Project\";\n\nimport { MetadataContext } from \"../ContextProviders/MetadataContext\";\n\nimport { AppRoutes } from \"../Utils/AppRoutes\";\nimport { CITIESair } from \"../Utils/GlobalVariables\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst Dashboard = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  // Update the page's title based on currentSchoolID\n  useEffect(() => {\n    if (!currentSchoolID) return;\n\n    document.title = `${CITIESair} | ${currentSchoolID.toUpperCase()}`;\n  }, [currentSchoolID]);\n\n  // Update current page type\n  const { setCurrentPage } = useContext(MetadataContext);\n  useEffect(() => {\n    setCurrentPage(AppRoutes.dashboard);\n  }, [setCurrentPage]);\n\n  return (\n    <Project />\n  )\n};\n\nexport default Dashboard;","import { Skeleton, Typography } from '@mui/material';\n\nexport default function UppercaseTitle({ text, sx, ...otherProps }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1,\n        ...sx\n      }}\n      {...otherProps}\n    >\n      {text || <Skeleton variant='text' />}\n    </Typography>\n  );\n}\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { getTranslation, replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\nimport { useContext } from 'react';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\nimport { CITIESair } from '../../Utils/GlobalVariables';\n\nexport const StyledTable = styled(Table, {\n  shouldForwardProp: (prop) => prop !== 'tiny',\n})(({ theme, tiny }) => ({\n  minWidth: tiny || 700,\n  '& th, td': {\n    fontSize: tiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: tiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { themePreference, language } = useContext(PreferenceContext);\n\n  const { tiny, hideAQIDescription } = props;\n\n  const returnFormattedBreakpoints = (low, high) => {\n    if (high === Infinity) return `${low}+`;\n    else return `${low} - ${high}`;\n  }\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" tiny={tiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n\n              {!hideAQIDescription &&\n                <TableCell align=\"left\">\n                  {CITIESair}&apos; Suggested Actions\n                </TableCell>\n              }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQI_Database.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: element.color[themePreference] }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {getTranslation(element.category, language)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.aqiUS.low, element.aqiUS.high)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.rawPM2_5.low, element.rawPM2_5.high)}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(getTranslation(element.healthSuggestions.outdoors, language), {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n    </>\n  );\n}\n\nexport default AirQualityIndexTable;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(1) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n  '& .MuiAccordionSummary-content.Mui-expanded': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst TooltipText = {\n  expand: \"Click to expand section\",\n  collapse: \"Click to collapse section\"\n}\n\nconst ExpandableSection = (props) => {\n  const { title, content, icon, disabled } = props;\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n    Tracking.sendEventAnalytics(\n      isExpanded ? Tracking.Events.expandSection : Tracking.Events.collapseSection,\n      {\n        section: title\n      }\n    );\n  };\n\n  return (\n    <Box sx={{\n      '& .MuiAccordion-root.Mui-disabled': {\n        backgroundColor: \"transparent\"\n      }\n    }}>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        disabled={disabled}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ArrowDropDownIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? TooltipText.collapse : TooltipText.expand} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body1\">\n              {title}\n              <Box component=\"span\" sx={{ ml: 0.25 }}>\n                {icon}\n              </Box>\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails sx={{ pt: 0 }}>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;","import { useContext } from 'react';\nimport { Typography, Box } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport AirQualityIndexTable from './AirQualityIndexTable';\nimport ExpandableSection from '../ExpandableSection/ExpandableSection';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport InfoIcon from '@mui/icons-material/Info';\n\nconst Explanation = {\n  title: \"Explanation of the US Air Quality Index (AQI) for PM2.5\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration, recently updated in February 2024: <sup>[1]</sup><ul><li><b>Annual average</b>: 9.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nconst AQIexplanation = () => {\n  const { themePreference } = useContext(PreferenceContext);\n\n  return (\n    <ExpandableSection\n      title={Explanation.title}\n      icon={<InfoIcon sx={{ fontSize: \"1rem\" }} />}\n      content={(\n        <Box>\n          <AirQualityIndexTable themePreference={themePreference} />\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mt: 2 }}\n          >\n            {parse(Explanation.subtitle, {\n              replace: replacePlainHTMLWithMuiComponents,\n            })}\n          </Typography>\n          <ExpandableSection\n            title={\"Reference\"}\n            content={(\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {parse(Explanation.reference, {\n                  replace: replacePlainHTMLWithMuiComponents,\n                })}\n              </Typography>\n            )}\n          />\n        </Box>\n      )}\n    />\n  )\n};\n\nexport default AQIexplanation;"],"names":["useSchoolMetadata","currentSchoolID","useContext","DashboardContext","useQuery","queryKey","queryFn","async","url","getApiUrl","endpoint","GeneralAPIendpoints","schoolmetadata","school_id","fetchDataFromURL","enabled","staleTime","placeholderData","prev","SELECT_ALL","SeriesSelector","props","items","itemsFromChart","selectorID","allowMultiple","seriesLabel","onSeriesSelection","displayChip","theme","useTheme","isLargeScreen","useMediaQuery","breakpoints","up","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","setItems","useState","selectAll","setSelectAll","useEffect","prevItems","prevMap","Map","map","i","label","selected","newIt","_objectSpread","has","get","every","item","handleChange","event","target","value","includes","updatedItems","index","newDataColumns","selectedItems","filter","some","selectedItem","handleItemToggle","existingItem","_jsxs","Stack","direction","alignItems","gap","width","children","_jsx","Typography","color","sx","textTransform","spacing","FormControl","minWidth","borderRadius","concat","shape","size","Select","labelId","id","multiple","onChange","renderValue","VisibilityIcon","fontSize","text","secondary","variant","length","renderedLabel","py","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","fontWeight","pl","Switch","Grid","container","down","display","Chip","onDelete","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","_ref","isPortrait","isSmaller","returnChartControlUI","_chartControl$options","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","title","vAxis","annotations","legend","pointSize","normalizeColorStops","_ref2","colors","optionalMinValue","optionalMaxValue","isValidArray","offset","totalColors","clampedStops","colorStop","offsets","normalizedOffsets","minOffset","maxOffset","normalizeColorStopOffsets","Math","min","max","rgbToHex","r","g","b","x","hex","toString","join","interpolateColor","color1","color2","factor","element","result","slice","round","generateDiscreteColorGradientArray","_ref3","numSteps","normalizedColors","forEach","replace","m","exec","parseInt","hexToRgb","colorArray","stepPositions","Array","from","_","pos","offset1","offset2","j","interpolatedColor","push","generateCssBackgroundGradient","_ref4","gradientDirection","BackgroundGradient","_ref6","height","visibility","x1","y1","x2","y2","stopColor","valueRange","colorAxis","minValue","maxValue","rangeBoxMinValue","rangeBoxMaxValue","undefined","calculateMarkerPositionOnRangeBox","labelStyle","lineHeight","textAlign","whiteSpace","bottomLabelStyle","triangleStyle","borderLeft","borderRight","topTriangleStyle","top","bottomTriangleStyle","borderBottom","Box","my","float","right","border","left","day","tooltipText","dateRange","inFirstTwoRowsOfChart","tooltipBoxRef","useRef","current","parentDiv","parentElement","ref","className","mr","parse","replacePlainHTMLWithMuiComponents","getCalendarChartMargin","_options$legend","_options$colorAxis","_options$colorAxis2","_options$colorAxis3","_options$colorAxis4","dataArray","valueRangeBoxTitle","windowSize","setDateRange","setValueRange","calendarHeight","setCalendarHeight","thisDateRange","dateStrings","reduce","getDateRangeForCalendarChart","values","getValueRangeForCalendarChart","numberOfYears","Date","getFullYear","calendarChartMargin","totalHeight","displayLegend","dateStr","date","dayOfWeek","getDay","isFirstTwoDaysOfWeek","firstYear","isInFirstYear","calendarCellColors","gradientSteps","GoogleChartStyleWrapper","ValueRangeBox","overflowY","ResponsiveCalendar","data","to","emptyColor","align","fill","margin","yearSpacing","monthBorderColor","primary","monthBorderWidth","daySpacing","dayBorderWidth","tooltip","tooltipData","find","DOMParser","parseFromString","body","innerHTML","TooltipCalendarChart","today","yesterday","range","startDate","startOfDay","addHours","endDate","last14Days","addDays","endOfDay","last30Days","last365Days","allTime","minDateOfDataset","formattedMinDate","format","returnCustomStaticRanges","aggregationType","AggregationType","minute","month","year","AggregationTypeMetadata","maxDays","hour","Infinity","StyledDateRangePicker","styled","Paper","shouldForwardProp","prop","showPickerPanel","smallScreen","padding","maxWidth","boxShadow","action","flexDirection","main","customBackground","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","content","backgroundImage","pulse","keyframes","_templateObject","_taggedTemplateLiteral","AggregationTypeToggle","setAggregationType","extraSmallScreen","aggregationTypesToShow","Object","type","KAMPALA","ToggleButtonGroup","fullWidth","exclusive","newType","orientation","_AggregationTypeMetad","ToggleButton","px","RadioButtonCheckedIcon","AQI_Database","Light","animation","chartID","allChartsConfigs","chartConfig","getChartApiUrl","queryParams","chartIndex","isFirstRequest","setIsFirstRequest","enqueueSnackbar","useSnackbar","isFetching","useChartData","updateIndividualChartConfigQueryParams","key","defaultRange","isSameDay","maxAllowedDays","differenceInDays","SnackbarMetadata","error","formattedDates","startDateObject","endDateObject","returnFormattedDates","setShowPickerPanel","paperRef","handleClickOutside","contains","document","addEventListener","removeEventListener","_Fragment","xs","sm","lg","flex","minHeight","elevation","transition","DateRangePicker","ranges","selection","staticRanges","createStaticRanges","inputRanges","rangeColors","minDate","maxDate","months","showMonthAndYearPickers","fixedHeight","preventSnapRefocus","startDatePlaceholder","endDatePlaceholder","editableDateInputs","showMonthArrow","weekStartsOn","AxesPickerContext","createContext","AxesPickerProvider","setHAxis","setVAxis","contextValue","useMemo","Provider","SELECT_MIN_WIDTH","LeftSelect","between","RightSelect","setIndividualChartConfig","allowedAxes","selectedAxes","dataType","shouldDisableApplyButton","setShouldDisableApplyButton","receivedHAxis","receivedVAxis","shouldDisableOption","option","allowedDataTypes","rowGap","columnGap","InputLabel","autoWidth","sensor","Button","applyChanges","ChartAPIendpointsOrder","sensorX","sensorY","customMessage","selectableAxes","messagePrefix","messageSuffix","Alert","severity","component","returnHoursFromMinutesPastMidnight","minutes","floor","padStart","HOURS","minutesPastMidnight","PREDEFINED_TIMERANGES","allday","start","end","timeRangeLabel","schoolHour","custom","SimplePicker","icon","isExtraSmall","otherProps","_objectWithoutProperties","_excluded","verticalAlign","marginLeft","is","timeRange","defaultTimeRange","isResponsive","hasTitle","displayFromToPickers","setDisplayFromToPickers","startTime","endTime","predefinedRange","setPredefinedRange","match","handleModeChange","useCallback","newMode","WatchLaterIcon","mt","idx","arr","e","h","setTimeRange","TimeRangeSelector","newRange","SubChart","_chartData$subcharts","chartData","selectedDataType","google","GoogleContext","dataTable","setDataTable","chartWrapper","setChartWrapper","controlWrapper","setControlWrapper","previousChartData","setPreviousChartData","isFirstRender","setIsFirstRender","shouldRenderChart","setShouldRenderChart","renderChartNow","setRenderChartNow","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","initialVAxisRange","setInitialVAxisRage","__","random","substr","_chartData$subcharts$","_chartData$options","_chartData$options2","_chartData$options2$b","_chartData$options3","_chartData$options4","_chartData$options4$c","_chartData$options4$c2","_chartData$options5","_chartData$options5$c","_chartData$options5$c2","_chartData$options6","_chartData$options6$c","_chartData$options6$c2","_chartData$options7","_chartData$options7$c","_chartData$options7$c2","_chartData$options8","_chartData$options8$w","_chartData$options9","_chartData$options9$w","_chartData$options$le","_chartData$options0","_chartData$options0$l","_options$vAxis$format","_options$vAxis","_options$vAxis$title","_options$vAxis2","_options$vAxis$viewWi","_options$vAxis3","_options$vAxis3$viewW","_options$vAxis$viewWi2","_options$vAxis4","_options$vAxis4$viewW","_options$vAxis$viewWi3","_options$vAxis5","_options$vAxis5$viewW","_options$hAxis$title","_options$hAxis","_options$vAxis6","_options$vAxis7","_options$vAxis7$gridl","_options$hAxis2","_options$hAxis3","_options$hAxis3$gridl","_options$hAxis4","_options$hAxis5","_options$hAxis5$gridl","_options$annotations","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","trigger","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","viewWindow","slantedText","slantedTextAngle","optionsColors","series","_serie","serie","trendlines","_item","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","colorAxes","_unused","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","ry","annotationBoxFill","fillOpacity","returnGenericOptions","calendarDataArray","setCalendarDataArray","NivoCalendarChart","returnSelectedDataType","dataTypeKey","dataTypes","showUnit","NoChartToRender","LoadingAnimation","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","simulatedEvent","MouseEvent","bubbles","cancelable","view","window","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","isMounted","controlDOM","querySelector","touchEvent","capture","addTouchEventListenerForChartControl","seriesSelector","dateRangePicker","timeRangeSelector","formatters","hasAtLeastOneAuxillaryControl","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","_options$series2","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","getColumnRange","sourceColumn","isNaN","_allInitialColumns","_chartWrapper","_controlWrapper","hiddenSeriesObject","enableInteractivity","visibleInLegend","currentControlOptions","getOptions","newViewColumns","dataColumn","indexIn_","role","setView","newOptions","selectedSeriesCount","JSON","stringify","_shouldRenderChart","visualization","arrayToDataTable","hasOwnProperty","numberFormat","NumberFormat","numberFormatter","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","containerId","thisControlWrapper","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","ControlWrapper","bind","initAllInitialColumns","initDataColumns","prevSelections","c","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","indexInAllInitialColumns","defaultSeriesToDisplayInitially","dataCols","_options$series","_options$series$col$s","getInitialColumns","gradientBackgroundColor","gradientBackgroundId","svgFillGradient","_options$vAxis2$viewW","_ref5","generateSvgFillGradient","ml","CustomDateRangePicker","AxesPicker","TimeRangeSelectorWrapperForDataHook","parseFloat","wordLimit","reference","isExpanded","setIsExpanded","isMobile","subtitleRef","words","split","displayText","lastFullStop","lastIndexOf","ClickAwayListener","onClickAway","subtitleParent","closest","chartElements","Set","_target","tagName","parentNode","isClickWithinSharedParent","cursor","textDecoration","anchorEl","setAnchorEl","name_title","open","Boolean","handleClose","currentTarget","ArrowDropDownIcon","Menu","onClose","MenuListProps","handleMenuItemClick","Tabs","smallFontSize","ChartStyleWrapper","mode","overflowX","scrollbarGutter","StyledMenuItem","isLoading","isSmallWidth","setIsPortrait","matchMedia","matches","setWindowSize","innerWidth","innerHeight","currentTab","setCurrentTab","previousTab","setPreviousTab","dropdownMenuTabIndex","setDropdownMenuTabIndex","dropdownMenuCurrentTitle","setDropdownMenuCurrentTitle","setAllowedDataTypes","setSelectedDataType","chartHeight","chartMaxHeight","initializeAllowedDataTypes","name_short","unit","DataTypes","cleanupResize","setupResizeListener","DEBOUNCE_IN_MILLISECONDS","timeoutID","handleWindowResize","clearTimeout","setTimeout","optionalText","DataTypeDropDownMenu","pointerEvents","renderMultipleSubcharts","needsDropdownMenu","MAX_NUM_TABS_TO_DISPLAY","subchartsDataForTabs","subchartsDataForDropDownMenu","shouldDisplayThisSubchart","StyledTabs","handleTabChange","newIndex","Tab","subchartTitle","ExpandMoreIcon","subchartTitleShort","handleDropdownMenuSelection","WebkitOverflowScrolling","currentSubchart","mb","CollapsibleSubtitle","getSubtitles","subtitle","subchartSubtitle","getReferences","_chartData$subcharts$2","AirQualityIndexLegendQuickGlance","handlePopperOpen","Tracking","airQualityIndexLegendQuickGlance","handlePopperClose","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","AirIcon","Popper","placement","keepMounted","TransitionProps","Fade","timeout","mx","AirQualityIndexTable","tiny","hideAQIDescription","openLoginPopup","authenticationState","user","UserContext","loggedIn","authenticated","checkedAuthentication","handleRestrictedAccess","allowedSchools","school","toUpperCase","onButtonClick","schoolMetadata","useLoginHandler","navigate","useNavigate","screens","handleSingleScreenClick","_screens$","screen_name","TvIcon","handleMenuClose","screen","screenName","location_long","buttonIcon","buttonIconAria","buttonLabel","buttonVariant","trackingEvent","dialogTitle","dialogOpenHandler","dialogCloseHandler","displaySchoolID","iconOnly","setOpen","onOpen","Tooltip","IconButton","Dialog","fullScreen","DialogActions","ChevronLeftIcon","DialogTitle","DialogContent","DatasetDownloadDialog","currentSensorsData","useCurrentSensorsData","sensorsDatasets","updateSensorsDatasets","previewingDataset","setPreviewingDataset","acc","_item$sensor$last_see","location_short","location_type","last_seen","rawDatasets","keys","reverse","datasetAcc","datasetKey","sample","full","CustomDialog","DataObjectIcon","rawDatasetButtonClicked","DatasetSelectorAndPreviewer","schoolID","fontStyle","CITIESair","Link","href","firstSensor","initialDatasetType","datasetType","getRawDatasetUrl","sensor_location_short","isSample","extension","SupportedFetchExtensions","csv","needsAuthorization","then","tmp","catch","console","log","md","DatasetsTable","PreviewDataset","Table","tableLayout","TableHead","TableRow","TableCell","TableBody","Dataset","isPreviewing","selectedDatasetType","setSelectedDatasetType","fetchThisDataset","NYUpurpleLight","setThisSensorToPreview","selectedVal","disablePortal","charAt","toLowerCase","previewingDatasetName","setPreviewingDatasetName","csvFileName","setCsvFileName","isDatasetLoading","setIsDatasetLoading","convertCSVforDownload","dataset","blob","Blob","URL","createObjectURL","downloadLink","createElement","download","appendChild","click","revokeObjectURL","removeChild","formattedData","setFormattedData","rowNumber","setRowNumber","_sensorsDatasets$prev","_sensorsDatasets$prev2","csvData","lines","headers","rows","dateString","row","fontFamily","gutterBottom","pt","marginTop","userSelect","downloadPreviewingDataset","fetchedDataset","rawDatasetDownloaded","dataset_type","DownloadIcon","compareArrays","arr1","arr2","EmailsInput","alertEmails","alertsEmails","queryClient","useQueryClient","saveEmailsMutation","useMutation","mutationFn","restMethod","RESTmethods","POST","emailsToSave","onSuccess","setQueryData","success","onError","localEmails","setLocalEmails","emailsListChanged","setEmailsListChanged","currentEmail","setCurrentEmail","menuAnchor","setMenuAnchor","saveButtonTooltipTitle","setSaveButtonTooltipTitle","handleAddEmail","passedEmail","email","trim","validateEmail","newEmails","warning","handleDeleteEmail","handleBeforeUnload","returnValue","wrap","flexWrap","handleMenuOpen","TextField","onKeyUp","onPaste","pastedText","clipboardData","getData","placeholder","InputProps","disableUnderline","enterTouchDelay","_emails","mutate","isPending","CircularProgress","disableShrink","AlertTypes","threshold","name","tableColumnHeader","SpeedIcon","daily","CalendarMonthIcon","ThresholdAlertTypes","below_threshold","sign","above_threshold","AirQualityAlertContext","AirQualityAlertKeys","getAlertDefaultPlaceholder","localAlertType","localOppositeAlertType","alert_type","arguments","AirQualityAlertProvider","selectedAlert","setSelectedAlert","editingAlert","setEditingAlert","allowedDataTypesForSensor","setAllowedDataTypesForSensor","alerts","setAlerts","hasFetchedAlerts","setHasFetchedAlerts","returnAllowedDataTypesForThisSensor","sensors","sensorData","elem","sensor_id","allowedDataTypesForThisSensor","addChildToAlerts","processed","alert","parent","a","fetchAlerts","getAlertsApiUrl","useAirQualityAlert","CrudTypes","SharedColumnHeader","AlertDeletionDialog","onConfirmedDelete","DialogContentText","DialogData","primaryButtonLabel","errorMessage","successMessage","contentText","maxLength","showTip","currentLength","multiline","minRows","maxRows","inputProps","DAYS_OF_WEEK","CustomPickersDay","PickersDay","common","white","dark","CustomDayComponent","selectedDates","other","isSelected","dayjs","MultiDaysCalendarPicker","parsedSelectedDates","len","LocalizationProvider","dateAdapter","AdapterDayjs","localeText","calendarWeekNumberHeaderText","calendarWeekNumberText","weekNumber","DateCalendar","displayWeekNumber","slots","dayProps","selectionState","disableHighlightToday","startOf","DateSelector","daysOfWeek","excludedDates","handleDaysOfWeekChange","handleExcludedDatesChange","rowSpacing","columnSpacing","arrow","ThresholdSlider","defaultValue","stepsForThreshold","marks","backgroundCssGradient","invertSelection","showInput","inputUnit","valueLabelDisplay","sliderRangeMin","setSliderRangeMin","sliderRangeMax","setSliderRangeMax","nearestDataIndex","setNearestDataIndex","setError","helperText","setHelperText","findNearestDataIndex","val","greaterMarks","mark","nearestMark","curr","indexOf","localSliderRangeMin","localSliderRangeMax","stripedGradient","sliderSX","black","paper","paperBackgroundGradient","Number","step","Slider","getAriaLabel","handleSliderChange","newValue","ThresholdComponentWrapper","handleValueChange","placeholderValueBeforeDataTypeSelection","disabledSlider","language","PreferenceContext","thresholdSlider","currentDataTypeKey","dataTypeColorAxis","color_axis","defaultValueForAlert","database","DataTypeKeys","voc","VOC_Database","aqi","pm2_5","pm10_raw","co2","heat_index_C","HeatIndex_Database","threshold_mapping_name","low","getTranslation","category","MaxOnceADayCheckbox","FormGroup","FormControlLabel","FormHelperText","ThresholdTypeToggle","currentAlertType","others","thresholdAlertType","ThresholdType","_excluded2","returnFormattedStatusString","status","tense","AlertPropertyComponents","_schoolMetadata$senso","_DialogData$crudType","_editingAlert$AirQual","_editingAlert$AirQual2","alertTypeKey","crudType","allSensorsOfSchool","capitalizePhrase","isDisabled","PlaceIcon","_theme$palette$chart$","_theme$palette$chart$2","selectedDataTypeKey","defaultValueForChildAlert","validDaysOfWeek","isArray","sort","valueArray","currentExcludedDates","updatedExcludedDates","excludedDate","displayHourPicker","AccessTimeIcon","selectedAlertType","oppositeAlertTypeForChildAlert","disabledToggle","OptionalMessage","openAlertModificationDialog","shouldDisableButton","setShouldDisableButton","sanityCheckAlertBeforeSaving","valid","isAbove","childThreshold","message","removeChildAlertFromParentAlertBody","newBody","formatChildAlertBody","parent_alert_id","handleAlertModification","passedCrudType","handleFetchError","handleFetchSuccess","createdAlert","prevAlerts","updatedAlerts","createdChildAlert","childError","alert_id","PUT","updatedAlert","child_alert_id","updatedChildAlert","DELETE","_editingAlert$AirQual3","_editingAlert$AirQual4","alertVal","datatypeKeyVal","isEqual","returnDaysOfWeekString","days_of_week","missingDays","d","_DAYS_OF_WEEK$find","returnAlertNotModifiableString","owner_role","is_allowed_to_modify","UserRoles","_AlertTypes$alertType","alertsForTable","setOpenAlertModificationDialog","setCrudType","handleModifyClick","TransitionGroup","Grow","newIsEnabled","prevAlert","handleEnableClick","EditIcon","self_is_owner","returnCreatedByString","startIcon","AddAlarmIcon","AlertModificationDialog","AlertTab","alertType","alertsArray","hidden","AlertsTable","AlertsTabs","returnFilteredAlerts","filteredAlerts","_alert$AirQualityAler","parentAlertId","array","alertsLength","newVal","_AlertTypes$Object$ke","_Object$keys","iconPosition","AirQualityAlerts","isModifiable","admin","user_role","NotificationImportantIcon","onLoginSuccess","popupRef","setAuthenticationState","setUser","showVerificationDialog","setShowVerificationDialog","setEmail","popup","AppRoutes","login","focus","intervalId","setInterval","closed","clearInterval","handleMessage","origin","location","LoginTypes","password","is_verified","EmailVerificationDialog","ProjectReservedArea","LoginPopupHandler","handleLoginSuccess","duration","ScreenDropDownMenu","tooltipTitle","chip","Skeleton","enterDelay","leaveDelay","returnChipLabel","ArrowDropUpIcon","SchoolSelector","CustomChip","clickable","MenuList","dense","newSchoolID","localStorage","setItem","LocalStorage","internalNavigation","origin_school","destination_school_id","origin_id","dashboard","GridOfMetadataChips","PersonIcon","contactPerson","contactEmail","ProjectDescription","pb","description","LoadMoreButton","loadMoreCharts","setLoadMoreCharts","KeyboardArrowDownIcon","Project","chartsToRender","NUMBER_OF_CHARTS_TO_LOAD_INITIALLY","themePreference","temperatureUnitPreference","FullWidthBox","Container","UppercaseTitle","getDashboardTitle","has_map","CurrentAQIMapWithGrid","isOnBannerPage","minMapHeight","CurrentAQIGrid","isScreen","showHeatIndex","showWeather","AQIexplanation","sectionData","ThemePreferences","ChartComponentWrapper","Divider","setCurrentPage","MetadataContext","StyledTable","returnFormattedBreakpoints","high","pr","aqiUS","rawPM2_5","healthSuggestions","outdoors","StyledAccordion","MuiAccordion","expanded","default","shadows","StyledAccordionSummary","MuiAccordionSummary","paddingLeft","TooltipText","setExpanded","panel","expandSection","collapseSection","section","expandIcon","MuiAccordionDetails","Explanation","ExpandableSection","InfoIcon"],"sourceRoot":""}