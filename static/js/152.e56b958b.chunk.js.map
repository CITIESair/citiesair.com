{"version":3,"file":"static/js/152.e56b958b.chunk.js","mappings":"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","sources":["hooks/useSchoolMetadata.jsx","Graphs/Subchart/SubchartUtils/SeriesSelector.jsx","Graphs/GoogleChartHelper.jsx","Graphs/Subchart/SubchartUtils/GoogleChartStyleWrapper.jsx","Utils/Gradient/GradientUtils.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/ValueRangeBox.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/TooltipCalendarChart.jsx","Graphs/Subchart/NivoCharts/NivoChartHelper.jsx","Graphs/Subchart/NivoCharts/NivoCalendarChart/NivoCalendarChart.jsx","Components/DateRangePicker/DateRangePickerUtils.jsx","Components/DateRangePicker/AggregationTypeToggle.jsx","hooks/useChartData.jsx","Components/DateRangePicker/CustomDateRangePicker.jsx","ContextProviders/AxesPickerContext.jsx","Components/AxesPicker/AxesPicker.jsx","Graphs/Subchart/NoChartToRender.jsx","Components/TimeRange/TimeRangeUtils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker.jsx","Components/TimeRange/TimeRangeSelector.jsx","Components/TimeRange/TimeRangeSelectorWrapperForDataHook.jsx","Graphs/Subchart/SubChart.jsx","Components/CollapsibleSubtitle.jsx","Graphs/DataTypeDropDown.jsx","Components/StyledTabs.jsx","Graphs/ChartComponentWrapper.jsx","Components/AirQuality/AirQualityIndexLegendQuickGlance.jsx","Components/Account/useLoginHandler.jsx","Components/AirQuality/AirQualityScreen/ScreenDropDownMenu.jsx","Components/CustomDialog/CustomDialog.jsx","Components/DatasetDownload/DatasetDownloadDialog.jsx","Components/AirQuality/AirQualityAlerts/EmailsInput.jsx","Components/AirQuality/AirQualityAlerts/AlertTypes.jsx","ContextProviders/AirQualityAlertContext.jsx","Components/AirQuality/AirQualityAlerts/Utils.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertDeletionDialog.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/DialogData.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/OptionalMessage.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MultiDaysCalendarPicker.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/DaySelector.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdSlider.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdComponentWrapper.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/MaxOnceADayCheckbox.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/ThresholdAlertComponents/ThresholdTypeToggle.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/AlertPropertyComponents.jsx","Components/AirQuality/AirQualityAlerts/AlertModificationDialog/AlertModificationDialog.jsx","Components/AirQuality/AirQualityAlerts/AlertsTable.jsx","Components/AirQuality/AirQualityAlerts/AlertsTabs.jsx","Components/AirQuality/AirQualityAlerts/AirQualityAlert.jsx","Components/Account/LoginPopupHandler.jsx","Pages/Project/ProjectReservedArea.jsx","Components/CustomChip.jsx","Components/SchoolSelector.jsx","Pages/Project/GridOfMetadataChips.jsx","Pages/Project/ProjectDescription.jsx","Pages/Project/LoadMoreButton.jsx","Pages/Project/Project.jsx","Pages/Dashboard.jsx","Components/UppercaseTitle.jsx","Components/AirQuality/AirQualityIndexTable.jsx","Components/ExpandableSection/ExpandableSection.jsx","Components/AirQuality/AQIexplanation.jsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from '../API/Utils';\n\nconst useSchoolMetadata = () => {\n    const { currentSchoolID } = useContext(DashboardContext);\n\n    return useQuery({\n        queryKey: ['schoolMetadata', currentSchoolID],\n        queryFn: async () => {\n            const url = getApiUrl({\n                endpoint: GeneralAPIendpoints.schoolmetadata,\n                school_id: currentSchoolID\n            })\n\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID, // only run when ready\n        staleTime: 1000 * 60 * 60, // 1-hour cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useSchoolMetadata;","/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { Stack, Grid, MenuItem, FormControl, Select, Chip, Radio, Checkbox, Typography, Switch, useMediaQuery } from \"@mui/material\";\nimport { useTheme } from '@mui/material/styles';\n\nimport VisibilityIcon from '@mui/icons-material/Visibility';\n\nconst SELECT_ALL = 'Show All Sensors';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\n\nexport default function SeriesSelector(props) {\n  const { items: itemsFromChart,\n    selectorID,\n    allowMultiple,\n    seriesLabel,\n    onSeriesSelection,\n    displayChip = true\n  } = props;\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 5.55 + ITEM_PADDING_TOP,\n        overflow: 'visible !important',\n        background: theme.palette.customAlternateBackground\n      }\n    },\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    transformOrigin: {\n      vertical: \"top\",\n      horizontal: \"left\"\n    },\n    getContentAnchorEl: null\n  };\n\n  const [items, setItems] = useState(itemsFromChart);\n  const [selectAll, setSelectAll] = useState(allowMultiple); // default: all is selected if multiSelect is true\n\n  useEffect(() => {\n    setItems(itemsFromChart);\n  }, [itemsFromChart]);\n\n  useEffect(() => {\n    setSelectAll(items.every(item => item.selected)); // set selectAll if all items are selected\n  }, [items]);\n\n  const handleChange = (event) => {\n    // Get the array of the currently selected value(s)\n    const {\n      target: { value }\n    } = event;\n\n    // If the current selection has SELECT_ALL\n    // Behavior:\n    // - If SELECT_ALL is being selected now, then set all items to selected\n    // - IF SELECT_ALL is being de-selected now, then set all items but the first one to be unselected \n    // (to make sure there's always at least 1 item being selected)\n    if (value.includes(SELECT_ALL)) {\n      const updatedItems = items.map((item, index) => ({ ...item, selected: index == 0 ? true : !selectAll }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(!selectAll);\n    }\n    // Else, if an ordinary item is selected/de-selected:\n    else {\n      const selectedItems = items.filter(item => value.includes(item.label));\n      const updatedItems = items.map(item => ({\n        ...item,\n        selected: selectedItems.some(selectedItem => selectedItem.label === item.label)\n      }));\n      onSeriesSelection({ newDataColumns: updatedItems });\n      setSelectAll(false);\n    }\n  };\n\n  const handleItemToggle = (item) => {\n    const updatedItems = items.map(existingItem =>\n      existingItem.label === item.label ? { ...existingItem, selected: !existingItem.selected } : existingItem\n    );\n    onSeriesSelection({ newDataColumns: updatedItems });\n  };\n\n  const renderedLabel = (selected) => {\n    const returnNumSeriesDisplayed = () => {\n      return `${selected.length}/${items.length} ${seriesLabel || \"\"} shown`;\n    };\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" spacing={0.5}>\n        <VisibilityIcon fontSize=\"1.5rem\" sx={{ color: theme.palette.text.secondary }} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {/* show # of series selected if multiSelect. show cur selected serie if singleSelect */}\n          {allowMultiple ? returnNumSeriesDisplayed() : selected}\n        </Typography>\n      </Stack>\n    );\n  };\n\n  return (\n    <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n      {\n        isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Show/Hide</Typography> : null\n      }\n\n      <Stack spacing={1} direction=\"row\" alignItems=\"center\">\n        <FormControl\n          sx={{\n            width: \"100%\",\n            minWidth: '10rem',\n            '& .MuiInputBase-root': { borderRadius: `${theme.shape.borderRadius}px` }\n          }}\n          size=\"small\"\n        >\n          <Select\n            labelId={`${selectorID}-label`}\n            id={selectorID}\n            multiple={allowMultiple}\n            value={items.filter(item => item.selected).map(item => item.label)}\n            onChange={handleChange}\n            MenuProps={MenuProps}\n            renderValue={(selected) => renderedLabel(selected)}\n            sx={{\n              fontSize: '0.75em',\n              '& .MuiSelect-select': { py: \"6.5px\" },\n              '& .MuiSvgIcon-root': { color: 'text.secondary' }\n            }}\n          >\n            {/* Display all available items, together with checkbox for each item to select from */}\n            {items.map((item) => (\n              <MenuItem\n                disabled={\n                  // If there is only 1 selected item and this is the selected item\n                  // Then, prevent user from de-select this item too\n                  // To ensure at least there is 1 selected item at all times\n                  (items.filter(item => item.selected).length === 1 && item.selected) ? true : false\n                }\n                key={item.label}\n                value={item.label}\n                sx={{\n                  backgroundColor: 'unset !important',\n                  \"&:hover\": {\n                    backgroundColor: 'inherit !important',\n                  }\n                }}\n              >\n                { /* checkboxes for MultiSelect, radioButtons for singleSelect*/}\n                {allowMultiple ? <Checkbox\n                  checked={item.selected}\n                  onClick={() => handleItemToggle(item)}\n\n                  sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                  : <Radio\n                    checked={item.selected}\n                    onChange={() => handleChange(item)}\n\n                    sx={{ p: 0.25, transform: 'scale(0.8)' }} />\n                }\n                <Typography variant='caption'>{item.label}</Typography>\n              </MenuItem>\n            ))}\n\n            {/* Show the option to select all if multiSelect is true*/}\n            {allowMultiple ?\n              (\n                <MenuItem\n                  key={SELECT_ALL}\n                  value={SELECT_ALL}\n                  sx={{\n                    borderTop: 'solid 0.5px', borderColor: theme.palette.text.secondary,\n                    position: 'sticky', bottom: 0, zIndex: 1, marginBottom: theme.spacing(-1),\n                    background: theme.palette.customAlternateBackground,\n                    \"&:hover\": {\n                      background: theme.palette.customAlternateBackground\n                    }\n                  }}\n                >\n                  <Stack direction='row' width='100%' alignItems='center' justifyContent='space-between'>\n                    <Typography fontWeight={500} variant='caption' sx={{ pl: 1 }}>{SELECT_ALL}</Typography>\n                    <Switch\n                      checked={selectAll}\n                      onClick={() => handleItemToggle(SELECT_ALL)}\n                      sx={{ transform: 'scale(0.8)' }}\n                    />\n                  </Stack>\n                </MenuItem>\n              ) : null\n            }\n          </Select>\n        </FormControl>\n\n        {/* Display only selected items in the Grids, and only in landscape mode and if multiSelect is true*/}\n        {(displayChip && allowMultiple) && <Grid container spacing={1}\n          sx={{\n            [theme.breakpoints.down('sm')]: {\n              display: 'none'\n            },\n          }}\n        >\n          {items.filter(item => item.selected).map((item) => (\n            <Grid item key={item.label}>\n              <Chip\n                label={<Typography variant='caption'>{item.label}</Typography>}\n                size=\"small\"\n                {...(items.filter(item => item.selected).length !== 1 && { onDelete: () => handleItemToggle(item) })}\n              />\n            </Grid>\n          ))}\n        </Grid>}\n      </Stack>\n    </Stack>\n  );\n}\n","/* eslint-disable */\n\nexport const ChartControlType = {\n  CategoryFilter: { position: 'top', stackDirection: 'column' },\n  DateRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  ChartRangeFilter: { position: 'bottom', stackDirection: 'column-reverse' },\n  NumberRangeFilter: { position: 'top', stackDirection: 'column' }\n}\n\n// Function to generate a random ID for the google chart container\nexport const generateRandomID = () => {\n  return Math.random().toString(36).substr(2, 9); // Generates a random string of length 9\n}\n\n// -------- Chart options --------\n\nconst hideAnnotations = {\n  stem: {\n    length: 0,\n  },\n  textStyle: {\n    opacity: 0,\n  },\n  boxStyle: null,\n};\n\nconst returnResponsiveFontSizeInPixels = ({ isPortrait, isSmaller }) => {\n  return (\n    isSmaller ? (isPortrait ? 6 : 8) : (isPortrait ? 8 : 10)\n  );\n}\n\nexport const returnGenericOptions = (props) => {\n  const { chartData, subchartIndex, isPortrait, theme } = props;\n\n  // Define some shared styling rules for the chart\n  const axisTitleTextStyle = {\n    italic: false,\n    bold: true,\n    color: theme.palette.chart.axisTitle,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n  const axisTextStyle = {\n    color: theme.palette.chart.axisText,\n    fontSize: returnResponsiveFontSizeInPixels({ isPortrait })\n  };\n\n  // ---- Formulate the options for this specific chart:\n  // 1. Populate first with subchart's options (if any)\n  let options = chartData.subcharts?.[subchartIndex]?.options\n    ? { ...chartData.subcharts[subchartIndex].options }\n    : {};\n\n  // 2. Append own chart's options and then populate with universal options for all charts\n  options = {\n    ...options,\n    ...chartData.options,\n    theme: 'material',\n    curveType: options.curveType || chartData.options?.curveType || 'function',\n    crosshair: { orientation: 'both', trigger: 'focus', opacity: 0.5 },\n    backgroundColor: { fill: chartData.options?.backgroundColor?.fill || 'transparent' },\n    chartArea: {\n      ...chartData.options?.chartArea,\n      width: isPortrait ? (chartData.options?.chartArea?.width?.portrait || '80%') : (chartData.options?.chartArea?.width?.landscape || '80%'),\n      height: isPortrait ? (chartData.options?.chartArea?.height?.portrait || '60%') : (chartData.options?.chartArea?.height?.landscape || '80%'),\n      top: !isPortrait && 10\n    },\n    width: isPortrait ? (chartData.options?.width?.portrait || '100%') : (chartData.options?.width?.landscape || '100%'),\n    // if there is a filter, we make space for the chartFilter from the chart's height.\n    // value is divided in 2 because the calculation is applied twice due to\n    // how react-google-charts nest components\n    height: chartData.height || '100%',\n    tooltip: {\n      isHtml: true,\n      showColorCode: false\n    },\n    legend: {\n      alignment: isPortrait ? 'center' : 'start',\n      position:\n        chartData.options?.legend?.position\n        ?? (isPortrait ? 'top' : 'right'),\n      scrollArrows: {\n        activeColor: theme.palette.chart.axisTitle,\n        inactiveColor: theme.palette.text.secondary,\n      },\n      pagingTextStyle: {\n        fontSize: 10,\n        color: theme.palette.chart.axisTitle,\n        bold: true,\n      }\n    }\n  };\n\n  // 3. Append to vAxis and hAxis properties\n  options.vAxis = {\n    ...options.vAxis,\n    format: options.vAxis?.format ?? 'decimal',\n    title: options.vAxis?.title ?? '',\n    viewWindow: {\n      min: options.vAxis?.viewWindow?.min ?? 0,\n      max: options.vAxis?.viewWindow?.max ?? null,\n      max: options.vAxis?.viewWindow?.max ?? null,\n    },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    title: options.hAxis?.title ?? '',\n  };\n  // 3.1. If in portrait mode, slant the text of the hAxis\n  if (isPortrait) {\n    options.hAxis = {\n      ...options.hAxis,\n      slantedText: true,\n      slantedTextAngle: 30,\n    };\n  }\n\n  // 4. Override with custom colors:\n  // 4.1. Color scheme of all the series of this chart\n  if (typeof options.colors === 'string' || !options.colors) options.colors = theme.palette.chart.optionsColors[options.colors || 'multiColor'];\n  // 4.2. Individual color of a single serie (if given)\n  if (options.series) {\n    Object.values(options.series).forEach((_serie) => {\n      const serie = _serie;\n      if (serie.color === 'default') {\n        serie.color = theme.palette.primary.main;\n      }\n    });\n  }\n  // 4.3. Color of the trendline\n  if (options.trendlines) {\n    options.trendlines.forEach((_item) => {\n      const item = _item;\n      item.color = theme.palette.primary.main;\n    });\n  }\n  // 4.4. Color axis of the Calendar chart\n  if (options.colorAxis) {\n    switch (options.colorAxis.colors) {\n      case 'matchingColor':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.chart.optionsColors.multiColor[options.colorAxis.colorIndex],\n        ];\n        break;\n      case 'default':\n        options.colorAxis.colors = [\n          theme.palette.chart.colorAxisFirstColor,\n          theme.palette.NYUpurple,\n        ];\n        break\n      // If not any of the above, then the colorAxis should be from the chart (aqi/temperature/humidity...)\n      default:\n        try {\n          options.colorAxis = theme.palette.chart.colorAxes[options.colorAxis.colors]\n        } catch {\n          options.colorAxis = []\n        }\n        break;\n    }\n  }\n  // 4.5. Colors of other elements of the chart (typographies and gridlines)\n  options.vAxis = {\n    ...options.vAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.vAxis?.gridlines,\n      color: options.vAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: { count: 0 },\n  };\n  options.hAxis = {\n    ...options.hAxis,\n    titleTextStyle: axisTitleTextStyle,\n    textStyle: axisTextStyle,\n    gridlines: {\n      ...options.hAxis?.gridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines\n    },\n    minorGridlines: {\n      ...options.hAxis?.minorGridlines,\n      color: options.hAxis?.gridlines?.color || theme.palette.chart.gridlines,\n    },\n  };\n  options.legend = {\n    ...options.legend,\n    textStyle: axisTextStyle,\n  };\n  options.annotations = {\n    ...options.annotations,\n    highContrast: true,\n    textStyle: {\n      color: theme.palette.primary.contrastText,\n      fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }),\n      opacity: 0.8\n    },\n    stem: {\n      ...options.annotations?.stem,\n      color: theme.palette.chart.axisTitle,\n      thickness: 2\n    },\n    boxStyle: {\n      rx: theme.shape.borderRadius, // rounded corners\n      ry: theme.shape.borderRadius,\n      fill: theme.palette.chart.annotationBoxFill,\n      fillOpacity: 0.5\n    },\n  };\n\n  if (isPortrait && chartData?.chartType === \"LineChart\") {\n    options.pointSize = 0;\n  }\n\n  return options;\n}\n\nexport const returnChartControlUI = (props) => {\n  const { chartControl, mainChartData, mainChartOptions, subchartIndex, theme, isPortrait } = props;\n  let chartControlUI = {\n    ...chartControl.options?.ui,\n    snapToData: true\n  };\n\n  // Assign the appropriate UI for chartControl based on controlType (if existed)\n  if (chartControl.controlType === 'ChartRangeFilter') {\n    chartControlUI = {\n      ...chartControlUI,\n      chartType: mainChartData.chartType,\n      chartView: {\n        columns:\n          mainChartData.columns\n          || (mainChartData.subcharts\n            && mainChartData.subcharts[subchartIndex].columns)\n          || null\n          || null,\n      },\n      chartOptions: {\n        ...mainChartOptions,\n        hAxis: {\n          ...mainChartOptions.hAxis,\n          textPosition: 'out',\n          textStyle: { color: theme.palette.chart.axisText, fontSize: returnResponsiveFontSizeInPixels({ isPortrait, isSmaller: true }) },\n          title: null\n        },\n        vAxis: {\n          ...mainChartOptions.vAxis,\n          title: null\n        },\n        annotations: hideAnnotations,\n        legend: null,\n        pointSize: 0\n      }\n    };\n  }\n  return chartControlUI;\n}\n\nexport const addTouchEventListenerForChartControl = ({ controlWrapper, chartID }) => {\n  const touchHandler = (event) => {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = '';\n\n    switch (event.type) {\n      case 'touchstart':\n        type = 'mousedown';\n        break;\n      case 'touchmove':\n        type = 'mousemove';\n        break;\n      case 'touchend':\n        type = 'mouseup';\n        break;\n      default:\n        return;\n    }\n\n    var simulatedEvent = new MouseEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      detail: 1,\n      screenX: first.screenX,\n      screenY: first.screenY,\n      clientX: first.clientX,\n      clientY: first.clientY,\n      button: 0, // left button\n      relatedTarget: null,\n    });\n\n    first.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n  }\n\n  let isMounted = true; // Flag to track component's mount status\n  if (!controlWrapper) return;\n\n  const controlDOM = document.querySelector(`#control-${chartID}`);\n  if (!controlDOM) return;\n\n  ['touchstart', 'touchmove', 'touchend', 'touchcancel']\n    .forEach((touchEvent) => {\n      controlDOM.addEventListener(touchEvent, touchHandler, { capture: true });\n    });\n\n  return () => {\n    isMounted = false; // Component is unmounting\n\n    ['touchstart', 'touchmove', 'touchend', 'touchcancel'].forEach((touchEvent) => {\n      controlDOM.removeEventListener(touchEvent, touchHandler, { capture: true });\n    });\n  };\n}","import { Box } from '@mui/material/';\nimport { styled } from '@mui/material/styles';\n\n\nconst GoogleChartStyleWrapper = styled(Box, {\n  shouldForwardProp: (prop) => prop !== 'gradientBackgroundId' && prop !== 'isPortrait',\n})(({ theme, isPortrait, gradientBackgroundId }) => ({\n  '& [id*=\"google-visualization-errors-all\"]': {\n    display: 'none !important'\n  },\n  // CSS for optional gradient background \n  '& svg>g:nth-of-type(2)>rect:first-of-type': {\n    fill: `url(#${gradientBackgroundId})`,\n    fillOpacity: 1,\n    filter: 'contrast(0.4) brightness(1.4)'\n  },\n\n  // CSS for HTML tooltip\n  '& .google-visualization-tooltip, .nivo-tooltip': {\n    width: 'unset !important',\n    maxWidth: '350px',\n    height: 'unset',\n    padding: '1em',\n    boxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    mozBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    webkitBoxShadow: '0px 2px 2px 0px rgba(204, 204, 204, 0.6)',\n    border: 'solid 1px',\n    borderColor: theme.palette.text.secondaryRGB,\n    fontSize: `${isPortrait ? 9 : 12}px`,\n    color: theme.palette.chart.tooltip.text,\n    background: theme.palette.chart.tooltip.background,\n    borderRadius: theme.shape.borderRadius,\n    '& ul': {\n      margin: '0 !important',\n      '& li': {\n        margin: '0 !important',\n        padding: '0 !important',\n        '& span': {\n          fontSize: `${isPortrait ? 9 : 12}px !important`,\n          color: `${theme.palette.chart.tooltip.text} !important`,\n        }\n      }\n    }\n  },\n\n  // -------- chartControl's additional stylings\n  '& .goog-menuitem-highlight, .goog-menuitem-hover': {\n    backgroundColor: `${theme.palette.primary} !important`\n  },\n\n  // CategoryFilter\n  '& .google-visualization-controls-categoryfilter': {\n    fontSize: '0.85rem',\n    marginTop: '0.75rem',\n    marginBottom: '-0.75rem',\n\n    '& .goog-inline-block > .goog-menu-button': {\n      marginTop: 0\n    },\n\n    '& .goog-menu-button-hover .goog-menu-button-outer-box, .goog-menu-button-hover .goog-menu-button-inner-box': {\n      borderColor: 'inherit !important'\n    },\n\n    '& .google-visualization-controls-label': {\n      color: theme.palette.text.secondary,\n      fontWeight: 500,\n      verticalAlign: 'middle',\n      marginBottom: '0.25rem'\n    },\n    '& .goog-menu-button-outer-box': {\n      backgroundColor: theme.palette.background.paper,\n      border: 'unset',\n\n      '& .goog-menu-button-inner-box': {\n        paddingTop: theme.spacing(0.5),\n        paddingBottom: theme.spacing(0.5),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        border: 'solid',\n        borderWidth: '0.5px',\n        borderRadius: theme.shape.borderRadius,\n        borderColor: theme.palette.text.secondary,\n\n        '& .goog-menu-button-caption': {\n          color: theme.palette.text.secondary\n        }\n      }\n    }\n  },\n\n  // DateRangeFilter\n  '& .google-visualization-controls-rangefilter': {\n    width: '100%',\n    fontSize: '0.75rem',\n    '& .goog-inline-block': {\n      width: '100%',\n    },\n    '& .google-visualization-controls-slider-horizontal': {\n      width: '90%',\n      margin: '0 5%',\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(1)': {\n      position: 'absolute',\n      top: '1.5em',\n      left: '5%'\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel:nth-of-type(2)': {\n      position: 'absolute',\n      top: '1.5em',\n      right: '5%'\n    },\n    '& .google-visualization-controls-slider-handle': {\n      background: theme.palette.primary.main\n    },\n    '& .google-visualization-controls-rangefilter-thumblabel': {\n      color: theme.palette.text.secondary,\n      padding: 0,\n      fontWeight: 500\n    },\n    '& .google-visualization-controls-slider-thumb': {\n      background: theme.palette.primary.main,\n      border: 'unset',\n      borderRadius: theme.shape.borderRadius\n    }\n  },\n\n  // These are the paths showing on top of the line chart\n  // and the stroke around the bar/column chart\n  // when the user hovers on the legend to make the serie stand out\n  // by Google Chart's default doesn't change color based on light/dark theme, but we modify here:\n  '& path[stroke-opacity=\"0.3\"], path[stroke-opacity=\"0.1\"], path[stroke-opacity=\"0.05\"], rect[stroke-opacity]': {\n    stroke: theme.palette.text.primary,\n    strokeWidth: 3\n  },\n\n  // Cursor of series in legends\n  '& [column-id]:not(:empty)': {\n    cursor: 'pointer',\n    ':hover': {\n      fontWeight: 600\n    }\n  }\n}));\n\nexport default GoogleChartStyleWrapper;\n","import { isValidArray } from \"../UtilFunctions\";\n\nconst normalizeColorStopOffsets = ({ offsets, minOffset, maxOffset }) => {\n  return offsets.map(offset => (offset - minOffset) / (maxOffset - minOffset));\n}\n\nconst normalizeColorStops = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  if (!isValidArray(colors)) return [\n    { color: \"#fff\", offset: 0 },\n    { color: \"#fff\", offset: 1 }\n  ];\n\n  // No offsets provided, generate equally spaced offsets\n  if (typeof colors[0] === 'string') {\n    const totalColors = colors.length;\n    return colors.map((color, index) => ({\n      color: color,\n      offset: index / (totalColors - 1)\n    }));\n  }\n  // Offsets are provided, normalize them\n  else {\n    let clampedStops = colors;\n    if (optionalMinValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset >= optionalMinValue);\n    }\n    if (optionalMaxValue) {\n      clampedStops = colors.filter(colorStop => colorStop.offset <= optionalMaxValue);\n    }\n    const offsets = clampedStops.map(colorStop => colorStop.offset);\n\n    const minOffset = optionalMinValue || Math.min(...offsets);\n    const maxOffset = optionalMaxValue || Math.max(...offsets);\n\n    const normalizedOffsets = normalizeColorStopOffsets({ offsets, minOffset, maxOffset });\n\n    return clampedStops.map((colorStop, index) => ({\n      color: colorStop.color,\n      offset: normalizedOffsets[index]\n    }));\n  }\n}\n\n// Function to return an array of STEPS discrete colors in a gradient from an array of starting colors\n// Used for NivoCalendarChart\nfunction hexToRgb(hex) {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n    : [null, null, null];\n}\nfunction rgbToHex(r, g, b) {\n  return \"#\" + [r, g, b].map(x => {\n    const hex = x.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  }).join('');\n}\nfunction interpolateColor(color1, color2, factor) {\n  // Return immediately if the 2 colors are the same\n  if (color1.every((element, index) => element === color2[index])) return color1;\n\n  // Else, calculate the middle of the 2 colors\n  let result = color1.slice();\n  for (let i = 0; i < 3; i++) {\n    result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n  }\n  return result;\n}\nexport const generateDiscreteColorGradientArray = ({ colors, numSteps = 100 }) => {\n  const normalizedColors = normalizeColorStops({ colors });\n  normalizedColors.forEach((colorStop) => {\n    colorStop.color = hexToRgb(colorStop.color)\n  });\n\n  let colorArray = [];\n  const stepPositions = Array.from({ length: numSteps }, (_, i) => i / (numSteps - 1));\n\n  for (let i = 0; i < stepPositions.length; i++) {\n    const pos = stepPositions[i];\n    let color1, color2, offset1, offset2;\n\n    for (let j = 0; j < normalizedColors.length - 1; j++) {\n      if (pos >= normalizedColors[j].offset && pos <= normalizedColors[j + 1].offset) {\n        color1 = normalizedColors[j].color;\n        color2 = normalizedColors[j + 1].color;\n        offset1 = normalizedColors[j].offset;\n        offset2 = normalizedColors[j + 1].offset;\n        break;\n      }\n    }\n\n    const localFactor = (pos - offset1) / (offset2 - offset1);\n    const interpolatedColor = interpolateColor(color1, color2, localFactor);\n    colorArray.push(rgbToHex(...interpolatedColor));\n  }\n\n  return colorArray;\n};\n\n// Function to return CSS background from an array of colors (with or without offsets)\nexport const generateCssBackgroundGradient = ({ gradientDirection, colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return `linear-gradient(${gradientDirection}, ${normalizedColors.map(colorStop => `${colorStop.color} ${colorStop.offset * 100}%`).join(', ')})`;\n}\n\nexport const generateSvgFillGradient = ({ colors, optionalMinValue, optionalMaxValue }) => {\n  const normalizedColors = normalizeColorStops({ colors, optionalMinValue, optionalMaxValue });\n\n  return normalizedColors.map(colorStop => ({\n    color: colorStop.color,\n    offset: colorStop.offset * 100 + '%'\n  }));\n};\n\n// Gradient for background of the Google Charts\nexport const BackgroundGradient = ({ id, colors }) => (\n  <svg width={0} height={0} visibility=\"hidden\">\n    <defs>\n      <linearGradient id={id} x1=\"0\" y1=\"1\" x2=\"0\" y2=\"0\">\n        {colors.map((colorStop, index) => (\n          <stop key={index} offset={colorStop.offset} stopColor={colorStop.color} />\n        ))}\n      </linearGradient>\n    </defs>\n  </svg>\n);","import { useTheme } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material';\nimport { generateCssBackgroundGradient } from '../../../../Utils/Gradient/GradientUtils';\n\nconst ValueRangeBox = ({ title, valueRange, colorAxis, isPortrait }) => {\n  const theme = useTheme();\n\n  if (valueRange?.min === null || valueRange?.max === null) return null;\n\n  const { colors, minValue, maxValue } = colorAxis;\n  let rangeBoxMinValue = minValue, rangeBoxMaxValue = maxValue;\n\n  if (minValue === undefined) rangeBoxMinValue = valueRange.min;\n  if (maxValue === undefined) rangeBoxMaxValue = valueRange.max;\n\n  if (valueRange.min < rangeBoxMinValue) rangeBoxMinValue = valueRange.min;\n  if (valueRange.max > rangeBoxMaxValue) rangeBoxMaxValue = valueRange.max;\n\n  const calculateMarkerPositionOnRangeBox = (value) => {\n    const position = ((value - rangeBoxMinValue) / (rangeBoxMaxValue - rangeBoxMinValue)) * 100;\n    return `${position}%`;\n  };\n\n  const labelStyle = {\n    position: 'absolute',\n    fontSize: '0.75rem',\n    color: theme.palette.text.secondary,\n    lineHeight: 1,\n    textAlign: 'center',\n    transform: 'translateX(-50%)',\n    minWidth: '75px',\n    whiteSpace: 'nowrap',\n  };\n  const topLabelStyle = {\n    top: '-1.5rem',\n    transform: 'translateX(-50%)'\n  };\n  const bottomLabelStyle = {\n    bottom: '-1.25rem',\n    transform: isPortrait ? 'translateX(-100%)' : 'translateX(-50%)'\n  };\n\n  const triangleStyle = {\n    position: 'absolute',\n    width: 0,\n    height: 0,\n    borderLeft: '0.25rem solid transparent',\n    borderRight: '0.25rem solid transparent',\n    transform: 'translateX(-50%)',\n  };\n  const topTriangleStyle = {\n    top: '-0.5rem',\n    borderTop: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n  const bottomTriangleStyle = {\n    bottom: '-0.5rem',\n    borderBottom: `0.25rem solid ${theme.palette.text.secondary}`\n  };\n\n  return (\n    <Box sx={{\n      position: 'sticky',\n      width: 'fit-content',\n      my: 4,\n      float: 'right',\n      right: (isPortrait ? '0' : '50px')\n    }}>\n      <Typography sx={{\n        display: 'inline',\n        position: 'absolute',\n        textAlign: 'right',\n        transform: 'translateX(calc(-100% - 0.5rem))',\n        fontSize: '0.75rem',\n        lineHeight: 1.25,\n        fontWeight: 500,\n        color: 'text.secondary'\n      }}>\n        {title}\n      </Typography>\n      <Box sx={{\n        background: generateCssBackgroundGradient({ gradientDirection: 'to right', colors: colors, optionalMaxValue: rangeBoxMaxValue }),\n        color: theme.palette.text.secondary,\n        border: `1px solid ${theme.palette.text.secondary}`,\n        width: isPortrait ? '250px' : '300px',\n        height: '1rem',\n        position: 'relative',\n        justifyContent: 'space-between',\n      }}>\n        <span style={{ ...labelStyle, ...topLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}>min: {Math.round(valueRange.min)}</span>\n        <span style={{ ...labelStyle, ...bottomLabelStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}>max: {Math.round(valueRange.max)}</span>\n        <div style={{ ...triangleStyle, ...topTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.min) }}></div>\n        <div style={{ ...triangleStyle, ...bottomTriangleStyle, left: calculateMarkerPositionOnRangeBox(valueRange.max) }}></div>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ValueRangeBox;","import { useEffect, useRef } from 'react';\nimport { Box, Chip } from '@mui/material';\n\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../../../Utils/UtilFunctions';\n\nconst TooltipCalendarChart = ({ day, color, tooltipText, dateRange, inFirstTwoRowsOfChart }) => {\n  const tooltipBoxRef = useRef(null);\n\n  // If the cell hovered over is in the first two rows of the chart,\n  // move the tooltip to the bottom of the chart\n  // Read subsequent comments to understand why we need to do this\n  useEffect(() => {\n    if (tooltipBoxRef.current && inFirstTwoRowsOfChart(day, dateRange)) {\n      const parentDiv = tooltipBoxRef.current.parentElement;\n      if (parentDiv) {\n        parentDiv.style.top = '11vh';\n      }\n    }\n  }, [tooltipBoxRef, inFirstTwoRowsOfChart]);\n\n\n  // Note that our Box is just a container 'inside' the tooltip\n  // The tooltip itself is actually the Box's parent div\n  return (\n    <Box ref={tooltipBoxRef} className='nivo-tooltip'>\n      <Chip sx={{ backgroundColor: color, mr: 0.5, height: '10px', width: '10px', borderRadius: '50%' }} />\n      {parse(tooltipText, { replace: replacePlainHTMLWithMuiComponents })}\n    </Box>\n  );\n};\n\nexport default TooltipCalendarChart;","\nexport const getDateRangeForCalendarChart = (dateStrings) => {\n  return {\n    min: dateStrings.reduce((min, current) => (current < min ? current : min)),\n    max: dateStrings.reduce((max, current) => (current > max ? current : max))\n  }\n};\n\nexport const getValueRangeForCalendarChart = (values) => {\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\nexport const getCalendarChartMargin = (isPortrait) => {\n  return isPortrait\n    ? { top: 30, right: 0, bottom: 20, left: 20 }\n    : { top: 30, right: 40, bottom: 20, left: 40 };\n};\n\nexport const calculateValueRange = (data) => {\n  const values = data.map((item) => item.value);\n  return { min: Math.min(...values), max: Math.max(...values) };\n};\n\n","/* eslint-disable */\nimport { ResponsiveCalendar } from '@nivo/calendar';\nimport { useTheme } from '@mui/material/styles';\nimport { generateDiscreteColorGradientArray } from '../../../../Utils/Gradient/GradientUtils';\n\nimport ValueRangeBox from './ValueRangeBox';\nimport TooltipCalendarChart from './TooltipCalendarChart';\nimport { getCalendarChartMargin, getDateRangeForCalendarChart, getValueRangeForCalendarChart } from '../NivoChartHelper';\nimport { useEffect, useState } from 'react';\nimport { isValidArray } from '../../../../Utils/UtilFunctions';\nimport GoogleChartStyleWrapper from '../../SubchartUtils/GoogleChartStyleWrapper';\nimport { Box } from '@mui/material';\n\nconst YEAR_SPACING = 40;\n\nconst NivoCalendarChart = (props) => {\n    const { dataArray, valueRangeBoxTitle, isPortrait, options, windowSize } = props;\n\n    const [dateRange, setDateRange] = useState({ min: null, max: null });\n    const [valueRange, setValueRange] = useState({ min: null, max: null });\n    const [calendarHeight, setCalendarHeight] = useState(400);\n\n    useEffect(() => {\n        if (!isValidArray(dataArray)) return;\n\n        const dateStrings = dataArray.map(item => item.day);\n        const thisDateRange = getDateRangeForCalendarChart(dateStrings)\n        setDateRange(thisDateRange);\n\n        const values = dataArray.map(item => item.value);\n        setValueRange(getValueRangeForCalendarChart(values));\n\n        // Get the number of years we have data for and the number of years to display\n        const lastYear = new Date(thisDateRange.max).getFullYear();\n        const firstYear = new Date(thisDateRange.min).getFullYear();\n        const numberOfYears = lastYear - firstYear + 1;\n        const calendarChartMargin = getCalendarChartMargin(isPortrait);\n\n        const cellSize = Math.min(windowSize[0] / 60, 20); // windowSize[0]: innerWidth\n        // max cell size of 20\n        const yearHeight = cellSize * 7; // Height for one year\n        const totalHeight = numberOfYears * (yearHeight + YEAR_SPACING) + calendarChartMargin.top + calendarChartMargin.bottom;\n        setCalendarHeight(totalHeight);\n    }, [dataArray, windowSize]);\n\n    const displayLegend = options?.legend?.position && options.legend.position !== \"none\";\n\n    const calendarChartMargin = getCalendarChartMargin(isPortrait, displayLegend);\n\n    const theme = useTheme();\n\n    // Function to extract tooltip text from HTML tooltip\n    const extractTooltipText = (tooltip) => {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(tooltip, 'text/html');\n        return doc.body.innerHTML;\n    };\n\n    // Function to check if a date is in the first two rows of the chart\n    // Used to anchor the tooltip to the bottom while hovering over\n    // the first two rows of the chart\n    const inFirstTwoRowsOfChart = (dateStr, dateRange) => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.getDay();\n\n        // Check if the date is Sunday (0) or Monday (1)\n        const isFirstTwoDaysOfWeek = dayOfWeek === 0 || dayOfWeek === 1;\n\n        // Extract the first year from the date range once\n        const firstYear = new Date(dateRange.min).getFullYear();\n\n        // Check if the date is in the first year of the date range\n        const isInFirstYear = date.getFullYear() === firstYear;\n\n        return isFirstTwoDaysOfWeek && isInFirstYear;\n    };\n\n    const calendarCellColors = generateDiscreteColorGradientArray({\n        colors: options?.colorAxis?.colors,\n        numSteps: options?.colorAxis?.gradientSteps\n    });\n\n    return (\n        <GoogleChartStyleWrapper\n            isPortrait={isPortrait}\n            className=\"Calendar\"\n            position=\"relative\"\n            minWidth=\"550px\"\n            height=\"100%\"\n        >\n            {displayLegend ? (\n                <ValueRangeBox\n                    title={valueRangeBoxTitle}\n                    valueRange={valueRange}\n                    colorAxis={options?.colorAxis}\n                    isPortrait={isPortrait}\n                />\n            ) : null}\n\n\n            <Box sx={{\n                height: `${calendarHeight}px`,\n                maxHeight: \"450px\",\n                overflowY: 'auto',\n                width: '100%',\n                position: 'relative'\n            }}>\n                <Box sx={{\n                    height: `${calendarHeight}px`,\n                    position: 'absolute',\n                    width: '100%'\n                }}>\n                    <ResponsiveCalendar\n                        data={dataArray}\n                        from={dateRange.min}\n                        to={dateRange.max}\n                        emptyColor=\"transparent\"\n                        align=\"top\"\n                        theme={{\n                            text: {\n                                fill: theme.palette.text.secondary,\n                            },\n                            fontSize: '0.75rem'\n                        }}\n                        colors={calendarCellColors}\n                        minValue={options?.colorAxis?.minValue}\n                        maxValue={options?.colorAxis?.maxValue}\n                        margin={calendarChartMargin}\n                        yearSpacing={YEAR_SPACING}\n                        monthBorderColor={theme.palette.text.primary}\n                        monthBorderWidth={1}\n                        daySpacing={0.25}\n                        dayBorderWidth={0}\n                        tooltip={({ day, value, color }) => {\n                            const tooltipData = dataArray.find(item => item.day === day);\n                            const tooltipText = tooltipData ? extractTooltipText(tooltipData.tooltip) : '';\n\n                            return (\n                                <TooltipCalendarChart\n                                    day={day}\n                                    color={color}\n                                    tooltipText={tooltipText}\n                                    dateRange={dateRange}\n                                    inFirstTwoRowsOfChart={inFirstTwoRowsOfChart}\n                                />\n                            );\n                        }}\n                    />\n                </Box>\n            </Box>\n\n        </GoogleChartStyleWrapper>\n    );\n};\n\nexport default NivoCalendarChart;\n\n","/* eslint-disable */\n\nimport { styled } from '@mui/material/styles';\nimport { Paper } from '@mui/material';\n\nimport { addDays, endOfDay, startOfDay, format } from \"date-fns\";\nimport AggregationType from './AggregationType';\n\nconst today = new Date();\n\nconst yesterday = {\n  label: \"Yesterday\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -1)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last14Days = {\n  label: \"Last 14d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -14)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last30Days = {\n  label: \"Last 30d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -30)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst last365Days = {\n  label: \"Last 365d\",\n  range: () => ({\n    startDate: startOfDay(addDays(today, -365)),\n    endDate: endOfDay(today)\n  })\n};\n\nconst allTime = ({ minDateOfDataset }) => {\n  const formattedMinDate = format(minDateOfDataset, \"MMM yyyy\");\n  return {\n    label: `All Time (${formattedMinDate} - Now)`,\n    range: () => ({\n      startDate: minDateOfDataset,\n      endDate: endOfDay(today)\n    })\n  }\n};\n\nexport const returnCustomStaticRanges = ({ minDateOfDataset, aggregationType }) => {\n  switch (aggregationType) {\n    case AggregationType.minute:\n      return [yesterday];\n    case AggregationType.day:\n      return [last30Days, last365Days];\n    case AggregationType.month:\n    case AggregationType.year:\n      return [allTime({ minDateOfDataset })];\n    default:\n      return [last14Days, last30Days];\n  }\n};\n\nexport const AggregationTypeMetadata = {\n  [AggregationType.minute]: {\n    maxDays: 1,\n    label: \"Live\"\n  },\n  [AggregationType.hour]: {\n    maxDays: 30,\n    label: \"Hourly\"\n  },\n  [AggregationType.day]: {\n    maxDays: 365,\n    label: \"Daily\"\n  },\n  [AggregationType.month]: {\n    maxDays: Infinity,\n    label: \"Monthly\"\n  },\n  [AggregationType.year]: {\n    maxDays: Infinity,\n    label: \"Yearly\"\n  }\n}\n\nexport const StyledDateRangePicker = styled(Paper, {\n  shouldForwardProp: (prop) => prop !== 'showPickerPanel' && prop !== 'smallScreen',\n})(({ theme, showPickerPanel, smallScreen }) => ({\n  zIndex: showPickerPanel === true && 1,\n  position: \"relative\",\n  padding: showPickerPanel ? theme.spacing(1) : 0,\n  margin: (showPickerPanel && !smallScreen) ? theme.spacing(-1) : 0,\n  maxWidth: '100%',\n  background: showPickerPanel ? theme.palette.customAlternateBackground : 'transparent',\n  boxShadow: showPickerPanel === false && 'none',\n  '& .rdrDateInput::before': {\n    display: \"none !important\"\n  },\n  '& .rdrDateInput': {\n    borderRadius: theme.shape.borderRadius,\n    boxShadow: 'none',\n    padding: 0\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary\n  },\n  '& .rdrDateDisplayWrapper, .rdrCalendarWrapper, .rdrDefinedRangesWrapper, .rdrStaticRange, .rdrDateDisplayItem': {\n    background: 'transparent'\n  },\n  '& .rdrDateDisplayItemActive': {\n    border: showPickerPanel === false && 'none'\n  },\n  '& .rdrDateDisplay': {\n    margin: 0,\n    minWidth: \"10rem\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"2rem\"\n  },\n  '& .rdrDateDisplayItem': {\n    margin: 0,\n    borderRadius: showPickerPanel ? theme.shape.borderRadius : 0,\n    \"&:hover:not(.rdrDateDisplayItemActive)\": {\n      border: showPickerPanel ? `1px solid ${theme.palette.action.disabled}` : \"none\"\n    }\n  },\n  '& .rdrDateDisplayItem:hover:not(.rdrDateDisplayItemActive)': {\n    border: showPickerPanel === false && '1px solid transparent'\n  },\n  '& .rdrDateDisplayItem + .rdrDateDisplayItem': {\n    margin: 0\n  },\n  '& .rdrDateDisplayItem:first-of-type': {\n    borderRight: showPickerPanel === false && `1px solid ${theme.palette.action.disabled} !important`\n  },\n  '& .rdrMonthAndYearWrapper, .rdrInputRanges': {\n    display: showPickerPanel === false && 'none !important',\n    padding: 0\n  },\n  '& .rdrMonthName': {\n    display: 'none',\n  },\n  '& .rdrDefinedRangesWrapper, .rdrMonths': {\n    display: showPickerPanel === false && 'none'\n  },\n  '&  .rdrInfiniteMonths': {\n    visibility: showPickerPanel === false && 'hidden',\n    width: \"100% !important\",\n    maxWidth: \"675px\",\n    margin: \"auto\"\n  },\n  '& .rdrDateDisplayWrapper': {\n    minWidth: '9rem',\n    height: '2rem',\n    borderRadius: theme.shape.borderRadius,\n    border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.action.disabled}`,\n    \"&:hover\": {\n      border: showPickerPanel ? \"none\" : `1px solid ${theme.palette.text.primary}`,\n    }\n  },\n  '& .rdrDateRangePickerWrapper': {\n    width: '100%',\n    flexDirection: 'column-reverse'\n  },\n  '& .rdrStaticRanges': {\n    flexDirection: 'row',\n    minWidth: '10.5rem'\n  },\n  '& .rdrStaticRangeLabel': {\n    color: theme.palette.text.secondary,\n    borderRadius: theme.shape.borderRadius,\n    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`\n  },\n  '& .rdrDefinedRangesWrapper': {\n    border: 'none',\n    width: '100%'\n  },\n  '& .rdrNextPrevButton': {\n    background: theme.palette.primary.main,\n    borderRadius: theme.shape.borderRadius,\n    opacity: 1,\n    '&:hover': {\n      opacity: 0.5,\n      background: theme.palette.primary.main\n    }\n  },\n  '& .rdrNextPrevButton > i': {\n    color: \"white\"\n  },\n  '& .rdrNextButton > i': {\n    borderColor: `transparent transparent transparent white`\n  },\n  '& .rdrPprevButton > i': {\n    borderColor: `transparent white transparent transparent`\n  },\n  '& .rdrStaticRange': {\n    border: 'none'\n  },\n  '& .rdrStaticRangeSelected > .rdrStaticRangeLabel, .rdrMonthAndYearPickers': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrMonthAndYearPickers': {\n    fontSize: '1rem'\n  },\n  '& .rdrStaticRange:hover .rdrStaticRangeLabel, .rdrStaticRange:focus .rdrStaticRangeLabel': {\n    background: theme.palette.customBackground.toString()\n  },\n  '& .rdrDayNumber span': {\n    color: theme.palette.text.primary.toString()\n  },\n  '& .rdrDayPassive .rdrDayNumber span': {\n    opacity: 0.5\n  },\n  '& .rdrMonthAndYearWrapper select': {\n    color: theme.palette.text.secondary.toString(),\n    background: 'none',\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette.text.secondary}`\n    }\n  },\n  '& .rdrDateDisplayItem input': {\n    color: theme.palette.text.secondary\n  },\n  '& .rdrDayDisabled': {\n    backgroundColor: theme.palette.customBackground\n  },\n  '& .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfMonth .rdrStartEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge, .rdrEndEdge, .rdrDayEndOfMonth .rdrDayInPreview, .rdrDayEndOfMonth .rdrDayStartPreview, .rdrDayEndOfWeek .rdrDayInPreview, .rdrDayEndOfWeek .rdrDayStartPreview, .rdrDayEndPreview': {\n    borderTopRightRadius: '2rem',\n    borderBottomRightRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfWeek .rdrEndEdge, .rdrDayStartOfMonth .rdrDayInPreview, .rdrDayStartOfMonth .rdrDayEndPreview, .rdrDayStartOfWeek .rdrDayInPreview, .rdrDayStartOfWeek .rdrDayEndPreview, .rdrDayStartPreview': {\n    borderTopLeftRadius: '2rem',\n    borderBottomLeftRadius: '2rem'\n  },\n  '& .rdrStartEdge, .rdrDayStartOfWeek .rdrInRange, .rdrDayStartOfMonth .rdrInRange, .rdrDayStartOfMonth .rdrEndEdge, .rdrDayStartOfWeek .rdrEndEdge': {\n    left: 0\n  },\n  '& .rdrEndEdge, .rdrDayEndOfWeek .rdrInRange, .rdrDayEndOfMonth .rdrInRange, .rdrDayEndOfWeek .rdrStartEdge': {\n    right: 0\n  },\n  '& .rdrSelected, .rdrInRange, .rdrStartEdge, .rdrEndEdge': {\n    top: '0px',\n    bottom: '0px',\n  },\n  '& .rdrMonths': {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  '& .rdrDay': {\n    marginBottom: \"1px\",\n    '& span': {\n      top: '0px',\n      bottom: '0px'\n    }\n  },\n  '& .rdrMonthsHorizontal': {\n    overflowY: 'hidden'\n  },\n  '& .rdrDateInput:first-of-type:before': {\n    content: '\"\"',\n    backgroundImage: `url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' class='MuiSvgIcon-root' focusable='false' aria-hidden='true' viewBox='0 0 24 24' data-testid='DateRangeIcon'%3E%3Cpath d='M9 11H7v2h2zm4 0h-2v2h2zm4 0h-2v2h2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V9h14z' fill='${theme.palette.text.secondary}'/%3E%3C/svg%3E\")`,\n    width: \"0.75rem\",\n    height: \"0.75rem\",\n    display: \"block\",\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    left: \"0.75rem\"\n  },\n  '& .rdrStaticRangeSelected span': {\n    color: theme.palette.primary.main\n  },\n  '& .rdrDayToday .rdrDayNumber span:after': {\n    background: theme.palette.secondary.main,\n    width: \"0.25rem\",\n    height: \"0.25rem\",\n    borderRadius: \"50%\"\n  }\n}));\n\nexport const returnFormattedDates = ({ startDateObject, endDateObject }) => {\n  return {\n    startDate: format(startDateObject, 'yyyy-MM-dd'),\n    endDate: format(endDateObject, 'yyyy-MM-dd')\n  }\n}","import { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport { useMediaQuery } from '@mui/material';\nimport { keyframes } from '@mui/system';\n\nimport AggregationType from './AggregationType';\nimport { AggregationTypeMetadata } from './DateRangePickerUtils';\nimport { useContext } from 'react';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { KAMPALA } from '../../Utils/GlobalVariables';\nimport { useTheme } from '@emotion/react';\nimport RadioButtonCheckedIcon from '@mui/icons-material/RadioButtonChecked';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\n\nconst pulse = keyframes`\n  0% { opacity: 1; }\n  50% { opacity: 0.6; }\n  100% { opacity: 1; }\n`;\n\nexport default function AggregationTypeToggle({ aggregationType, setAggregationType }) {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const theme = useTheme();\n\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n  const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  // Filter out AggregationType.minute if the school is Kampala\n  const aggregationTypesToShow = Object.values(AggregationType).filter(type => {\n    if (currentSchoolID === KAMPALA && type === AggregationType.minute) {\n      return false;\n    }\n    return true;\n  });\n\n  const handleChange = (_, newType) => {\n    if (newType !== null) {\n      setAggregationType(newType);\n    }\n  };\n\n\n  return (\n    <ToggleButtonGroup\n      fullWidth={extraSmallScreen}\n      color=\"primary\"\n      value={aggregationType}\n      exclusive\n      onChange={handleChange}\n      aria-label=\"aggregation type toggle for graph average\"\n      size=\"small\"\n      sx={{ height: \"100%\", [theme.breakpoints.down('sm')]: { width: '100%' } }}\n      orientation={isLargeScreen ? \"vertical\" : \"horizontal\"}\n    >\n      {Object.values(aggregationTypesToShow).map(type => (\n        <ToggleButton\n          key={type}\n          size=\"small\"\n          sx={{ textTransform: \"capitalize !important\", px: 1.25, py: 0.5, color: \"text.secondary\" }}\n          value={type}\n          aria-label={type}\n        >\n          {/* Show pulsing red icon if type === AggregationType.minute */}\n          {type === AggregationType.minute && (\n            <RadioButtonCheckedIcon\n              sx={{\n                ...(isLargeScreen ? {\n                  position: 'absolute',\n                  left: '50%',\n                  transform: 'translateX(calc(-50% - 1.25rem))',\n                } : {\n                  mr: 0.3,\n                }),\n                color: AQI_Database[3].color.Light,\n                fontSize: \"0.75rem\",\n                animation: `${pulse} 2s infinite ease-in-out`,\n              }}\n            />\n          )}\n\n          {AggregationTypeMetadata[type]?.label || \"\"}\n        </ToggleButton>\n      ))}\n    </ToggleButtonGroup>\n  );\n}","import { useQuery } from '@tanstack/react-query';\nimport { useContext } from 'react';\n\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getChartApiUrl } from '../API/ApiUrls';\n\nconst useChartData = (chartID) => {\n    const { allChartsConfigs, currentSchoolID } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartID];\n\n    return useQuery({\n        queryKey: ['chartData', chartID, chartConfig, currentSchoolID],\n        queryFn: async () => {\n            const url = getChartApiUrl({\n                endpoint: chartConfig.endpoint,\n                school_id: currentSchoolID,\n                queryParams: chartConfig.queryParams\n            });\n            return fetchDataFromURL({ url });\n        },\n        enabled: !!currentSchoolID && !!chartConfig?.endpoint, // only run when ready\n        staleTime: 1000 * 60 * 10, // 10-minute cache,\n        placeholderData: (prev) => prev // Keep data from previous queryKey to avoid flashing charts\n    });\n}\n\nexport default useChartData;\n","import { useState, useRef, useEffect, useContext } from 'react';\n\nimport { DateRangePicker, createStaticRanges } from 'react-date-range';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\n\nimport { Box, Grid, Stack, Typography, useMediaQuery, useTheme } from '@mui/material';\n\nimport { AggregationTypeMetadata, StyledDateRangePicker, returnCustomStaticRanges, returnFormattedDates } from './DateRangePickerUtils';\nimport AggregationTypeToggle from './AggregationTypeToggle';\nimport AggregationType from './AggregationType';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport { differenceInDays, isSameDay } from 'date-fns';\n\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport useChartData from '../../hooks/useChartData';\n\nconst CustomDateRangePicker = (props) => {\n  const { minDateOfDataset, chartIndex } = props;\n  const [isFirstRequest, setIsFirstRequest] = useState(true)\n\n  const { enqueueSnackbar } = useSnackbar();\n  const { isFetching } = useChartData(chartIndex);\n\n  const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n  const chartConfig = allChartsConfigs[chartIndex] || {};\n  const queryParams = chartConfig.queryParams || {};\n\n  const [aggregationType, setAggregationType] = useState(queryParams.aggregationType || AggregationType.hour);\n  const [dateRange, setDateRange] = useState(() => {\n    const { startDate, endDate } = queryParams;\n    if (startDate && endDate) {\n      return {\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        key: 'selection',\n      };\n    }\n    // Default if not set\n    return {\n      startDate: null,\n      endDate: null,\n      key: 'selection',\n    };\n  });\n\n  const today = new Date();\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n  // Set aggregationType\n  useEffect(() => {\n    // Initialize with the range of the first static range (default)\n    const defaultRange = {\n      ...returnCustomStaticRanges({\n        aggregationType: aggregationType || AggregationType.hour,\n        minDateOfDataset\n      })[0].range(), key: 'selection'\n    };\n    setDateRange(defaultRange);\n  }, [aggregationType]);\n\n  // Handle date range change → update DashboardContext queryParams\n  useEffect(() => {\n    // Early return if this is the first request (already fetched by useChartData hook)\n    if (isFirstRequest) {\n      setIsFirstRequest(false);\n      return;\n    }\n\n    const { startDate, endDate } = dateRange || {};\n    if (!startDate || !endDate) return;\n\n    // Start date and end date can't be the same date\n    if (isSameDay(startDate, endDate)) {\n      // No need to display error message as this is usually caused when only the start date is selected\n      return;\n    }\n\n    // Restrict the selection to only max days per aggregationType\n    const maxAllowedDays = AggregationTypeMetadata[aggregationType]?.maxDays;\n    if (differenceInDays(endDate, startDate) > maxAllowedDays) {\n      enqueueSnackbar(`${AggregationTypeMetadata[aggregationType]} average is limited to max ${maxAllowedDays}d`, SnackbarMetadata.error);\n      return;\n    }\n\n    // Change the config\n    const formattedDates = returnFormattedDates({\n      startDateObject: startDate,\n      endDateObject: endDate\n    });\n    updateIndividualChartConfigQueryParams(chartIndex, {\n      aggregationType,\n      startDate: formattedDates.startDate,\n      endDate: formattedDates.endDate\n    });\n\n  }, [dateRange]);\n\n  // Control displaying / hiding of the date range picker\n  const [showPickerPanel, setShowPickerPanel] = useState(false);\n  const paperRef = useRef(null);\n\n  // Hide or show the date-range-picker panel on user's manual input\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (paperRef.current && !paperRef.current.contains(event.target)) {\n        setShowPickerPanel(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [paperRef]);\n\n  // Hide the panel on data fetching done\n  useEffect(() => {\n    if (!isFetching && showPickerPanel) {\n      setShowPickerPanel(false);\n    }\n  }, [isFetching]);\n\n  return (\n    <>\n      <Grid item alignItems={showPickerPanel ? \"start\" : \"stretch\"} xs sm=\"auto\" lg>\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5} width=\"100%\">\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Averaging Period</Typography> : null\n          }\n          <AggregationTypeToggle\n            aggregationType={aggregationType}\n            setAggregationType={setAggregationType}\n            smallScreen={smallScreen}\n          />\n        </Stack>\n      </Grid>\n\n      <Grid\n        item\n        sx={{\n          height: \"2rem\",\n          flex: 1,\n          [theme.breakpoints.up('lg')]: { minHeight: '4rem' }\n          // width: { [theme.breakpoints.down(\"sm\")]: { width: \"100%\" } },\n        }}\n      >\n        <Stack direction=\"column\" alignItems=\"stretch\" gap={0.5}>\n          {\n            isLargeScreen ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Date Range</Typography> : null\n          }\n          <StyledDateRangePicker\n            showPickerPanel={showPickerPanel}\n            smallScreen={smallScreen}\n            ref={paperRef}\n            elevation={8}\n            onClick={() => setShowPickerPanel(true)}\n            sx={{ position: \"relative\" }}\n          >\n\n            <Box\n              sx={{\n                transition: \"filter 0.2s ease-in-out\"\n              }}\n            >\n              <DateRangePicker\n                ranges={[dateRange]}\n                onChange={(ranges) => {\n                  if (!ranges) return;\n                  setDateRange(ranges.selection);\n                }}\n                staticRanges={createStaticRanges(\n                  returnCustomStaticRanges({ minDateOfDataset, aggregationType })\n                )}\n                inputRanges={[]}\n                rangeColors={[\n                  theme.palette.primary.main,\n                  theme.palette.secondary.main,\n                  theme.palette.text.secondary,\n                ]}\n                minDate={minDateOfDataset}\n                maxDate={today}\n                months={1}\n                showMonthAndYearPickers={true}\n                direction=\"vertical\"\n                fixedHeight={true}\n                preventSnapRefocus={true}\n                startDatePlaceholder=\"Start Date\"\n                endDatePlaceholder=\"End Date\"\n                editableDateInputs={true}\n                showMonthArrow={true}\n                weekStartsOn={1}\n              />\n            </Box>\n          </StyledDateRangePicker>\n        </Stack>\n      </Grid >\n\n    </>\n  );\n};\n\nexport default CustomDateRangePicker;\n","import { createContext, useMemo, useState, useContext } from 'react';\n\nconst AxesPickerContext = createContext();\n\nexport function AxesPickerProvider({ children }) {\n    const [hAxis, setHAxis] = useState();\n    const [vAxis, setVAxis] = useState();\n\n    const contextValue = useMemo(() => ({\n        hAxis, setHAxis,\n        vAxis, setVAxis\n    }), [hAxis, vAxis]);\n\n    return (\n        <AxesPickerContext.Provider value={contextValue}>\n            {children}\n        </AxesPickerContext.Provider>\n    );\n}\n\n// Custom hook \nexport const useAxesPicker = () => useContext(AxesPickerContext);","import { useContext, useEffect, useState } from 'react';\nimport { Select, MenuItem, FormControl, InputLabel, Button, Stack, Grid, CircularProgress } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useAxesPicker } from '../../ContextProviders/AxesPickerContext';\nimport { ChartAPIendpointsOrder } from \"../../API/Utils\";\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\n// Define custom styled components for shared border radius\nconst LeftSelect = styled(FormControl)(({ theme }) => ({\n  borderTopRightRadius: 0,\n  borderBottomRightRadius: 0,\n  textTransform: 'capitalize',\n  minWidth: '150px',\n  maxWidth: '250px',\n  '& .MuiOutlinedInput-root': {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  '& .MuiOutlinedInput-notchedOutline': {\n    borderRight: 'none'\n  },\n  '& .Mui-focused .MuiOutlinedInput-notchedOutline': {\n    borderRight: `2px solid ${theme.palette.primary.main}`\n  }\n}));\n\nconst RightSelect = styled(FormControl)(({ theme }) => ({\n  borderTopLeftRadius: 0,\n  borderBottomLeftRadius: 0,\n  textTransform: 'capitalize',\n  minWidth: '150px',\n  maxWidth: '250px',\n  '& .MuiOutlinedInput-root': {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n}));\n\nconst AxesPicker = (props) => {\n  const { currentSchoolID, setIndividualChartConfig } = useContext(DashboardContext);\n  const { chartID, allowedAxes, selectedAxes, dataType } = props;\n  const { hAxis, vAxis, setHAxis, setVAxis } = useAxesPicker();\n  const [isFetchingData, setIsFetchingData] = useState(false);\n  const [shouldDisableApplyButton, setShouldDisableApplyButton] = useState(true);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes || {};\n\n    if (!(receivedHAxis && receivedVAxis)) {\n      setShouldDisableApplyButton(true);\n      return;\n    }\n\n    setHAxis(receivedHAxis);\n    setVAxis(receivedVAxis);\n  }, [selectedAxes, setHAxis, setVAxis]);\n\n  useEffect(() => {\n    const { hAxis: receivedHAxis, vAxis: receivedVAxis } = selectedAxes;\n    if (!(receivedHAxis && receivedVAxis)) {\n      return;\n    };\n\n    setShouldDisableApplyButton(hAxis === receivedHAxis && vAxis === receivedVAxis);\n\n  }, [hAxis, vAxis, selectedAxes]);\n\n  const applyChanges = () => {\n    if (!(vAxis && hAxis)) return;\n\n    setIndividualChartConfig(chartID, {\n      endpoint: ChartAPIendpointsOrder[chartID],\n      school_id: currentSchoolID,\n      queryParams: {\n        dataType: dataType,\n        sensorX: hAxis,\n        sensorY: vAxis\n      }\n    });\n  }\n\n  const renderApplyButtonLabel = () => {\n    return (\n      isFetchingData ? <CircularProgress disableShrink size=\"1.4375rem\" color=\"inherit\" /> : \"APPLY\"\n    )\n  };\n\n  // Disable option if the current dataType isn't in its allowedDataTypes array\n  const shouldDisableOption = (option) => {\n    return !option.allowedDataTypes.includes(dataType);\n  }\n\n  return (\n    <Grid container item spacing={1} alignItems=\"center\">\n      <Grid item xs={12} sm=\"auto\">\n        <Stack direction=\"row\" spacing={0}>\n          <LeftSelect fullWidth size=\"small\">\n            <InputLabel id=\"x-axis-select-label\">X Axis</InputLabel>\n            <Select\n              labelId=\"x-axis-select-label\"\n              value={hAxis || selectedAxes?.hAxis || null}\n              label=\"X Axis\"\n              onChange={(event) => {\n                setHAxis(event.target.value)\n              }}\n              autoWidth\n            >\n              {allowedAxes?.map(option => (\n                <MenuItem\n                  key={option.sensor}\n                  value={option.sensor}\n                  disabled={option.sensor === vAxis || shouldDisableOption(option)}\n                  sx={{ textTransform: 'capitalize' }}\n                >\n                  {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                </MenuItem>\n              ))}\n            </Select>\n          </LeftSelect>\n          <RightSelect fullWidth size=\"small\">\n            <InputLabel id=\"y-axis-select-label\">Y Axis</InputLabel>\n            <Select\n              labelId=\"y-axis-select-label\"\n              value={vAxis || selectedAxes?.vAxis || null}\n              label=\"Y Axis\"\n              onChange={(event) => {\n                setVAxis(event.target.value)\n              }}\n              autoWidth\n            >\n              {allowedAxes?.map(option => (\n                <MenuItem\n                  key={option.sensor}\n                  value={option.sensor}\n                  disabled={option.sensor === hAxis || shouldDisableOption(option)}\n                  sx={{ textTransform: 'capitalize' }}\n                >\n                  {option.sensor}{shouldDisableOption(option) && \" (No Data)\"}\n                </MenuItem>\n              ))}\n            </Select>\n          </RightSelect>\n        </Stack>\n      </Grid>\n      <Grid item xs={12} sm=\"auto\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          sx={{ height: \"100%\" }}\n          onClick={applyChanges}\n          disabled={shouldDisableApplyButton || isFetchingData}\n        >\n          {renderApplyButtonLabel()}\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AxesPicker;\n","import { Alert, Box } from \"@mui/material\";\n\nconst NoChartToRender = ({ customMessage, dataType, height, selectableAxes }) => {\n    let messagePrefix = \"This sensor \";\n    let messageSuffix = \" data. Choose a different sensor or data type.\";\n\n    if (selectableAxes) {\n        messagePrefix = \"This pair of sensors \";\n        messageSuffix = \" correlation data. Choose another pair or a different data type.\"\n    }\n\n    return (\n        <Box height={height}>\n            <Alert severity=\"error\" sx={{ my: 2 }}>\n                {\n                    customMessage ? customMessage : (\n                        <>\n                            {messagePrefix}\n                            does not have&nbsp;\n                            <Box component=\"span\" textTransform=\"capitalize\">\n                                {dataType}\n                            </Box>\n                            {messageSuffix}\n                        </>\n                    )\n                }\n            </Alert>\n        </Box>\n    )\n}\n\nexport default NoChartToRender;","export const returnHoursFromMinutesPastMidnight = (minutes) => {\n  const hoursPastMidnight = Math.floor(minutes / 60);\n  return hoursPastMidnight.toString().padStart(2, '0') + ':00';\n};\n\nexport const HOURS = Array.from({ length: 24 }, (_, i) => {\n  const minutesPastMidnight = i * 60;\n  return {\n    label: returnHoursFromMinutesPastMidnight(minutesPastMidnight),\n    value: minutesPastMidnight\n  };\n});\n\nexport const PREDEFINED_TIMERANGES = {\n  allday: { id: \"allday\", label: \"All Day\", start: HOURS[0].value, end: HOURS[HOURS.length - 1].value, timeRangeLabel: \"0-23h\" },\n  schoolHour: { id: \"schoolHour\", label: \"School Hour\", start: HOURS[7].value, end: HOURS[17].value, timeRangeLabel: \"7-17h\" },\n  custom: { id: \"custom\", label: \"Custom\" }\n};\n\n\n\n","import { Box, FormControl, InputLabel, Select, MenuItem, Stack } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport { isValidArray } from '../../../../../Utils/UtilFunctions';\n\nexport const SimplePicker = (props) => {\n  const { icon, label, value, options, handleChange, disabled, isExtraSmall, ...otherProps } = props;\n  const theme = useTheme();\n\n  return (\n    <Stack\n      direction=\"row\"\n      gap={icon ? 1 : 0}\n      alignItems=\"center\"\n      {...otherProps}\n    >\n      <Box\n        aria-hidden={true}\n        sx={{\n          '& .MuiSvgIcon-root': {\n            color: disabled ? theme.palette.text.secondary : theme.palette.primary.main,\n            verticalAlign: \"middle\"\n          }\n        }}\n      >\n        {icon}\n      </Box>\n\n      <FormControl\n        fullWidth\n        size='small'\n        disabled={disabled}\n        sx={{\n          minWidth: \"5rem\",\n          marginLeft: \"0 !important\",\n          \"& .MuiInputBase-root\": {\n            [theme.breakpoints.down('sm')]: {\n              fontSize: isExtraSmall ?? \"0.75rem\"\n            }\n          }\n        }}\n      >\n        <InputLabel id={`${label}-picker-label`}>{label}</InputLabel>\n        <Select\n          labelId={`${label}-picker-label`}\n          id={`${label}-picker`}\n          value={value}\n          label={label}\n          onChange={handleChange}\n        >\n          {isValidArray(options) &&\n            options.map((option) => (\n              <MenuItem key={option.value} value={option.value} is>\n                {option.label}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n    </Stack >\n  );\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { Box, Stack, ToggleButtonGroup, ToggleButton, useMediaQuery, useTheme, Typography } from \"@mui/material\";\nimport WatchLaterIcon from '@mui/icons-material/WatchLater';\nimport { SimplePicker } from \"../AirQuality/AirQualityAlerts/AlertModificationDialog/AlertPropertyComponents/SimplePicker\";\nimport { HOURS } from \"./TimeRangeUtils\";\nimport { isValidArray } from \"../../Utils/UtilFunctions\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelector = (props) => {\n    const { timeRange, defaultTimeRange, disabled, handleChange, isResponsive = false, hasTitle = false } = props;\n\n    const theme = useTheme();\n    const isLargeScreen = useMediaQuery(theme => theme.breakpoints.up('lg'));\n\n    const [displayFromToPickers, setDisplayFromToPickers] = useState(false);\n\n    // Always normalize into a [string, string]\n    const [startTime, endTime] = isValidArray(timeRange) ? timeRange : defaultTimeRange;\n\n    const [predefinedRange, setPredefinedRange] = useState(() => {\n        // Sync initial toggle‑button state\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        return match ? match.id : PREDEFINED_TIMERANGES.custom.id;\n    });\n\n    // When `timeRange` actually changes, keep buttons in sync:\n    useEffect(() => {\n        const match = Object.values(PREDEFINED_TIMERANGES)\n            .find(r => r.start === startTime && r.end === endTime);\n        setPredefinedRange(match ? match.id : PREDEFINED_TIMERANGES.custom.id);\n    }, [startTime, endTime]);\n\n    const handleModeChange = useCallback((_, newMode) => {\n        if (!newMode) return;\n        setPredefinedRange(newMode);\n        const range = PREDEFINED_TIMERANGES[newMode];\n        if (range.start != null && range.end != null) {\n            handleChange([range.start, range.end]);\n        }\n\n        // only display the hour pickers if custom time is used\n        setDisplayFromToPickers(newMode === PREDEFINED_TIMERANGES.custom.id);\n    }, [handleChange]);\n\n    // Add useMediaQuery to detect xs screens\n    const extraSmallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n    return (\n        <Stack direction={hasTitle ? \"column\" : \"row\"} alignItems=\"start\" gap={0.5} width=\"100%\">\n            {\n                hasTitle ?\n                    (isLargeScreen && isResponsive ? <Typography color=\"text.secondary\" sx={{ textTransform: \"uppercase\" }}>Time Range</Typography> : null)\n                    : (\n                        <Box\n                            aria-hidden\n                            sx={{\n                                '& .MuiSvgIcon-root': {\n                                    color: disabled\n                                        ? theme.palette.text.secondary\n                                        : theme.palette.primary.main,\n                                    verticalAlign: \"-webkit-baseline-middle\"\n                                }\n                            }}\n                        >\n                            <WatchLaterIcon sx={{ mt: 0.75 }} />\n                        </Box>\n                    )\n            }\n\n            <Stack direction=\"column\" width=\"100%\" gap={1.5}>\n                <ToggleButtonGroup\n                    fullWidth={extraSmallScreen}\n                    color={disabled ? \"standard\" : \"primary\"}\n                    value={predefinedRange}\n                    exclusive\n                    onChange={handleModeChange}\n                    size=\"small\"\n                    disabled={disabled}\n                    orientation={isResponsive ?\n                        (isLargeScreen ? \"vertical\" : \"horizontal\") :\n                        \"horizontal\"\n                    }\n                >\n                    {Object.values(PREDEFINED_TIMERANGES).map((range, idx, arr) => (\n                        <ToggleButton\n                            key={range.id}\n                            value={range.id}\n                            aria-label={range.label}\n                            sx={{\n                                color: \"text.secondary\",\n                                textTransform: 'none',\n                                px: (idx === arr.length - 1) ? 2 : 1,\n                                py: 0.5,\n                                flex: (idx === arr.length - 1) ? 1 : undefined\n                            }}\n                            size=\"small\"\n                        >\n                            {range.label}\n                            {range.timeRangeLabel && (\n                                <>\n                                    &nbsp;({range.timeRangeLabel})\n                                </>\n                            )\n                            }\n                        </ToggleButton>\n                    ))}\n                </ToggleButtonGroup>\n\n                {\n                    displayFromToPickers ? (\n                        <Stack direction=\"row\" flex={1} gap={1}>\n                            <SimplePicker\n                                label=\"From\"\n                                value={startTime}\n                                options={HOURS}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={(e) => {\n                                    // Set toValue to null if new startTime is larger than endTime's current value\n                                    if (e.target.value > endTime) {\n                                        handleChange([e.target.value, null]);\n                                    }\n                                    // Else, proceed with startTime\n                                    else {\n                                        handleChange([e.target.value, endTime])\n                                    }\n                                }}\n                                flex={1}\n                            />\n                            <SimplePicker\n                                label=\"To\"\n                                value={endTime}\n                                options={HOURS.filter(h => h.value > startTime)}\n                                disabled={disabled || predefinedRange !== \"custom\"}\n                                handleChange={e => handleChange([startTime, e.target.value])}\n                                flex={1}\n                            />\n                        </Stack>\n                    ) : null\n                }\n            </Stack>\n        </Stack>\n    );\n};\n\n\nexport default TimeRangeSelector;\n","import { useContext, useState } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport TimeRangeSelector from \"./TimeRangeSelector\";\nimport { PREDEFINED_TIMERANGES } from \"./TimeRangeUtils\";\n\nconst TimeRangeSelectorWrapperForDataHook = (props) => {\n    const { defaultTimeRange, isResponsive, hasTitle, chartIndex } = props;\n\n    const { allChartsConfigs, updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n    const chartConfig = allChartsConfigs[chartIndex] || {};\n    const queryParams = chartConfig.queryParams || {};\n    const { startTime, endTime } = queryParams;\n\n    const [timeRange, setTimeRange] = useState([\n        startTime ?? defaultTimeRange.startTime,\n        endTime ?? defaultTimeRange.endTime,\n    ]);\n\n    return (\n        <TimeRangeSelector\n            timeRange={timeRange}\n            defaultTimeRange={defaultTimeRange}\n            handleChange={(newRange) => {\n                // Handle timeRange change → update DashboardContext queryParams\n                setTimeRange(newRange);\n\n                const [startTime, endTime] = newRange || [];\n                if (startTime === null || endTime === null || startTime > endTime) return;\n\n                // Change the config\n                if (startTime === PREDEFINED_TIMERANGES.allday.start && endTime === PREDEFINED_TIMERANGES.allday.end) {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime: null,\n                        endTime: null\n                    });\n                } else {\n                    updateIndividualChartConfigQueryParams(chartIndex, {\n                        startTime,\n                        endTime\n                    });\n                }\n            }}\n            isResponsive={isResponsive}\n            hasTitle={hasTitle}\n        />\n    );\n}\n\nexport default TimeRangeSelectorWrapperForDataHook;","/* eslint-disable */\n\nimport { useContext, useEffect, useMemo, useState, useCallback } from 'react';\n\nimport { GoogleContext } from '../../ContextProviders/GoogleContext';\n\nimport { Box, Grid, Stack } from '@mui/material/';\n\nimport { useTheme } from '@mui/material/styles';\nimport SeriesSelector from './SubchartUtils/SeriesSelector';\nimport { generateRandomID, returnGenericOptions, returnChartControlUI, ChartControlType, addTouchEventListenerForChartControl } from '../GoogleChartHelper';\n\nimport GoogleChartStyleWrapper from './SubchartUtils/GoogleChartStyleWrapper';\n\nimport LoadingAnimation from '../../Components/LoadingAnimation';\n\nimport NivoCalendarChart from './NivoCharts/NivoCalendarChart/NivoCalendarChart';\nimport { generateSvgFillGradient, BackgroundGradient } from '../../Utils/Gradient/GradientUtils';\n\nimport CustomDateRangePicker from '../../Components/DateRangePicker/CustomDateRangePicker'\nimport { isValidArray } from '../../Utils/UtilFunctions';\nimport { returnSelectedDataType } from '../../Utils/AirQuality/DataTypes';\n\nimport AxesPicker from '../../Components/AxesPicker/AxesPicker';\n\nimport NoChartToRender from './NoChartToRender';\nimport { PREDEFINED_TIMERANGES } from '../../Components/TimeRange/TimeRangeUtils';\nimport TimeRangeSelectorWrapperForDataHook from '../../Components/TimeRange/TimeRangeSelectorWrapperForDataHook';\n\nexport default function SubChart(props) {\n  // Props\n  const { chartData, subchartIndex, windowSize, isPortrait, height, maxHeight, selectedDataType, allowedDataTypes } = props;\n\n  // Use GoogleContext for loading and manipulating the Google Charts\n  const google = useContext(GoogleContext);\n\n  // States of the Google Charts\n  const [dataTable, setDataTable] = useState();\n  const [chartWrapper, setChartWrapper] = useState();\n  const [controlWrapper, setControlWrapper] = useState();\n\n  const [previousChartData, setPreviousChartData] = useState();\n\n  // Get the current theme\n  const theme = useTheme();\n\n  // To determine the first time the chart renders to show/hide the LoadingAnimation\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  // To determine if the charts should be rendered or not\n  const [shouldRenderChart, setShouldRenderChart] = useState(true);\n  const [renderChartNow, setRenderChartNow] = useState(false);\n\n  // Keep track of the columns (series) of the chart\n  const [allInitialColumns, setAllInitialColumns] = useState();\n  const [dataColumns, setDataColumns] = useState();\n  const [initialVAxisRange, setInitialVAxisRage] = useState();\n\n  // Define the DOM container's ID for drawing the google chart inside\n  const [chartID, __] = useState(generateRandomID());\n\n  // Get the options object for chart\n  const options = useMemo(() => {\n    return returnGenericOptions({ ...props, theme });\n  }, [props, theme, chartData.chartType]);\n\n  // State to store transformed data for CalendarChart\n  const [calendarDataArray, setCalendarDataArray] = useState(null);\n\n  // Early exit for 'Calendar' chartType\n  if (chartData.chartType === 'Calendar') {\n    useEffect(() => {\n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      if (!isValidArray(dataArray)) {\n        setShouldRenderChart(false);\n        return; // early return if there is no data to render\n      }\n\n      setCalendarDataArray(dataArray)\n      setShouldRenderChart(true);\n    }, [chartData]);\n\n    if (!calendarDataArray) {\n      return (\n        <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n          <LoadingAnimation />\n        </Box>\n      )\n    }\n\n    return (\n      shouldRenderChart ? (\n        <NivoCalendarChart\n          dataArray={calendarDataArray}\n          valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n          isPortrait={isPortrait}\n          options={options}\n          windowSize={windowSize}\n        />\n      ) : (\n        <>\n          <NoChartToRender dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })} />\n          <NivoCalendarChart\n            dataArray={[]}\n            valueRangeBoxTitle={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes, showUnit: true })}\n            isPortrait={isPortrait}\n            options={options}\n            windowSize={windowSize}\n          />\n        </>\n      )\n    );\n  }\n\n  // Properties for chart control (if existed)\n  let hasChartControl = false;\n  let chartControlOptions;\n  // Only show the chart control if:\n  // It exists in the database (either for all subcharts or just for a particular subchart)\n  // And if the chart is currently not shown on homePage\n  let chartControl = chartData.control || chartData.subcharts?.[subchartIndex].control;\n  if (chartControl) {\n    hasChartControl = true;\n\n    // Get the options for chartControl if hasChartControl\n    chartControlOptions = {\n      ...chartControl.options,\n      ui: returnChartControlUI({\n        chartControl,\n        mainChartData: chartData,\n        mainChartOptions: options,\n        subchartIndex,\n        theme,\n        isPortrait\n      })\n    };\n\n    // Swap touch events for mouse events on ChartRangeControl\n    // as it doesn't support touch events on mobile\n    if (chartControl.controlType === 'ChartRangeFilter') {\n      useEffect(() => {\n        const cleanupTouchEventListener = addTouchEventListenerForChartControl({ controlWrapper, chartID });\n        return cleanupTouchEventListener;\n      }, [controlWrapper]);\n    }\n  }\n\n  // Properties for selecting (showing or hiding) the serie(s)\n  const seriesSelector = options.seriesSelector || false;\n\n  // Properties for date-range-picker and time range selector\n  const dateRangePicker = options.dateRangePicker || null;\n  const timeRangeSelector = options.timeRangeSelector || null;\n\n  // Properties for data formatters\n  const formatters = options.formatters || null;\n\n  // Properties for selectableAxes\n  let selectableAxes = chartData.selectableAxes || null;\n  if (selectableAxes) {\n    if (isValidArray(selectableAxes.allowedAxes)) {\n      if (selectableAxes.allowedAxes.length <= 2) selectableAxes = null; // don't display selectableAxes if number of allowedSensors is less than 3\n    }\n  }\n\n  // Set new options prop and re-render the chart if theme or isPortrait changes\n  useEffect(() => {\n    if (seriesSelector) handleSeriesSelection({ newDataColumns: dataColumns }); // this function set new options, too\n    else {\n      chartWrapper?.setOptions({\n        ...options\n      });\n\n      chartWrapper?.draw();\n      if (hasChartControl) {\n        controlWrapper?.setOptions(chartControlOptions);\n        controlWrapper?.draw();\n      }\n    }\n  }, [theme, isPortrait, windowSize]);\n\n  // Set new initialColumnsColors if the theme changes\n  // This only applies to when seriesSelector.method == \"setViewColumn\"\n  useEffect(() => {\n    if (!dataColumns) return;\n    if (seriesSelector && seriesSelector.method == \"setViewColumn\") {\n      setInitialColumnsColors({ dataColumns: dataColumns });\n      handleSeriesSelection({ newDataColumns: dataColumns });\n    }\n  }, [theme]);\n\n  const getInitialColumns = ({ chartWrapper, dataTable, seriesSelector }) => {\n    // Update the initial DataView's columns (often, all of the series are displayed initially)\n    var initialView = chartWrapper.getView();\n    // If (optional) columns is not specified in database\n    // Assign it from DataTable\n    if (initialView.columns == null) {\n      const viewFromDataTable = new google.visualization.DataView(dataTable);\n      chartWrapper.setView({\n        columns: viewFromDataTable.columns\n      });\n      initialView = chartWrapper.getView();\n    }\n\n    let shouldAssignDomainRoleToFistColumn = true; // variable to only assign type: 'domain' to the very first column\n    let dataSeriesIndex = 0;\n    const allInitialColumns = initialView.columns.map((col, index) => {\n      // A column can either be a number (that denotes the index of the sourceColumn) or an object\n      // The code below harmonize all columns to be an object to store crucial data to toggle their visibility\n      if (typeof col === 'number') col = {\n        role: shouldAssignDomainRoleToFistColumn ? 'domain' : 'data',\n        sourceColumn: col\n      }\n      col.label = dataTable.getColumnLabel(col.sourceColumn);\n      col.indexInAllInitialColumns = index;\n\n      shouldAssignDomainRoleToFistColumn = shouldAssignDomainRoleToFistColumn && false;\n\n      // Set the visibility of data column, \n      if (col.role === 'data') {\n        // If defaultSeriesToDisplayInitially is presented\n        // then, only show these series\n        if (seriesSelector.defaultSeriesToDisplayInitially) {\n          if (seriesSelector.defaultSeriesToDisplayInitially.includes(index)) {\n            col.selected = true;\n          }\n          else {\n            col.selected = false;\n          }\n        }\n        // If no defaultSeriesToDisplayInitially is presented\n        else {\n          // then, all data columns are selected if multiple series are selectable\n          if (seriesSelector.allowMultiple) {\n            col.selected = true;\n          } else {\n            // else for single serie selector, only first data column is selected\n            if (dataSeriesIndex === 0) {\n              col.selected = true;\n            } else {\n              col.selected = false;\n            }\n          }\n        }\n\n        col.seriesIndex = dataSeriesIndex;\n        dataSeriesIndex++;\n      }\n      return col;\n    });\n    setAllInitialColumns(allInitialColumns);\n    const initialVAxisRange = getInitialVAxisRange({ dataTable: dataTable, allInitialColumns: allInitialColumns });\n    setInitialVAxisRage(initialVAxisRange);\n    // To track selection, only get the columns that are:\n    // role === 'data'\n    // visibleInLegend !== false\n    const dataColumns = allInitialColumns.filter((col) => {\n      return col.role === 'data' && options.series?.[col.seriesIndex]?.visibleInLegend !== false;\n    });\n\n    if (seriesSelector.method === \"setViewColumn\") setInitialColumnsColors({ dataColumns: dataColumns });\n\n    setDataColumns(dataColumns);\n    return { initAllInitialColumns: allInitialColumns, initDataColumns: dataColumns };\n  };\n\n  const setInitialColumnsColors = ({ dataColumns }) => {\n    dataColumns.forEach((col) => {\n      // Assign inherit color to this data column\n      col.color = options.colors[col.seriesIndex % options.colors.length];\n      // Assign other inherit attributes from its serie object (if existed)\n      col.serieAttribute = options.series?.[col.seriesIndex];\n    });\n  }\n\n  const getInitialVAxisRange = ({ dataTable, allInitialColumns }) => {\n    let vAxisMin, vAxisMax;\n    allInitialColumns.forEach((col, index) => {\n      if (index === 0) return; // the first column is the domain (hAxis)\n      const range = dataTable.getColumnRange(col.sourceColumn);\n      if (!isNaN(range.min) && range.min) vAxisMin = vAxisMin ? Math.min(vAxisMin, range.min) : range.min;\n      if (!isNaN(range.max) && range.max) vAxisMax = vAxisMax ? Math.max(vAxisMax, range.max) : range.max;\n    });\n    return { min: vAxisMin, max: vAxisMax };\n  }\n\n  const handleSeriesSelection = useCallback(({\n    newDataColumns,\n    _allInitialColumns = allInitialColumns,\n    _chartWrapper = chartWrapper,\n    _controlWrapper = controlWrapper\n  }) => {\n    if (!_allInitialColumns) return;\n\n    setDataColumns(newDataColumns);\n\n    if (seriesSelector.method === \"toggleVisibility\" || seriesSelector.method === null) {\n      const hiddenSeriesObject = {};\n      newDataColumns.forEach((col) => {\n        if (!col.selected)\n          hiddenSeriesObject[col.seriesIndex] = {\n            color: 'transparent',\n            enableInteractivity: false,\n            visibleInLegend: false\n          }; // 'hide' the serie by making it transparent\n      });\n\n      _chartWrapper?.setOptions({\n        ...options,\n        series: {\n          ...options.series,\n          ...hiddenSeriesObject\n        }\n      });\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              series: {\n                ...options.series,\n                ...hiddenSeriesObject\n              }\n            }\n          }\n        });\n      }\n    }\n    else if (seriesSelector.method === \"setViewColumn\") {\n      let newViewColumns = [];\n      newViewColumns.push(0); // this is the domain column\n      newDataColumns.forEach((dataColumn) => {\n        if (dataColumn.selected) {\n          newViewColumns.push(dataColumn);\n          // Find this dataColumn's supporting columns (whose role !== 'data')\n          // A dataColumn has its supporting columns (can be many) follow it immediately\n          if (isValidArray(_allInitialColumns)) {\n            for (let i = dataColumn.indexIn_ + 1; i < _allInitialColumns.length; i++) {\n              if (_allInitialColumns[i].role !== 'data') {\n                newViewColumns.push(_allInitialColumns[i]);\n              }\n              // If this loop encounter the next dataColumn, break the loop, all supporting columns for this dataColumn have been discovered\n              else {\n                break;\n              }\n            }\n          }\n        }\n      });\n      _chartWrapper?.setView({ columns: newViewColumns });\n\n      const newOptions = { ...options };\n      // Preserve the initial vAxis range so that the vAxis doesn't shift based on the visible serie(s)\n      // newOptions.vAxis.viewWindow = {\n      //   min: (options.vAxis.viewWindow.min == null) ? initialVAxisRange.min : options.vAxis.viewWindow.min,\n      //   max: (options.vAxis.viewWindow.max == null) ? initialVAxisRange.max : options.vAxis.viewWindow.max,\n      // }\n      // Set the new color array\n      newOptions.colors = newDataColumns.filter((col) => col.selected).map((col) => col.color);\n      // Set the new series object (if any)\n      // this contains other series' attributes (lineWidth, seriesType...)\n      const series = {};\n      let selectedSeriesCount = 0;\n      newDataColumns.forEach((col) => {\n        if (!col.selected) return;\n        if (col.serieAttribute != null) {\n          series[selectedSeriesCount] = col.serieAttribute;\n        }\n        selectedSeriesCount++;\n      })\n      newOptions.series = series;\n      _chartWrapper?.setOptions(newOptions);\n\n      if (hasChartControl) {\n        const currentControlOptions = _controlWrapper?.getOptions();\n        _controlWrapper?.setOptions({\n          ...currentControlOptions,\n          ui: {\n            ...currentControlOptions.ui,\n            chartOptions: {\n              ...currentControlOptions.ui.chartOptions,\n              colors: newOptions.colors,\n              series: newOptions.series\n            },\n            chartView: {\n              columns: newViewColumns\n            }\n          }\n        });\n      }\n    }\n\n    // Call draw to apply the new DataView and 'refresh' the chart\n    _chartWrapper?.draw();\n\n    if (hasChartControl) {\n      _controlWrapper?.draw();\n    }\n  }, [allInitialColumns, options, seriesSelector, chartWrapper, controlWrapper, initialVAxisRange, hasChartControl]);\n\n  const reconstructFunctionFromJSONstring = (columns) => {\n    if (!columns) return;\n\n    const evaluatedColumns = [];\n    for (const column of columns) {\n      if (typeof column === 'number') {\n        // If it's a number, add it as-is\n        evaluatedColumns.push(column);\n      } else if (typeof column === 'object') {\n        if (column.calc && column.calc !== 'stringify') {\n          // If it's an object with a 'calc' property, evaluate the 'calc' function\n          // using new Function() and add the result to the evaluatedColumns array\n          const calcFunction = new Function(\"dataTable\", \"rowNum\", column.calc);\n          evaluatedColumns.push({\n            ...column,\n            calc: calcFunction,\n          });\n        } else {\n          // If it's an object without a 'calc' property, or with calc = 'stringify', add it as-is\n          evaluatedColumns.push(column);\n        }\n      }\n    }\n    return evaluatedColumns;\n  }\n\n  // Prepare to draw the chart if there is any change in chartData\n  // but only set flag renderChartNow if the chart should draw in the next rendering cycle\n  // to prevent chartID container not being mounted on time\n  useEffect(() => {\n    if (google && chartData) {\n      // Do not draw again if deep comparison between current chartData and previousChartData is true\n      if (JSON.stringify(chartData) === JSON.stringify(previousChartData)) return;\n      setPreviousChartData(chartData);\n\n      // Get and set the dataArray \n      const dataArray = chartData.dataArray\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].dataArray)\n        || null\n        || null;\n\n      const _shouldRenderChart = isValidArray(dataArray);\n      setShouldRenderChart(_shouldRenderChart);\n      if (_shouldRenderChart === true) {\n        setRenderChartNow(true);\n        const dataTable = google.visualization.arrayToDataTable(dataArray);\n\n        // Call functions for formatting the number if numberFormat/dateFormat is specified \n        if (formatters && typeof formatters === 'object') {\n          if (formatters.hasOwnProperty(\"numberFormatter\")) {\n            const numberFormat = new google.visualization.NumberFormat(formatters.numberFormatter.numberFormat);\n            formatters.numberFormatter.columns.forEach(col => numberFormat.format(dataTable, col));\n          }\n        }\n        setDataTable(dataTable);\n      }\n    }\n  }, [google, chartData]);\n\n  // Actually draw the chart now because chartID container is already mounted from shouldRenderChart flag\n  useEffect(() => {\n    if (renderChartNow === true) {\n      // Get dataColumn views\n      const columns = chartData.columns\n        || (chartData.subcharts\n          && chartData.subcharts[subchartIndex].columns)\n        || null\n        || null;\n      const reconstructedColumns = reconstructFunctionFromJSONstring(columns);\n\n      // Create chartWrapper\n      const thisChartWrapper = new google.visualization.ChartWrapper({\n        chartType: chartData.chartType,\n        dataTable: (!hasChartControl) ? dataTable : undefined,\n        options: options,\n        view: {\n          columns: reconstructedColumns\n        },\n        containerId: chartID\n      });\n      setChartWrapper(thisChartWrapper);\n\n      let thisControlWrapper;\n      if (hasChartControl) {\n        const thisDashboardWrapper = new google.visualization.Dashboard(\n          document.getElementById(`dashboard-${chartID}`));\n\n        google.visualization.events.addListener(thisDashboardWrapper, 'ready', onChartReady);\n\n        thisControlWrapper = new google.visualization.ControlWrapper({\n          controlType: chartControl.controlType,\n          options: chartControlOptions,\n          containerId: `control-${chartID}`\n        });\n        setControlWrapper(thisControlWrapper);\n\n        // Establish dependencies\n        thisDashboardWrapper.bind(thisControlWrapper, thisChartWrapper);\n\n        thisDashboardWrapper.draw(dataTable);\n      }\n      else {\n        google.visualization.events.addListener(thisChartWrapper, 'ready', onChartReady);\n        thisChartWrapper.draw();\n      }\n\n      // Run the seriesSelector for the first time\n      if (seriesSelector) {\n        const { initAllInitialColumns, initDataColumns } = getInitialColumns({ chartWrapper: thisChartWrapper, dataTable: dataTable, seriesSelector: seriesSelector });\n        handleSeriesSelection({\n          _allInitialColumns: initAllInitialColumns,\n          newDataColumns: initDataColumns,\n          _chartWrapper: thisChartWrapper,\n          _controlWrapper: thisControlWrapper\n        });\n      }\n\n      setRenderChartNow(false);\n    }\n  }, [renderChartNow])\n\n  const renderChart = () => {\n    const chartContainer = (\n      <Box\n        id={chartID}\n        sx={{ height: height, maxHeight: maxHeight }}\n      />\n    );\n\n    if (hasChartControl) {\n      return (\n        <Stack\n          id={`dashboard-${chartID}`}\n          direction={ChartControlType[chartControl.controlType]?.stackDirection || 'column-reverse'}\n          sx={{ height: '100%' }}\n        >\n          <Box\n            id={`control-${chartID}`}\n            sx={{\n              height: `calc(${height} / 8)`,\n              opacity: 0.8,\n              filter: 'saturate(0.3)'\n            }}\n          />\n          {chartContainer}\n        </Stack>\n      );\n    } else {\n      return chartContainer;\n    }\n  };\n\n  // Generate the gradient background if it exists in options parameter\n  const gradientBackgroundColor = options.gradientBackgroundColor;\n  let gradientBackgroundId, svgFillGradient;\n  if (gradientBackgroundColor) {\n    gradientBackgroundId = `${chartID}-backgroundGradient`;\n    svgFillGradient = generateSvgFillGradient({\n      colors: theme.palette.chart.colorAxes[gradientBackgroundColor].colors,\n      optionalMinValue: options.vAxis?.viewWindow?.min,\n      optionalMaxValue: options.vAxis?.viewWindow?.max\n    });\n  }\n\n  const onChartReady = () => {\n    if (!isFirstRender) return;\n    // Hide the circleProgress when chart finishes rendering the first time\n    setIsFirstRender(false);\n  };\n\n  const showAuxiliaryControls = () => {\n    if (!isFirstRender) {\n      return (\n        <>\n          {seriesSelector &&\n            <Grid item xs=\"auto\" lg={12}\n              sx={{\n                [theme.breakpoints.down('sm')]: { width: '100%' }\n              }}\n            >\n              <SeriesSelector\n                items={dataColumns}\n                allowMultiple={seriesSelector.allowMultiple}\n                seriesLabel={seriesSelector.seriesLabel}\n                selectorID={`${chartData.title}-selector`}\n                onSeriesSelection={handleSeriesSelection}\n                displayChip={false}\n              />\n            </Grid>\n          }\n\n          {\n            dateRangePicker &&\n            <CustomDateRangePicker\n              minDateOfDataset={new Date(dateRangePicker.minDate)}\n              chartIndex={chartData.id}\n            />\n          }\n\n          {selectableAxes &&\n            <AxesPicker\n              chartID={chartData.id}\n              allowedAxes={selectableAxes.allowedAxes}\n              selectedAxes={selectableAxes.selectedAxes}\n              dataType={selectedDataType}\n            />\n          }\n\n          {\n            timeRangeSelector &&\n            <Grid item xs=\"auto\" lg={12}\n              sx={{\n                [theme.breakpoints.down('sm')]: { width: '100%' }\n              }}\n            >\n              <TimeRangeSelectorWrapperForDataHook\n                defaultTimeRange={[PREDEFINED_TIMERANGES.allday.start, PREDEFINED_TIMERANGES.allday.end]}\n                handleChange={() => {\n                  return null;\n                }}\n                isResponsive\n                hasTitle\n                chartIndex={chartData.id}\n              />\n            </Grid>\n          }\n        </>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    shouldRenderChart ?\n      (\n        <GoogleChartStyleWrapper\n          isPortrait={isPortrait}\n          gradientBackgroundId={gradientBackgroundId}\n          className={chartData.chartType}\n          position=\"relative\"\n          height=\"100%\"\n          minHeight={chartData.chartType === 'Calendar' && '200px'}\n        >\n          {/* Conditionally display loading animation here */}\n          {isFirstRender && (\n            <Box sx={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\n              <LoadingAnimation />\n            </Box>\n          )}\n          <Grid container alignItems=\"start\"\n            sx={{\n            }}\n          >\n            <Grid lg={2} container item\n              sx={{\n                mt: 1,\n                ml: 2,\n                gap: 2,\n                [theme.breakpoints.down('lg')]: { gap: 1, ml: 0 }\n              }}\n            >\n              {showAuxiliaryControls()}\n            </Grid>\n            <Grid item xs>\n              {renderChart()}\n            </Grid>\n          </Grid>\n\n          {gradientBackgroundColor ? <BackgroundGradient id={gradientBackgroundId} colors={svgFillGradient} /> : null}\n        </GoogleChartStyleWrapper>\n      ) :\n      (\n        // <>\n        //   {selectableAxes &&\n        //     <Box mt={1}>\n        //       <AxesPicker\n        //         allowedAxes={selectableAxes.allowedAxes}\n        //         selectedAxes={selectableAxes.selectedAxes}\n        //         dataType={selectedDataType}\n        //       />\n        //     </Box>\n        //   }\n        <NoChartToRender\n          dataType={returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: allowedDataTypes })}\n          selectableAxes={selectableAxes}\n          // If the visualization has a series selector or control, we need to account for its height\n          // And since the height is a string, we need to parse it to a number before adding to it\n          height={seriesSelector || hasChartControl ? (parseFloat(height) * 1.2 + 'vw') : height}\n\n        />\n        // </>\n      )\n  );\n}","import { useState, useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport parse from 'html-react-parser';\nimport { useMediaQuery, useTheme } from '@mui/material';\nimport { replacePlainHTMLWithMuiComponents } from '../Utils/UtilFunctions';\n\nfunction CollapsibleSubtitle({ text, wordLimit = 40, reference }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const subtitleRef = useRef(null);\n\n  const words = text.split(' ');\n\n  // If not on mobile or words are within limit, just display the full text\n  if (!isMobile || words.length / wordLimit <= 1.4) {\n    return (\n      <Box>\n        <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n        {reference && (\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {parse(reference, { replace: replacePlainHTMLWithMuiComponents })}\n          </Typography>\n        )}\n      </Box>\n    );\n  }\n\n  let displayText = words.slice(0, wordLimit).join(' ');\n  const lastFullStop = displayText.lastIndexOf('.');\n\n  if (lastFullStop !== -1) {\n    displayText = displayText.slice(0, lastFullStop + 1);\n  }\n\n  // Do not collapse if the user clicks on the chart associated with the subtitle\n  const isClickWithinSharedParent = (event) => {\n    let { target } = event;\n    // .MuiContainer-root - Container for both the subtitle and the chart\n    const subtitleParent = subtitleRef.current.closest('.MuiContainer-root');\n    // Elements used to detect if the click is on a chart\n    const chartElements = new Set(['rect', 'path', 'svg', 'circle']);\n\n    while (target != null) {\n      // Check if a chart is clicked\n      if (chartElements.has(target?.tagName)) {\n        // If the chart element and the subtitle element share the same container\n        // it means that the click is on the chart associated with the subtitle\n        // As such, we should not collapse the subtitle\n        const targetParent = target.closest('.MuiContainer-root');\n        return targetParent === subtitleParent;\n      }\n      target = target.parentNode; // Move up the DOM tree\n    }\n    return false;\n  };\n\n  // Custom onClickAway handler\n  const handleOnClickAway = (event) => {\n    if (!isClickWithinSharedParent(event)) {\n      setIsExpanded(false);\n    }\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleOnClickAway}>\n      <Box ref={subtitleRef} onClick={() => setIsExpanded(!isExpanded)} style={{ cursor: 'pointer' }}>\n        {isExpanded ? (\n          <>\n            <Typography>{parse(text, { replace: replacePlainHTMLWithMuiComponents })}</Typography>\n            {reference && <Typography variant=\"caption\" color=\"text.secondary\">{parse(reference, { replace: replacePlainHTMLWithMuiComponents })}</Typography>}\n          </>\n        ) : (\n          <>\n            <Typography display=\"inline\">\n              {parse(displayText, { replace: replacePlainHTMLWithMuiComponents })}\n              ...\n            </Typography>\n            <Typography display=\"inline\" color=\"text.primary\" fontWeight=\"500\" sx={{ ml: 0.5, '& :hover': { textDecoration: 'underline' } }}>\n              See more\n            </Typography>\n          </>\n        )}\n      </Box>\n    </ClickAwayListener>\n  );\n}\n\nexport default CollapsibleSubtitle;\n","import { useContext, useState } from \"react\";\nimport { Button, Menu, MenuItem, Typography } from \"@mui/material\";\nimport { isValidArray } from \"../Utils/UtilFunctions\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { returnSelectedDataType } from \"../Utils/AirQuality/DataTypes\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst DataTypeDropDownMenu = ({ selectedDataType, dataTypes, chartID }) => {\n  const { updateIndividualChartConfigQueryParams } = useContext(DashboardContext);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  if (!isValidArray(dataTypes)) return null;\n\n  // If there is only 1 dataType, display it as a string of text\n  if (dataTypes.length <= 1) {\n    return (\n      <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n        {dataTypes[0].name_title}\n      </Typography>\n    )\n  }\n\n  // If there are more than 1 dataTypes to choose from, display a popup dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuItemClick = (dataType) => {\n    updateIndividualChartConfigQueryParams(chartID, { dataType })\n    handleClose();\n  };\n\n  return (\n    <>\n      <Button\n        id=\"data-type-drop-down-menu-button\"\n        aria-controls={open ? 'data-type-drop-down-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n        variant=\"text\"\n        size=\"small\"\n        sx={{\n          p: 0,\n          minWidth: 'unset',\n          borderRadius: 0,\n          verticalAlign: 'top',\n          textTransform: 'unset'\n        }}\n      >\n        <Typography display=\"inline\" variant=\"h6\" borderBottom=\"dotted\">\n          {returnSelectedDataType({ dataTypeKey: selectedDataType, dataTypes: dataTypes, showUnit: true })}\n        </Typography>\n        <ArrowDropDownIcon />\n      </Button>\n      <Menu\n        id=\"data-type-drop-down-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'data-type-drop-down-menu-button',\n        }}\n      >\n\n        {dataTypes.map((dataType, index) => (\n          <MenuItem\n            key={index}\n            sx={{ fontSize: '0.8rem' }}\n            onClick={() => handleMenuItemClick(dataType.key)}\n          >\n            {dataType.name_title}\n          </MenuItem>\n        ))}\n\n      </Menu>\n    </>\n  );\n};\n\nexport default DataTypeDropDownMenu;","import { styled } from '@mui/material/styles';\nimport { Tabs } from '@mui/material/';\n\nexport const StyledTabs = styled(Tabs, {\n  shouldForwardProp: (prop) => prop !== 'smallFontSize',\n})(({ theme, smallFontSize = '0.625rem' }) => ({\n  '& .MuiTabScrollButton-root': {\n    color: theme.palette.text.primary\n  },\n  '& .MuiTab-root': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: smallFontSize,\n      padding: theme.spacing(0.5)\n    },\n  },\n  '& .MuiSvgIcon-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: \"1rem\"\n    }\n  }\n}));\n\nexport default StyledTabs;","import { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box, Tab, useMediaQuery, Typography, Menu, MenuItem, Stack } from '@mui/material/';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nimport SubChart from './Subchart/SubChart';\n\nimport CollapsibleSubtitle from '../Components/CollapsibleSubtitle';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DataTypeDropDownMenu from './DataTypeDropDown';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport StyledTabs from '../Components/StyledTabs';\nimport NoChartToRender from './Subchart/NoChartToRender';\nimport useChartData from '../hooks/useChartData';\nimport LoadingAnimation from '../Components/LoadingAnimation';\n\nconst DEBOUNCE_IN_MILLISECONDS = 100;\n\nconst MAX_NUM_TABS_TO_DISPLAY = 3;\nconst INITIAL_DROPDOWN_MENU_TAB_INDEX = -1;\n\nconst ChartStyleWrapper = styled(Box)(({ theme }) => ({\n  // CSS for dark theme only\n  ...(theme.palette.mode === 'dark' && {\n    // De-saturate a bit\n    filter: 'saturate(0.85)',\n    // Invert iframe\n    '& .heat-map-iframe': {\n      filter: 'invert(0.848) hue-rotate(180deg)',\n    }\n  }),\n  // Center Calendar chart in wrapper\n  '& .Calendar [dir]:not(:empty)': {\n    margin: 'auto'\n  },\n\n  // add horizontal scrollbar to Calendar charts\n  '& .Calendar > div > div:last-of-type > div': {\n    overflowX: 'auto',\n    overflowY: 'hidden',\n    scrollbarGutter: 'stable'\n  }\n}));\n\nconst StyledMenuItem = styled(MenuItem)(({ theme }) => ({\n  '& .MuiBox-root ': {\n    [theme.breakpoints.down('sm')]: {\n      fontSize: '0.75rem'\n    },\n  }\n}));\n\n// eslint-disable-next-line max-len\nfunction ChartComponentWrapper({ chartID }) {\n  const { data: chartData, isLoading, isFetching, error } = useChartData(chartID);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const isSmallWidth = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [isPortrait, setIsPortrait] = useState(window.matchMedia('(orientation: portrait)').matches);\n  const [windowSize, setWindowSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n\n  // Props for tab panels (multiple data visualizations in the same chart area, navigate with tab panels)\n  const [currentTab, setCurrentTab] = useState(0); // start with the first tab\n  const [previousTab, setPreviousTab] = useState(0); // keep tracking of previous tab to keep displaying it if the currentTab = initialDropdownMenuTabIndex (selecting the dropdown menu tab)\n  const [dropdownMenuTabIndex, setDropdownMenuTabIndex] = useState(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n  const [dropdownMenuCurrentTitle, setDropdownMenuCurrentTitle] = useState();\n  const [anchorEl, setAnchorEl] = useState(null); // Define anchorEl state for dropdown menu of the tabs\n\n  // Props for dataType management\n  const [allowedDataTypes, setAllowedDataTypes] = useState([]);\n  const [selectedDataType, setSelectedDataType] = useState(null);\n\n  const initializeAllowedDataTypes = (chartData, setAllowedDataTypes, setSelectedDataType) => {\n    if (!chartData?.allowedDataTypes) return;\n\n    const dataTypesArr = chartData.allowedDataTypes.map((dataType) => {\n      const { name_title, name_short, unit } = DataTypes[dataType];\n      return {\n        key: dataType,\n        name_title,\n        name_short,\n        unit,\n      };\n    });\n\n    setAllowedDataTypes(dataTypesArr);\n    setSelectedDataType(chartData.selectedDataType);\n  };\n\n  const setupResizeListener = (setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS) => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      timeoutID = setTimeout(() => {\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  };\n\n  useEffect(() => {\n    if (!chartData) return;\n\n    // Initialize allowed data types\n    initializeAllowedDataTypes(chartData, setAllowedDataTypes, setSelectedDataType);\n\n    // Setup resize listener\n    const cleanupResize = setupResizeListener(setWindowSize, setIsPortrait, DEBOUNCE_IN_MILLISECONDS);\n\n    // Cleanup listener on unmount\n    return cleanupResize;\n  }, [chartData]);\n\n  // eventListener for window resize\n  // redraw \"Calendar\" charts and charts with a time filter upon window resize.\n  // Filter & Calendar charts are not automatically respnsive, so we have to redraw them.\n  // redraw other charts when device orientation changes\n  useEffect(() => {\n    let timeoutID = null;\n\n    const handleWindowResize = () => {\n      clearTimeout(timeoutID);\n\n      // debounce before triggering re-render. as user is resizing window, the state could\n      // change multiple times causing many expensive rerenders. we try to rerender at the\n      // end of the resize.\n      timeoutID = setTimeout(() => {\n        // Redraw all charts on device orientation change, as the chartWrapperHeights\n        // have changed.\n        setIsPortrait(window.matchMedia('(orientation: portrait)').matches);\n\n        // Redraw all charts on window resized\n        setWindowSize([window.innerWidth, window.innerHeight]);\n      }, DEBOUNCE_IN_MILLISECONDS);\n    };\n\n    // listen to window resize events\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [chartData]);\n\n  // set tab back to 0 if school is changed\n  useEffect(() => {\n    setPreviousTab(currentTab);\n    setCurrentTab(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentSchoolID]);\n\n  let chartHeight, chartMaxHeight;\n  if (chartData?.chartType !== 'Calendar') {\n    chartHeight = isPortrait ? '80vw' : '35vw';\n    chartMaxHeight = isPortrait ? '800px' : '450px';\n  }\n\n  // Function to render only one chart (no subchart --> no tab control)\n  const renderOnlyOneChart = () => {\n    if (!isValidArray(chartData.dataArray)) {\n      return <NoChartToRender customMessage={\"Not enough historical data to display this chart\"} />\n    }\n    return (\n      <SubChart\n        selectedDataType={selectedDataType}\n        allowedDataTypes={allowedDataTypes}\n        chartData={chartData}\n        isPortrait={isPortrait}\n        windowSize={windowSize}\n        height={chartData.height ? chartData.height : chartHeight}\n      />\n    );\n  }\n\n  // Function to render multiple subcharts with tab control\n  const renderMultipleSubcharts = () => {\n    // Handle tab change\n    const handleTabChange = (__, newIndex) => {\n      setPreviousTab(currentTab);\n      setCurrentTab(newIndex);\n\n      if (needsDropdownMenu && newIndex < MAX_NUM_TABS_TO_DISPLAY && newIndex !== dropdownMenuTabIndex) {\n        setDropdownMenuCurrentTitle();\n        setDropdownMenuTabIndex(INITIAL_DROPDOWN_MENU_TAB_INDEX);\n      }\n    };\n\n    // Determine if dropdown menu is needed\n    const needsDropdownMenu = chartData.subcharts.length > MAX_NUM_TABS_TO_DISPLAY + 1; // maxTabsToDisplay = 3 by default, but here +1 for some leeway, some schools have 4 sensors which is still okay. But if > 4, then only display max 3\n\n    const subchartsDataForTabs = needsDropdownMenu ? chartData.subcharts.slice(0, MAX_NUM_TABS_TO_DISPLAY) : chartData.subcharts;\n    const subchartsDataForDropDownMenu = needsDropdownMenu ? chartData.subcharts.slice(MAX_NUM_TABS_TO_DISPLAY) : null;\n\n    // Function to handle selection from dropdown menu\n    const handleDropdownMenuSelection = (index) => {\n      setPreviousTab(currentTab);\n\n      // Because the original chartData.subcharts array was split in subchartsDataForTabs (length maxTabsToDisplay) and subchartsDataForDropDownMenu (the remaining item), the selected subcharts index is the sum of the length of subchartsDataForTabs array and the index of the selected item from subchartsDataForDropDownMenu\n      setCurrentTab(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Same index with the one above to keep the dropdown menu tab highlighted  \n      setDropdownMenuTabIndex(MAX_NUM_TABS_TO_DISPLAY + index);\n\n      // Set title of the selected item in the dropdown menu to display it\n      setDropdownMenuCurrentTitle(subchartsDataForDropDownMenu[index].subchartTitleShort);\n\n      // Close the dropdown menu after selection\n      setAnchorEl(null);\n    };\n\n    const getOtherLocationsLabel = () => {\n      return (\n        <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\">\n          <Box flex={1}>\n            Other sensors\n            {\n              dropdownMenuCurrentTitle && ` (${dropdownMenuCurrentTitle})`\n            }\n            &nbsp;\n          </Box>\n          < ExpandMoreIcon />\n        </Stack>\n      )\n    }\n\n    const shouldDisplayThisSubchart = (index) => {\n      if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n        return previousTab === index;\n      } else {\n        return currentTab === index;\n      }\n    }\n\n    return (\n      <>\n        <StyledTabs\n          value={currentTab}\n          onChange={handleTabChange}\n          variant={isSmallWidth ? 'fullWidth' : 'standard'}\n        >\n          {subchartsDataForTabs.map((_, index) => (\n            <Tab\n              key={index}\n              value={index}\n              label={chartData.subcharts[index].subchartTitle}\n              sx={{\n                // If this subchart doesn't have a valid dataArray to render chart\n                // Make the Tab's text line-through to let user know\n                textDecoration: !isValidArray(chartData.subcharts[index].dataArray) && 'line-through'\n              }}\n            />\n          ))}\n          {/* Render dropdown menu if needed */}\n          {needsDropdownMenu && (\n            <Tab\n              value={dropdownMenuTabIndex}\n              label={getOtherLocationsLabel()}\n              aria-controls=\"submenu\"\n              aria-haspopup=\"true\"\n              onClick={(event) => setAnchorEl(event.currentTarget)}\n            />\n          )}\n        </StyledTabs>\n        {\n          needsDropdownMenu && <Menu\n            id=\"submenu\"\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={() => {\n              // Reset currentTab to the previous valid tab if the user opened the menu (clicked on the drop down menu tab, if shown), but didn't select any menu item\n              if (currentTab === INITIAL_DROPDOWN_MENU_TAB_INDEX) {\n                setPreviousTab(currentTab);\n                setCurrentTab(previousTab);\n              };\n\n              // Close the menu\n              setAnchorEl(null);\n            }}\n          >\n            {/* Render remaining subchart selector in the dropdown menu */}\n            {subchartsDataForDropDownMenu.map((_, index) => (\n              <StyledMenuItem\n                key={index}\n                selected={index === currentTab - MAX_NUM_TABS_TO_DISPLAY}\n                onClick={() => handleDropdownMenuSelection(index)}\n                sx={{\n                  // If this subchart doesn't have a valid dataArray to render chart\n                  // Make the Tab's text line-through to let user know\n                  textDecoration: !isValidArray(chartData.subcharts[index + MAX_NUM_TABS_TO_DISPLAY].dataArray) && 'line-through'\n                }}\n              >\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  <Box>\n                    {subchartsDataForDropDownMenu[index].subchartTitle}\n                  </Box>\n                  {\n                    (index === currentTab - MAX_NUM_TABS_TO_DISPLAY) &&\n                    <VisibilityIcon fontSize=\"1rem\" sx={{ color: 'text.secondary' }} />\n                  }\n                </Stack>\n              </StyledMenuItem>\n            ))}\n          </Menu>\n        }\n\n        <Box\n          position=\"relative\"\n          sx={{\n            overflowX: isPortrait && 'auto',\n            WebkitOverflowScrolling: isPortrait && 'touch',\n            overflowY: 'hidden',\n          }}\n        >\n\n          {chartData.subcharts.map((__, index) => (\n            <Box\n              key={index}\n              width=\"100%\"\n              height=\"100%\"\n              role=\"tabpanel\"\n              sx={{\n                transition: '0.35s',\n                position: (index === 0) ? '' : 'absolute',\n                opacity: shouldDisplayThisSubchart(index) ? '1' : '0',\n                pointerEvents: shouldDisplayThisSubchart(index) ? 'auto' : 'none',\n                top: (index === 0) ? '' : 0,\n                overflowX: 'auto',\n                overflowY: 'hidden',\n              }}\n            >\n              <SubChart\n                selectedDataType={selectedDataType}\n                allowedDataTypes={allowedDataTypes}\n                chartData={chartData}\n                subchartIndex={index}\n                isPortrait={isPortrait}\n                windowSize={windowSize}\n                height={chartData.height ? chartData.height : chartHeight}\n                maxHeight={\n                  ['Calendar'].includes(chartData.chartType)\n                    ? ''\n                    : chartMaxHeight\n                }\n                currentSubchart={currentTab}\n              />\n            </Box>\n          ))}\n        </Box>\n      </>\n    )\n  };\n\n  // Function to render remaining subtitles and references for chart with multiple subcharts\n  const getSubtitles = () => {\n    let text = chartData.subtitle || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.subchartSubtitle) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].subchartSubtitle;\n    }\n    return text;\n  }\n  const getReferences = () => {\n    let text = chartData.reference || '';\n    if (chartData.subcharts && chartData.subcharts[currentTab]?.reference) {\n      text += '<br/>';\n      text += chartData.subcharts[currentTab].reference;\n    }\n    return text;\n  }\n\n  if (!chartData) return;\n\n  if (isLoading) return <LoadingAnimation optionalText={`Loading chart ${chartID + 1}...`} />;\n  if (error) return <NoChartToRender customMessage={`Error loading chart ${chartID + 1}, please try later`} />\n\n  return (\n    <Box\n      position=\"relative\"\n    >\n      <Box>\n        <Typography display=\"inline\" variant=\"h6\" color=\"text.primary\">\n          {chartID + 1}. {chartData.title}\n          &nbsp;\n        </Typography>\n        <Box display=\"inline\">\n          <DataTypeDropDownMenu\n            selectedDataType={selectedDataType}\n            dataTypes={allowedDataTypes}\n            chartID={chartID}\n          />\n        </Box>\n      </Box>\n\n      <ChartStyleWrapper height=\"100%\" sx={{\n        filter: isFetching ? 'blur(1px)' : 'none',\n        transition: 'filter 0.2s',\n        pointerEvents: isFetching ? \"none\" : \"auto\",\n      }}>\n        {isValidArray(chartData.subcharts) ? renderMultipleSubcharts() : renderOnlyOneChart()}\n\n        {/* Render subtitle and reference below */}\n        <Box sx={{ my: 3 }}>\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mb: 1 }}\n          >\n            <CollapsibleSubtitle\n              text={getSubtitles()}\n              reference={getReferences()}\n            />\n          </Typography>\n        </Box>\n      </ChartStyleWrapper>\n\n      {isFetching && (\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(255,255,255,0.3)',\n            zIndex: 10,\n          }}\n        >\n          <LoadingAnimation />\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default ChartComponentWrapper;\n","import { useState } from 'react';\nimport { isMobile } from 'react-device-detect';\n\nimport { Fab, Fade, Popper, Paper, Typography, Stack } from '@mui/material';\nimport AirIcon from '@mui/icons-material/Air';\nimport { FadeInButtonForSpeedDial } from '../SpeedDial/FadeInButtonForSpeedDial';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport AirQualityIndexTable from './AirQualityIndexTable';\n\nexport default function AirQualityIndexLegendQuickGlance(props) {\n  // Mechanism for opening and closing the Quick Glance on hover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const handlePopperOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n    Tracking.sendEventAnalytics(Tracking.Events.airQualityIndexLegendQuickGlance);\n  };\n  const handlePopperClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <FadeInButtonForSpeedDial {...props} distanceFromBottomOfWindow=\"5.5rem\">\n        <Fab\n          sx={{ mt: 1 }}\n          aria-owns={open ? Tracking.Events.airQualityIndexLegendQuickGlance : undefined}\n          aria-haspopup=\"true\"\n          onMouseEnter={handlePopperOpen}\n          onMouseLeave={handlePopperClose}\n          onClick={(event) => isMobile && (open ? handlePopperClose() : handlePopperOpen(event))}\n          aria-label={Tracking.Events.airQualityIndexLegendQuickGlance}\n          color=\"primary\"\n        >\n          <Stack direction=\"column\" alignItems=\"center\">\n            <AirIcon fontSize=\"1rem\" />\n            <Typography variant=\"body2\" fontWeight=\"500\">\n              AQI\n            </Typography>\n          </Stack>\n        </Fab>\n      </FadeInButtonForSpeedDial>\n\n      <Popper\n        id={Tracking.Events.airQualityIndexLegendQuickGlance}\n        sx={{\n          pointerEvents: 'none',\n          mt: -1\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        placement=\"top-end\"\n        onClose={handlePopperClose}\n        keepMounted\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper elevation={8} sx={{ py: 0.5, mb: 1 }}>\n              <Typography sx={{ mx: 2, mt: 1 }} color=\"text.disabled\" variant=\"body1\" fontWeight={500}>\n                AQI at quick glance\n              </Typography>\n              <AirQualityIndexTable tiny hideAQIDescription />\n            </Paper>\n          </Fade>\n        )}\n\n      </Popper>\n    </>\n  );\n}\n","import { useContext, useCallback } from \"react\";\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\nimport { useSnackbar } from \"notistack\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\n\nconst useLoginHandler = (openLoginPopup) => {\n    const { authenticationState, user } = useContext(UserContext);\n    const loggedIn = authenticationState.authenticated && authenticationState.checkedAuthentication;\n    const { currentSchoolID } = useContext(DashboardContext);\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleRestrictedAccess = useCallback(\n        (action) => {\n            if (!loggedIn) {\n                openLoginPopup?.();\n                return false;\n            } else {\n                if (user?.allowedSchools.some(school => school.school_id === currentSchoolID)) {\n                    action?.();\n                    return true;\n                } else {\n                    enqueueSnackbar(`Your account does not have access to ${currentSchoolID.toUpperCase()} Alerts`, SnackbarMetadata.error);\n                    return false;\n                }\n            }\n        },\n        [loggedIn, openLoginPopup, currentSchoolID, user, enqueueSnackbar]\n    );\n\n    return {\n        loggedIn,\n        handleRestrictedAccess,\n    };\n};\n\nexport default useLoginHandler;\n","import { useState, useContext } from \"react\";\nimport { Button, Menu, MenuItem } from \"@mui/material\";\nimport TvIcon from \"@mui/icons-material/Tv\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\nimport { isValidArray } from \"../../../Utils/UtilFunctions\";\nimport useLoginHandler from \"../../Account/useLoginHandler\";\nimport useSchoolMetadata from \"../../../hooks/useSchoolMetadata\";\n\nconst ScreenDropDownMenu = ({ onButtonClick }) => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const navigate = useNavigate();\n\n  if (!schoolMetadata) return null;\n\n  const screens = schoolMetadata.screens;\n\n  if (!isValidArray(screens)) return null;\n\n  const handleSingleScreenClick = () => {\n    handleRestrictedAccess(() => {\n      const screen_name = screens && screens[0]?.screen_name;\n      if (screen_name === \"screen\") navigate(`/screen/${currentSchoolID}`);\n      else navigate(`/screen/${currentSchoolID}/${screen_name}`);\n    });\n  };\n\n  // If there is only 1 screen, show a single button\n  if (screens.length <= 1) {\n    return (\n      <Button\n        variant=\"contained\"\n        size=\"small\"\n        onClick={handleSingleScreenClick}\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />&nbsp;TV Screen\n      </Button>\n    );\n  }\n\n  // If there are multiple screens, show a dropdown menu\n  const open = Boolean(anchorEl);\n\n  const handleMenuItemClick = (screenName) => {\n    handleRestrictedAccess(() => {\n      setAnchorEl(null);\n      navigate(`/screen/${currentSchoolID}/${screenName}`);\n    });\n  };\n\n  const handleMenuOpen = (event) => {\n    handleRestrictedAccess(() => setAnchorEl(event.currentTarget));\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Button\n        id=\"basic-button\"\n        aria-controls={open ? \"tv-screen-list-menu\" : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? \"true\" : undefined}\n        onClick={handleMenuOpen}\n        variant=\"contained\"\n        size=\"small\"\n      >\n        <TvIcon sx={{ fontSize: \"1rem\" }} />\n        &nbsp;\n        TV Screens\n      </Button>\n      <Menu\n        id=\"tv-screen-list-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleMenuClose}\n        MenuListProps={{\n          \"aria-labelledby\": \"basic-button\",\n        }}\n      >\n        {screens.map((screen, index) => (\n          <MenuItem\n            key={index}\n            onClick={() => handleMenuItemClick(screen.screen_name)}\n            sx={{ fontSize: \"0.8rem\" }}\n          >\n            {screen.location_long}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nexport default ScreenDropDownMenu;\n","import { useState, useContext } from 'react';\nimport { Chip, Tooltip, IconButton, Dialog, Button, DialogActions, DialogTitle, DialogContent, useMediaQuery } from '@mui/material';\nimport * as Tracking from '../../Utils/Tracking';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { useTheme } from '@mui/material';\n\nconst CustomDialog = (props) => {\n  const {\n    buttonIcon,\n    buttonIconAria,\n    buttonLabel,\n    buttonVariant = 'contained',\n    trackingEvent,\n    dialogTitle,\n    dialogOpenHandler = null,\n    dialogCloseHandler = null,\n    displaySchoolID = true,\n    maxWidth = \"lg\",\n    children,\n    disabled\n  } = props;\n\n  let iconOnly;\n  if (buttonIcon && !buttonLabel) iconOnly = true;\n  else iconOnly = false;\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [open, setOpen] = useState(false);\n\n  const onOpen = () => {\n    if (dialogOpenHandler) {\n      dialogOpenHandler(() => {\n        setOpen(true); // Only opens if dialogOpenHandler allows it\n        if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n      });\n    } else {\n      setOpen(true);\n      if (trackingEvent) Tracking.sendEventAnalytics(trackingEvent);\n    }\n  };\n\n  const onClose = () => {\n    setOpen(false);\n    if (dialogCloseHandler) dialogCloseHandler();\n  };\n\n  const theme = useTheme();\n\n  const displayButton = () => {\n    if (iconOnly) return (\n      <Tooltip title={buttonIconAria}>\n        <IconButton\n          onClick={onOpen}\n          aria-label={buttonIconAria}\n          size=\"small\"\n          sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n          disabled={disabled}\n        >\n          {buttonIcon}\n        </IconButton>\n      </Tooltip>\n    );\n\n    else return (\n      <Button\n        onClick={onOpen}\n        variant={buttonVariant}\n        disabled={disabled}\n        size=\"small\"\n      >\n        {buttonIcon}&nbsp;{buttonLabel}\n      </Button>\n    )\n  }\n\n  return (\n    <>\n      {displayButton()}\n\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth={maxWidth}\n        fullWidth\n        fullScreen={smallScreen}\n        keepMounted\n      >\n        <DialogActions sx={{ justifyContent: \"start\" }}>\n          <Button onClick={onClose}>\n            <ChevronLeftIcon sx={{ fontSize: '1rem' }} />Back\n          </Button>\n        </DialogActions>\n\n        <DialogTitle>\n          {displaySchoolID === true ?\n            (<>\n              <Chip\n                label={currentSchoolID ? `School: ${currentSchoolID.toUpperCase()}` : \"No School\"}\n                size=\"small\"\n                display=\"block\"\n                sx={{ mb: 1 }}\n              />\n              <br />\n            </>\n            ) : null}\n\n          {dialogTitle}\n        </DialogTitle>\n\n        <DialogContent>\n          {children}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default CustomDialog;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { Box, Link, Typography, Stack, Select, FormControl, MenuItem, Grid, Button, useMediaQuery, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\n\nimport * as Tracking from '../../Utils/Tracking';\nimport { fetchDataFromURL } from '../../API/ApiFetch';\nimport { SupportedFetchExtensions } from \"../../API/Utils\";\nimport { getRawDatasetUrl } from '../../API/ApiUrls';\nimport LoadingAnimation from '../LoadingAnimation';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\n\nimport CustomDialog from '../CustomDialog/CustomDialog';\nimport { CITIESair } from '../../Utils/GlobalVariables';\nimport useLoginHandler from '../Account/useLoginHandler';\nimport AggregationType from '../DateRangePicker/AggregationType';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\n\nexport default function DatasetDownloadDialog({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n\n  const [sensorsDatasets, updateSensorsDatasets] = useState({});\n\n  const [previewingDataset, setPreviewingDataset] = useState(\"placeholder\");\n\n  // Construct the structure of sensorsDatasets based on current data\n  useEffect(() => {\n    if (!currentSensorsData) return;\n\n    const sensorsDatasets = currentSensorsData\n      .filter(item => item && item.sensor)  // Filter out null or undefined items and sensors\n      .reduce((acc, item) => {\n        // Use location_short as the key for each sensor\n        const key = item.sensor.location_short;\n        acc[key] = {\n          location_type: item.sensor.location_type,\n          location_short: item.sensor.location_short,\n          location_long: item.sensor.location_long,\n          last_seen: item.sensor.last_seen?.split('T')[0],\n          rawDatasets: Object.keys(AggregationType).reverse().reduce((datasetAcc, datasetKey) => {\n            datasetAcc[AggregationType[datasetKey]] = {\n              sample: null,\n              full: null\n            };\n            return datasetAcc;\n          }, {})\n        };\n        return acc;\n      }, {});\n\n    updateSensorsDatasets(sensorsDatasets);\n  }, [currentSensorsData]);\n\n  return (\n    <CustomDialog\n      buttonIcon={<DataObjectIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Dataset\"\n      trackingEvent={Tracking.Events.rawDatasetButtonClicked}\n      dialogTitle=\"Preview and download raw dataset(s)\"\n      dialogOpenHandler={((action) => {\n        setPreviewingDataset(null);\n        handleRestrictedAccess(action);\n      })}\n    >\n      <DatasetSelectorAndPreviewer\n        sensorsDatasets={sensorsDatasets}\n        updateSensorsDatasets={updateSensorsDatasets}\n        previewingDataset={previewingDataset}\n        setPreviewingDataset={setPreviewingDataset}\n        schoolID={currentSchoolID}\n      />\n      {\n        sensorsDatasets &&\n        <Typography variant=\"caption\" sx={{ my: 2, fontStyle: 'italic', display: \"block\" }} >\n          These datasets are provided by {CITIESair} from sensors operated by {CITIESair}. Should you intend to utilize them for your project, research, or publication, we kindly request that you notify us at <Link href='mailto:nyuad.cities@nyu.edu'>nyuad.cities@nyu.edu</Link> to discuss citation requirements.\n        </Typography>\n      }\n    </CustomDialog>\n  );\n}\n\nconst DatasetSelectorAndPreviewer = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, setPreviewingDataset, schoolID } = props;\n\n  const theme = useTheme();\n  const smallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  // Preview the hourly type of the first sensor initially\n  useEffect(() => {\n    if (Object.keys(sensorsDatasets).length > 0 && !previewingDataset) {\n      const firstSensor = Object.keys(sensorsDatasets)[0];\n      const initialDatasetType = AggregationType.hour;\n\n      setPreviewingDataset({\n        sensor: firstSensor,\n        datasetType: initialDatasetType\n      });\n\n      // If this dataset has been fetched before, early return\n      if (sensorsDatasets[firstSensor].rawDatasets[initialDatasetType].sample) return;\n\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: firstSensor,\n        aggregationType: initialDatasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[firstSensor].rawDatasets[initialDatasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [sensorsDatasets, previewingDataset]);\n\n  return (\n    <Grid\n      container\n      justifyContent=\"center\"\n      alignItems=\"start\"\n      spacing={smallScreen ? 1 : 2}\n      sx={{ mt: 0, overflowY: 'scroll', overflowX: 'hidden' }}\n    >\n      <Grid item sm={12} md={6}>\n        <DatasetsTable\n          schoolID={schoolID}\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          smallScreen={smallScreen}\n          previewingDataset={previewingDataset}\n          setPreviewingDataset={setPreviewingDataset}\n        />\n      </Grid>\n      <Grid item sm={12} md={6} maxWidth={smallScreen ? '100%' : 'unset'} sx={{ mt: 1 }}>\n        <PreviewDataset\n          sensorsDatasets={sensorsDatasets}\n          updateSensorsDatasets={updateSensorsDatasets}\n          previewingDataset={previewingDataset}\n          schoolID={schoolID}\n          smallScreen={smallScreen}\n        />\n      </Grid>\n    </Grid>\n  )\n};\n\nconst DatasetsTable = (props) => {\n  const { schoolID, sensorsDatasets, smallScreen, previewingDataset, setPreviewingDataset, updateSensorsDatasets } = props;\n  return (\n    <Table\n      size=\"small\"\n      sx={{\n        tableLayout: 'fixed'\n      }}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell sx={{ pl: 1 }}>\n            Sensor Location\n          </TableCell>\n          <TableCell sx={{ width: smallScreen ? '9.5rem' : '11rem' }}>\n            Average Period\n          </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {sensorsDatasets && Object.keys(sensorsDatasets).map((location_short) => (\n          <Dataset\n            key={location_short}\n            schoolID={schoolID}\n            smallScreen={smallScreen}\n            sensor={location_short}\n            sensorsDatasets={sensorsDatasets}\n            previewingDataset={previewingDataset}\n            setPreviewingDataset={setPreviewingDataset}\n            isPreviewing={location_short === previewingDataset?.sensor}\n            updateSensorsDatasets={updateSensorsDatasets}\n          />\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nconst Dataset = (props) => {\n  const { schoolID, sensorsDatasets, sensor, previewingDataset, setPreviewingDataset, isPreviewing, updateSensorsDatasets } = props;\n\n  const [selectedDatasetType, setSelectedDatasetType] = useState(AggregationType.hour);\n\n  useEffect(() => {\n    if (selectedDatasetType !== AggregationType.hour) setSelectedDatasetType(AggregationType.hour);\n  }, [schoolID])\n\n  const handleDatasetTypeChange = (event) => {\n    const selectedVal = event.target.value;\n    setSelectedDatasetType(selectedVal);\n    setPreviewingDataset({ datasetType: selectedVal, sensor });\n    fetchThisDataset(selectedVal);\n  };\n\n  const fetchThisDataset = (datasetType) => {\n    // If this dataset version hasn't been fetched yet,\n    // fetch it and append it into the object fetchedDatasets\n    if (!sensorsDatasets[sensor].rawDatasets[datasetType].sample) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: sensorsDatasets[sensor].location_short,\n        aggregationType: datasetType,\n        isSample: true\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true })\n        .then((data) => {\n          const tmp = { ...sensorsDatasets };\n          tmp[sensor].rawDatasets[datasetType].sample = data;\n          updateSensorsDatasets(tmp);\n        });\n    }\n  }\n\n  const setThisSensorToPreview = () => {\n    if (previewingDataset?.sensor !== sensor) {\n      setPreviewingDataset({\n        datasetType: selectedDatasetType,\n        sensor: sensor\n      });\n      fetchThisDataset(selectedDatasetType);\n    }\n  }\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <TableRow key={sensor}>\n        <TableCell\n          sx={{\n            pl: 1,\n            cursor: 'pointer',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}\n          onClick={setThisSensorToPreview}>\n          {sensorsDatasets[sensor].location_long}\n        </TableCell>\n\n        <TableCell\n          sx={{\n            position: 'relative',\n            background: isPreviewing && theme.palette.background.NYUpurpleLight\n          }}>\n          <FormControl size=\"small\">\n            <Select\n              value={selectedDatasetType}\n              onChange={handleDatasetTypeChange}\n              variant=\"standard\"\n              MenuProps={{ disablePortal: true }}\n            >\n              {Object.keys(sensorsDatasets[sensor].rawDatasets).reverse().map((datasetType, index) => (\n                <MenuItem\n                  key={index}\n                  value={datasetType}\n                >\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    {datasetType.charAt(0).toUpperCase() + datasetType.slice(1).toLowerCase()}\n                  </Stack>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </TableCell>\n      </TableRow >\n    </>\n  )\n}\n\nconst PreviewDataset = (props) => {\n  const { sensorsDatasets, updateSensorsDatasets, previewingDataset, schoolID, smallScreen } = props;\n  const theme = useTheme();\n\n  const [previewingDatasetName, setPreviewingDatasetName] = useState(\"Not previewing any dataset\");\n  const [csvFileName, setCsvFileName] = useState(\"No dataset\");\n  const [isDatasetLoading, setIsDatasetLoading] = useState(false);\n\n  const downloadPreviewingDataset = () => {\n    if (!previewingDataset) return;\n\n    const fetchedDataset = sensorsDatasets[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full;\n\n    // Fetch the full dataset if it has not been fetched before\n    if (!fetchedDataset) {\n      const url = getRawDatasetUrl({\n        school_id: schoolID,\n        sensor_location_short: previewingDataset.sensor,\n        aggregationType: previewingDataset.datasetType,\n        isSample: false\n      });\n\n      fetchDataFromURL({ url, extension: SupportedFetchExtensions.csv, needsAuthorization: true }).then((data) => {\n        const tmp = { ...sensorsDatasets };\n        tmp[previewingDataset.sensor].rawDatasets[previewingDataset.datasetType].full = data;\n        updateSensorsDatasets(tmp);\n\n        convertCSVforDownload(data);\n      });\n    }\n    else {\n      convertCSVforDownload(fetchedDataset);\n    }\n\n  };\n\n  const convertCSVforDownload = (dataset) => {\n    const blob = new Blob([dataset], { type: 'application/octet-stream' }); // create a Blob with the raw data\n    const url = URL.createObjectURL(blob); // create a download link for the Blob\n    const downloadLink = document.createElement('a');\n    downloadLink.href = url;\n    downloadLink.download = csvFileName;\n    document.body.appendChild(downloadLink);\n    downloadLink.click(); // simulate a click on the download link\n    URL.revokeObjectURL(url); // clean up by revoking the object URL\n    document.body.removeChild(downloadLink);\n  }\n\n  const [formattedData, setFormattedData] = useState('');\n  const [rowNumber, setRowNumber] = useState('');\n\n  useEffect(() => {\n    // If no dataset is chosen to be previewed, early return\n    if (!previewingDataset) return;\n\n    // Update previewing dataset name regardless if the dataset preview has finished loading\n    setPreviewingDatasetName(`Previewing: ${previewingDataset.sensor} (${previewingDataset.datasetType})`);\n\n    // Get the raw dataset\n    const csvData = sensorsDatasets[previewingDataset.sensor]?.rawDatasets[previewingDataset.datasetType]?.sample;\n\n    // If it is empty, then it hasn't been loaded yet\n    if (!csvData) {\n      setRowNumber(null);\n      setFormattedData(null);\n      setCsvFileName(\"Loading...\");\n      setIsDatasetLoading(true);\n      return;\n    };\n\n    if (isDatasetLoading) setIsDatasetLoading(false);\n\n    const lines = csvData.split('\\n');\n\n    const headers = lines[0].split(',');\n    const rows = lines.slice(1);\n\n    setRowNumber([\n      \"\",\n      ...rows.map(row => row.split(',')[0])\n    ].join('\\n'));\n\n    setFormattedData([\n      headers.slice(1).join(','), // Keep the headers for the rest of the columns\n      ...rows.map(row => row.split(',').slice(1).join(',')) // Remove the first column from each row\n    ].join('\\n'));\n\n    // Get the second column of the last row and extract the date part to set the csv's file name\n    let dateString;\n    if (rows.length > 0) {\n      const lastRow = rows[rows.length - 1];\n      const columns = lastRow.split(',');\n      if (columns.length >= 2) {\n        const dateTimeString = columns[1]; // Get the second column\n        dateString = dateTimeString.split('T')[0]; // Extract the date part\n      }\n    }\n\n    const csvFileName = `${schoolID}-${previewingDataset.sensor}-${previewingDataset.datasetType}-${dateString}.csv`;\n    setCsvFileName(csvFileName);\n  }, [previewingDataset, sensorsDatasets]);\n\n  return (\n    <Stack spacing={1}>\n      <Box sx={{ '& *': { fontFamily: \"monospace !important\" } }}>\n        <Stack direction=\"row\">\n          <Typography variant='body2' gutterBottom fontWeight={500}>\n            {previewingDatasetName}\n          </Typography>\n        </Stack>\n\n        <Box\n          component=\"pre\"\n          sx={{\n            overflowX: 'auto',\n            color: theme.palette.text.secondary,\n            backgroundColor: theme.palette.customBackground,\n            p: 2,\n            pt: 1.5,\n            borderRadius: 1,\n            height: smallScreen ? '11.8rem' : '14rem',\n            width: smallScreen ? '100%' : 'unset',\n            marginTop: 0\n          }}\n        >\n          <Stack\n            direction=\"row\"\n            sx={{ fontSize: '0.75rem' }}\n          >\n            {\n              formattedData ?\n                <>\n                  <Box sx={{ mr: 2, userSelect: 'none' }}>\n                    {rowNumber}\n                  </Box>\n                  <Box>\n                    {formattedData}\n                  </Box>\n                </>\n                :\n                <LoadingAnimation optionalText=\"Loading\" />\n            }\n          </Stack>\n        </Box>\n      </Box>\n      <Box textAlign=\"center\" >\n        <Button\n          variant=\"contained\"\n          sx={{\n            textTransform: 'none',\n            textAlign: 'left',\n            lineHeight: 1.1,\n            px: 1.5,\n            py: 1\n          }}\n          onClick={() => {\n            downloadPreviewingDataset();\n            Tracking.sendEventAnalytics(Tracking.Events.rawDatasetDownloaded, {\n              dataset_type: previewingDataset?.datasetType,\n              sensor: previewingDataset?.sensor\n            });\n          }}\n          disabled={isDatasetLoading}\n        >\n          <DownloadIcon sx={{ fontSize: '1.25rem', mr: 0.5 }} />\n          {csvFileName}\n        </Button>\n      </Box>\n    </Stack >\n  )\n}","import { useContext, useEffect, useState } from 'react';\nimport { Box, TextField, Chip, Menu, MenuItem, Grid, Typography, Button, Stack, useMediaQuery, Alert, Tooltip, Link, CircularProgress } from '@mui/material';\nimport { fetchDataFromURL } from \"../../../API/ApiFetch\";\nimport { RESTmethods } from \"../../../API/Utils\";\nimport { getApiUrl } from '../../../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../../../API/Utils\";\nimport { DashboardContext } from '../../../ContextProviders/DashboardContext';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { validateEmail } from '../../../Utils/UtilFunctions';\nimport { useSnackbar } from 'notistack';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nconst compareArrays = (arr1, arr2) => {\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n}\n\nconst EmailsInput = () => {\n  const { enqueueSnackbar } = useSnackbar()\n\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: alertEmails = [] } = useQuery({\n    queryKey: ['alertEmails', currentSchoolID],\n    queryFn: async () => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        extension: 'json',\n        needsAuthorization: true\n      });\n    },\n    enabled: !!currentSchoolID,\n    staleTime: 0\n  });\n\n  const queryClient = useQueryClient();\n  const saveEmailsMutation = useMutation({\n    mutationFn: async (emailsToSave) => {\n      const url = getApiUrl({\n        endpoint: GeneralAPIendpoints.alertsEmails,\n        school_id: currentSchoolID\n      });\n      return fetchDataFromURL({\n        url,\n        restMethod: RESTmethods.POST,\n        body: emailsToSave\n      });\n    },\n    onSuccess: (data) => {\n      // Update cache immediately so UI updates without refetch\n      queryClient.setQueryData(['alertEmails', currentSchoolID], data);\n      enqueueSnackbar('Email recipients saved successfully.', SnackbarMetadata.success);\n    },\n    onError: () => {\n      enqueueSnackbar('There was an error saving email recipients. Please try again.', SnackbarMetadata.error);\n    }\n  });\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n\n  const [localEmails, setLocalEmails] = useState([]);\n  const [emailsListChanged, setEmailsListChanged] = useState(false);\n\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [menuAnchor, setMenuAnchor] = useState(null);\n\n  const [saveButtonTooltipTitle, setSaveButtonTooltipTitle] = useState('');\n\n  const maxEmails = 150;\n\n  useEffect(() => {\n    setLocalEmails(alertEmails);\n  }, [alertEmails]);\n\n  useEffect(() => {\n    setEmailsListChanged(!compareArrays(localEmails, alertEmails));\n  }, [localEmails]);\n\n  useEffect(() => {\n    setSaveButtonTooltipTitle(emailsListChanged ? \"Click to save new changes on server\" : \"No changes detected to save\");\n  }, [emailsListChanged]);\n\n  const handleAddEmail = (passedEmail) => {\n    const email = passedEmail.trim().toLowerCase();\n\n    // If email address follows email format\n    if (validateEmail(email)) {\n      const newEmails = [...localEmails, email];\n\n      // Make sure currentEmail hasn't been added before\n      if (localEmails.includes(email)) {\n        enqueueSnackbar(`Already added: ${email}`, SnackbarMetadata.error);\n        setCurrentEmail('');\n        return;\n      }\n\n      // Display alert if reached maximum number of email recipients\n      if (newEmails.length === maxEmails) {\n        enqueueSnackbar('Maximum number of recipients reached', SnackbarMetadata.warning);\n      }\n\n      setLocalEmails(newEmails);\n      setCurrentEmail('');\n    } else {\n      enqueueSnackbar('Invalid email address. Valid format: abc@def.xyz', SnackbarMetadata.error);\n    }\n  };\n\n  const handleDeleteEmail = (index) => {\n    const newEmails = localEmails.filter((_, i) => i !== index);\n    setLocalEmails(newEmails);\n  };\n\n  const handleEditEmail = (index) => {\n    setCurrentEmail(localEmails[index]);\n    handleDeleteEmail(index);\n  };\n\n  const handleMenuOpen = (event, index) => {\n    setMenuAnchor({ index, element: event.currentTarget });\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchor(null);\n  };\n\n  const handlePaste = (event) => {\n    const pastedText = event.clipboardData.getData('text');\n    setCurrentEmail(pastedText);\n    handleAddEmail(pastedText);\n    event.preventDefault();\n  };\n\n  const handleSaveEmails = (_emails) => {\n    const emailsToSave = isValidArray(_emails) ? _emails : (isValidArray(localEmails) ? localEmails : []);\n    saveEmailsMutation.mutate(emailsToSave);\n  }\n\n  useEffect(() => {\n    const handleBeforeUnload = (event) => {\n      if (!compareArrays(localEmails, alertEmails)) {\n        event.preventDefault();\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [localEmails, alertEmails]);\n\n  return (\n    <Box>\n      <Grid container alignItems=\"center\" wrap=\"wrap\">\n        <Grid item>\n          <Typography\n            variant='body1'\n            fontWeight={500}\n            sx={{ p: 0, mb: smallScreen && 1, mr: !smallScreen && 2 }}\n          >\n            Email Recipients:\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          lg\n          sx={{\n            overflowY: \"scroll\",\n            maxHeight: \"300px\"\n          }}\n        >\n          <Grid\n            container\n            alignItems=\"center\"\n            sx={{\n              border: '1px solid rgba(0, 0, 0, 0.23)',\n              borderRadius: 2,\n              p: 0.5,\n              flexWrap: 'wrap',\n              width: '100%'\n            }}\n          >\n            {localEmails.map((email, index) => (\n              <Grid item key={index} sx={{ m: 0.5 }}>\n                <Chip\n                  label={email}\n                  onDelete={() => handleDeleteEmail(index)}\n                  onClick={(event) => handleMenuOpen(event, index)}\n                />\n              </Grid>\n            )\n            )}\n            {\n              localEmails.length < maxEmails ? (\n                <Grid item xs={12} sm minWidth=\"200px\" >\n                  <TextField\n                    fullWidth\n                    variant=\"standard\"\n                    value={currentEmail}\n                    onChange={(e) => {\n                      const tmp = e.target.value;\n                      setCurrentEmail(tmp);\n                      if (tmp !== '') {\n                        setSaveButtonTooltipTitle(\"Finalize currently edited email by pressing Enter/Return\")\n                      }\n                    }}\n                    onKeyUp={(e) => {\n                      if (['Enter', 'Spacebar', ' '].includes(e.key)) {\n                        handleAddEmail(currentEmail);\n                      }\n                    }}\n                    onPaste={handlePaste}\n                    placeholder=\"Add recipient\"\n                    sx={{\n                      mx: 0.5\n                    }}\n                    InputProps={{\n                      disableUnderline: true,\n                      style: { textTransform: \"lowercase\" }\n                    }}\n                  />\n                </Grid>\n              ) : null\n            }\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Stack sx={{ mt: 1 }} spacing={1} alignItems={smallScreen ? \"stretch\" : \"end\"}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" gap={1}>\n          <Typography\n            variant=\"caption\"\n            display=\"block\"\n            color=\"text.secondary\"\n            textAlign=\"right\"\n          >\n            {localEmails.length} / {maxEmails} recipient{localEmails.length > 1 ? 's' : null} added\n          </Typography>\n\n          <Link\n            variant=\"caption\"\n            sx={{\n              cursor: \"pointer\"\n            }}\n            onClick={(e) => {\n              e.preventDefault();\n              setCurrentEmail('');\n              setLocalEmails([])\n            }}\n          >\n            Clear All\n          </Link>\n        </Stack>\n\n\n        {\n          alertEmails.length === 0 ?\n            (\n              <Alert\n                severity='error'\n                sx={{\n                  mt: 1\n                }}>\n                The alert(s) above will not be sent unless at least one email recipient is saved\n              </Alert>\n            ) : null\n        }\n\n        <Tooltip title={saveButtonTooltipTitle} enterTouchDelay={0}>\n          {/* Span is needed to display Tooltip on a disabled Button */}\n          <span>\n            <Button\n              onClick={handleSaveEmails}\n              variant=\"contained\"\n              sx={{ width: smallScreen ? \"100%\" : \"fit-content\" }}\n              disabled={!emailsListChanged || saveEmailsMutation.isPending}\n            >\n              {saveEmailsMutation.isPending ? <CircularProgress disableShrink color=\"inherit\" size=\"1.5rem\" /> : \"SAVE EMAIL LIST\"}\n            </Button>\n          </span>\n        </Tooltip>\n\n      </Stack>\n\n      <Menu\n        anchorEl={menuAnchor?.element}\n        open={Boolean(menuAnchor)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem\n          onClick={() => {\n            handleEditEmail(menuAnchor.index);\n            handleMenuClose();\n          }}\n        >\n          Edit\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport default EmailsInput;\n","import SpeedIcon from '@mui/icons-material/Speed';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\n\nconst AlertTypes = {\n  threshold: {\n    id: \"threshold\",\n    index: 0,\n    name: \"Threshold\",\n    tableColumnHeader: \"Threshold\",\n    icon: <SpeedIcon />\n  },\n  daily: {\n    id: \"daily\",\n    index: 1,\n    name: \"Daily\",\n    tableColumnHeader: \"Alert Hour\",\n    icon: <CalendarMonthIcon />\n  }\n};\n\nexport const ThresholdAlertTypes = {\n  below_threshold: {\n    id: 'below_threshold',\n    sign: \"<\",\n    name: \"below\"\n  },\n  above_threshold: {\n    id: 'above_threshold',\n    sign: \"≥\",\n    name: \"above\"\n  }\n}\n\nexport default AlertTypes;","import { createContext, useMemo, useState, useContext, useEffect, useCallback } from 'react';\nimport { DashboardContext } from './DashboardContext';\nimport { fetchDataFromURL } from '../API/ApiFetch';\nimport { getAlertsApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../API/Utils\";\nimport AlertTypes, { ThresholdAlertTypes } from '../Components/AirQuality/AirQualityAlerts/AlertTypes';\nimport { isValidArray } from '../Utils/UtilFunctions';\nimport { DataTypes } from '../Utils/AirQuality/DataTypes';\nimport { PREDEFINED_TIMERANGES } from \"../Components/TimeRange/TimeRangeUtils\";\nimport useSchoolMetadata from '../hooks/useSchoolMetadata';\n\nconst AirQualityAlertContext = createContext();\n\nexport const AirQualityAlertKeys = {\n  id: \"id\",\n  alert_type: \"alert_type\",\n  sensor_id: \"sensor_id\",\n  location_short: \"location_short\",\n  datatypekey: \"datatypekey\",\n  threshold_value: \"threshold_value\",\n  days_of_week: \"days_of_week\",\n  minutespastmidnight: \"minutespastmidnight\",\n  time_range: \"time_range\",\n  is_enabled: \"is_enabled\",\n  excluded_dates: \"excluded_dates\",\n  owner_role: \"owner_role\",\n  self_is_owner: \"self_is_owner\",\n  is_allowed_to_modify: \"is_allowed_to_modify\",\n  message: \"message\",\n  max_once_a_day: \"max_once_a_day\",\n  parent_alert_id: \"parent_alert_id\",\n  child_alert: \"child_alert\",\n  has_child_alert: \"has_child_alert\"\n};\n\nexport const getAlertDefaultPlaceholder = (alert_type = AlertTypes.daily.id) => {\n  let localAlertType, localOppositeAlertType;\n  if (alert_type === AlertTypes.threshold.id) {\n    localAlertType = ThresholdAlertTypes.above_threshold.id;\n    localOppositeAlertType = ThresholdAlertTypes.below_threshold.id;\n  }\n\n  return {\n    [AirQualityAlertKeys.id]: '',\n    [AirQualityAlertKeys.alert_type]: localAlertType || alert_type,\n    [AirQualityAlertKeys.sensor_id]: '',\n    [AirQualityAlertKeys.datatypekey]: '',\n    [AirQualityAlertKeys.days_of_week]: [0, 1, 2, 3, 4],\n    [AirQualityAlertKeys.time_range]: alert_type === AlertTypes.threshold.id ? [PREDEFINED_TIMERANGES.schoolHour.start, PREDEFINED_TIMERANGES.schoolHour.end] : null,\n    [AirQualityAlertKeys.threshold_value]: -1,\n    [AirQualityAlertKeys.minutespastmidnight]: '',\n    [AirQualityAlertKeys.is_enabled]: true,\n    [AirQualityAlertKeys.excluded_dates]: [],\n    [AirQualityAlertKeys.message]: '',\n    [AirQualityAlertKeys.max_once_a_day]: true,\n    [AirQualityAlertKeys.parent_alert_id]: null,\n    [AirQualityAlertKeys.has_child_alert]: false,\n    [AirQualityAlertKeys.child_alert]: alert_type === AlertTypes.threshold.id ? {\n      [AirQualityAlertKeys.alert_type]: localOppositeAlertType || alert_type,\n      [AirQualityAlertKeys.threshold_value]: -1,\n      [AirQualityAlertKeys.message]: '',\n    } : null,\n  }\n}\n\nexport function AirQualityAlertProvider({ children }) {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const [selectedAlert, setSelectedAlert] = useState(getAlertDefaultPlaceholder());\n\n  const [editingAlert, setEditingAlert] = useState(selectedAlert);\n\n  const [allowedDataTypesForSensor, setAllowedDataTypesForSensor] = useState([]);\n\n  const [alerts, setAlerts] = useState([]);\n\n  const [hasFetchedAlerts, setHasFetchedAlerts] = useState();\n\n  const returnAllowedDataTypesForThisSensor = useCallback((sensor) => {\n    if (!schoolMetadata) return [];\n\n    const { sensors } = schoolMetadata;\n    if (!isValidArray(sensors)) return [];\n\n    const sensorData = sensors.find(elem => elem.sensor_id === sensor);\n    const allowedDataTypesForThisSensor = sensorData?.allowedDataTypes;\n\n    if (allowedDataTypesForThisSensor) {\n      return allowedDataTypesForThisSensor.map(dataType => ({\n        value: dataType,\n        label: DataTypes[dataType].name_title\n      }));\n    }\n\n    return [];\n  }, [schoolMetadata]);\n\n  useEffect(() => {\n    setEditingAlert({ ...selectedAlert });\n  }, [selectedAlert]);\n\n  useEffect(() => {\n    const sensor_id = editingAlert[AirQualityAlertKeys.sensor_id];\n    if (sensor_id && sensor_id !== '') {\n      setAllowedDataTypesForSensor(\n        returnAllowedDataTypesForThisSensor(sensor_id)\n      )\n    }\n  }, [editingAlert, returnAllowedDataTypesForThisSensor]);\n\n  // Add child alert to parent\n  const addChildToAlerts = useCallback((alertList = []) => {\n    const processed = [...alertList];\n\n    processed.forEach(alert => {\n      if (!alert) return;\n\n      const isChild = !!alert[AirQualityAlertKeys.parent_alert_id];\n\n      if (isChild) {\n        const parent = processed.find(\n          a => a[AirQualityAlertKeys.id] === alert[AirQualityAlertKeys.parent_alert_id]\n        );\n\n        if (parent) {\n          parent[AirQualityAlertKeys.has_child_alert] = true;\n          parent[AirQualityAlertKeys.child_alert] = {\n            [AirQualityAlertKeys.id]: alert[AirQualityAlertKeys.id],\n            [AirQualityAlertKeys.alert_type]: alert[AirQualityAlertKeys.alert_type],\n            [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n            [AirQualityAlertKeys.message]: alert[AirQualityAlertKeys.message],\n          };\n        }\n      } else {\n        if (alert[AirQualityAlertKeys.alert_type] === AlertTypes.daily.id) return;\n\n        alert[AirQualityAlertKeys.has_child_alert] = false;\n        alert[AirQualityAlertKeys.child_alert] = {\n          [AirQualityAlertKeys.alert_type]:\n            alert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id\n              ? ThresholdAlertTypes.below_threshold.id\n              : ThresholdAlertTypes.above_threshold.id,\n          [AirQualityAlertKeys.threshold_value]: alert[AirQualityAlertKeys.threshold_value],\n          [AirQualityAlertKeys.message]: \"\"\n        };\n      }\n    });\n\n    return processed;\n  }, []);\n\n  // Fetch alerts for individual school\n  const fetchAlerts = useCallback(() => {\n    if (!currentSchoolID) return;\n\n    fetchDataFromURL({\n      url: getAlertsApiUrl({\n        endpoint: GeneralAPIendpoints.alerts,\n        school_id: currentSchoolID\n      })\n    }).then((data) => {\n      if (!isValidArray(data)) return;\n\n      setAlerts(\n        addChildToAlerts(data)\n      );\n\n    }).catch((error) => {\n      console.log(error);\n    });\n  }, [currentSchoolID, addChildToAlerts]);\n\n  useEffect(() => {\n    if (!currentSchoolID) return;\n\n    setHasFetchedAlerts(false);\n  }, [currentSchoolID, fetchAlerts]);\n\n  const contextValue = useMemo(() => ({\n    selectedAlert, setSelectedAlert,\n    editingAlert, setEditingAlert,\n    allowedDataTypesForSensor, setAllowedDataTypesForSensor,\n    alerts, setAlerts,\n    fetchAlerts,\n    hasFetchedAlerts, setHasFetchedAlerts,\n    addChildToAlerts\n  }), [selectedAlert, editingAlert, allowedDataTypesForSensor, alerts, fetchAlerts, hasFetchedAlerts, setHasFetchedAlerts, addChildToAlerts]);\n\n  return (\n    <AirQualityAlertContext.Provider value={contextValue}>\n      {children}\n    </AirQualityAlertContext.Provider>\n  );\n}\n\n// Custom hook \nexport const useAirQualityAlert = () => useContext(AirQualityAlertContext);","export const CrudTypes = {\n  add: 'ADD',\n  edit: 'EDIT',\n  delete: 'DELETE'\n}\n\nexport const SharedColumnHeader = {\n  location: \"Location\",\n  dataType: \"Data Type\",\n  selectedDaysOfWeek: \"Days\",\n  createdBy: \"Created By\"\n}","import { useState } from 'react';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, useTheme } from '@mui/material';\n\nexport default function AlertDeletionDialog(props) {\n  const { onConfirmedDelete } = props;\n\n  const [open, setOpen] = useState(false);\n  const theme = useTheme();\n\n  return (\n    <>\n      <Button\n        variant=\"text\"\n        color=\"error\"\n        onClick={() => {\n          setOpen(true)\n        }}>\n        Delete\n      </Button>\n      <Dialog\n        open={open}\n        onClose={() => {\n          setOpen(false)\n        }}\n        aria-labelledby=\"alert-deletion-confirmation-dialog-title\"\n        aria-describedby=\"alert-deletion-confirmation-dialog-description\"\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"alert-deletion-confirmation-dialog-title\">\n          Are you sure?\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-deletion-confirmation-dialog-description\">\n            Deletion is permanent. If you simply wish to pause this alert, disable it with the toggle switch instead.</DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: \"end\" }}>\n          <Button\n            onClick={() => {\n              setOpen(false)\n            }}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n\n          <Button\n            onClick={() => {\n              onConfirmedDelete();\n              setOpen(false);\n            }}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}","import { CrudTypes } from '../Utils';\n\nexport const DialogData = {\n  [CrudTypes.add]: {\n    title: \"Add A New Alert\",\n    primaryButtonLabel: \"Save Alert\",\n    errorMessage: \"Server error: new alert was not saved. Please try again\",\n    successMessage: \"New alert added successfully\"\n  },\n  [CrudTypes.edit]: {\n    title: \"Edit Alert\",\n    primaryButtonLabel: \"Save Edit\",\n    errorMessage: \"Server error: changes were not saved. Please try again\",\n    successMessage: \"Changes saved successfully\"\n  },\n  [CrudTypes.delete]: {\n    title: \"Delete Alert\",\n    contentText: \"Are you sure you want to delete this alert?\",\n    primaryButtonLabel: \"Delete\",\n    errorMessage: \"Server error: alert not deleted. Please try again.\",\n    successMessage: \"Alert deleted successfully\"\n  }\n};\n","import { Box, Stack, TextField, Typography } from \"@mui/material\";\n\nconst OptionalMessage = (props) => {\n    const {\n        label = \"Optional Message\",\n        value,\n        handleChange,\n        maxLength,\n        showTip = true,\n        disabled\n    } = props;\n    const currentLength = value ? value.length : 0;\n\n    return (\n        <Stack direction=\"column\">\n            <TextField\n                label={label}\n                multiline\n                minRows={2}\n                maxRows={4}\n                inputProps={{\n                    maxLength,\n                }}\n                value={value || ''}\n                onChange={(event) => {\n                    handleChange(event);\n                }}\n                disabled={disabled}\n            />\n            <Stack direction=\"row\" gap={1} justifyContent=\"space-between\" sx={{ mx: 1, my: 0.5 }}>\n                {showTip ? (\n                    <Typography color=\"text.secondary\" variant=\"caption\">\n                        Optional message that will appear in the alert\n                    </Typography>\n                ) : <Box />}\n\n                <Typography color=\"text.secondary\" variant=\"caption\" textAlign=\"right\">\n                    {currentLength}/{maxLength}\n                </Typography>\n            </Stack>\n        </Stack>\n    );\n};\n\nexport default OptionalMessage;","export const DAYS_OF_WEEK = [\n  { value: 0, label: 'Monday' },\n  { value: 1, label: 'Tuesday' },\n  { value: 2, label: 'Wednesday' },\n  { value: 3, label: 'Thursday' },\n  { value: 4, label: 'Friday' },\n  { value: 5, label: 'Saturday' },\n  { value: 6, label: 'Sunday' }\n];\n","import dayjs from 'dayjs';\nimport { styled } from '@mui/material/styles';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { PickersDay } from '@mui/x-date-pickers/PickersDay';\nimport { DateCalendar } from '@mui/x-date-pickers/DateCalendar';\n\nimport { Link, Typography } from '@mui/material';\nimport CustomDialog from '../../../../CustomDialog/CustomDialog';\n\n// Custom styling for the selected days\nconst CustomPickersDay = styled(PickersDay, {\n  shouldForwardProp: (prop) => prop !== \"selected\"\n})(({ theme, selected }) => ({\n  ...(selected && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n    \"&:hover, &:focus\": {\n      backgroundColor: theme.palette.primary.dark\n    },\n    borderRadius: \"50%\",\n  })\n}));\n\n// Custom day component that highlights the selected dates\nconst CustomDayComponent = (props) => {\n  const { day, selectedDates, ...other } = props;\n\n  // Check if the day is selected\n  const isSelected = selectedDates.includes(dayjs(day).format('YYYY-MM-DD'));\n\n  return (\n    <CustomPickersDay {...other} day={day} selected={isSelected} />\n  )\n}\n\nexport default function MultiDaysCalendarPicker(props) {\n  const { selectedDates, handleChange, disabled } = props;\n\n  // Ensure selectedDates is formatted as \"YYYY-MM-DD\"\n  const parsedSelectedDates = selectedDates.map((date) => dayjs(date).format('YYYY-MM-DD'));\n\n  const len = selectedDates.length;\n  const title = len > 0 ? `Excluded Dates (${len} Days)` : `Excluded Dates`;\n\n  return (\n    <CustomDialog\n      dialogTitle={title}\n      buttonLabel={title}\n      buttonVariant='text'\n      disabled={disabled}\n      maxWidth=\"xs\"\n      displaySchoolID={false}\n    >\n      <Typography color=\"text.secondary\" variant='body2' gutterBottom>\n        Select dates when you do <b>NOT</b> want to receive alerts.\n        <br />\n        Useful for holidays or school breaks.\n      </Typography>\n\n      <Link\n        variant=\"caption\"\n        sx={{\n          cursor: \"pointer\",\n          display: \"block\",\n          textAlign: \"right\"\n        }}\n        onClick={(e) => {\n          e.preventDefault();\n          handleChange(selectedDates);\n        }}\n      >\n        Clear All\n      </Link>\n\n      <LocalizationProvider\n        dateAdapter={AdapterDayjs}\n        localeText={{\n          calendarWeekNumberHeaderText: 'Week',\n          calendarWeekNumberText: (weekNumber) => `${weekNumber}.`,\n        }}\n      >\n        <DateCalendar\n          displayWeekNumber\n          slots={{\n            day: (dayProps) => (\n              <CustomDayComponent\n                {...dayProps}\n                selectedDates={parsedSelectedDates}\n              />\n            ),\n          }}\n          onChange={(value, selectionState) => {\n            if (selectionState === 'finish') {\n              handleChange([dayjs(value).format('YYYY-MM-DD')]);\n            }\n          }}\n          disableHighlightToday\n          minDate={dayjs().startOf('month')} // Restrict to dates after the start of the current month\n        />\n      </LocalizationProvider>\n    </CustomDialog>\n  );\n}\n","import { Box, Grid, Stack, ToggleButton, ToggleButtonGroup, Tooltip } from '@mui/material';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport { DAYS_OF_WEEK } from './DAYS_OF_WEEK';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder } from '../../../../../ContextProviders/AirQualityAlertContext';\nimport { useTheme } from '@mui/material';\nimport MultiDaysCalendarPicker from './MultiDaysCalendarPicker';\n\nexport default function DateSelector(props) {\n  const { daysOfWeek, excludedDates, handleDaysOfWeekChange, handleExcludedDatesChange, disabled } = props;\n  const theme = useTheme();\n\n  return (\n    <Grid\n      container\n      rowSpacing={0.5}\n      columnSpacing={2}\n      alignItems=\"center\"\n      justifyContent=\"stretch\"\n    >\n      <Grid item xs={12} md={6}>\n        <Stack\n          direction=\"row\"\n          gap={1}\n          alignItems=\"start\"\n        >\n          <Box\n            aria-hidden\n            sx={{\n              '& .MuiSvgIcon-root': {\n                color: disabled\n                  ? theme.palette.text.secondary\n                  : theme.palette.primary.main,\n                verticalAlign: \"middle\"\n              }\n            }}\n          >\n            <CalendarMonthIcon sx={{ mt: 0.75 }} />\n          </Box>\n\n          <ToggleButtonGroup\n            value={daysOfWeek || getAlertDefaultPlaceholder()[AirQualityAlertKeys.days_of_week]}\n            onChange={handleDaysOfWeekChange}\n            aria-label=\"days of the week to receive alert\"\n            sx={{ display: 'flex', justifyContent: 'center' }} // Center the buttons horizontally\n            size=\"small\"\n            fullWidth\n            disabled={disabled}\n            color={disabled ? \"standard\" : \"primary\"}\n          >\n            {DAYS_OF_WEEK.map((day) => (\n              <Tooltip key={day.value} title={day.label} arrow>\n                <ToggleButton value={day.value} aria-label={day.label} sx={{ textTransform: 'none' }}>\n                  {day.label.slice(0, 3)}\n                </ToggleButton>\n              </Tooltip>\n            ))}\n          </ToggleButtonGroup>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={6} ml={{ xs: 3, sm: 0 }}>\n        <MultiDaysCalendarPicker\n          selectedDates={excludedDates}\n          disabled={disabled}\n          handleChange={handleExcludedDatesChange}\n        />\n      </Grid>\n    </Grid>\n\n  );\n}\n","import { Slider, colors, TextField, Grid, Typography } from '@mui/material';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTheme } from '@mui/material';\n\nexport const ThresholdSlider = (props) => {\n  const {\n    min = 0,\n    max = 100,\n    value,\n    defaultValue,\n    stepsForThreshold = 1,\n    marks = null,\n    handleChange,\n    disabled,\n    backgroundCssGradient,\n    invertSelection = false,\n    showInput = true,\n    inputUnit,\n    valueLabelDisplay = \"on\",\n    showTip = true\n  } = props;\n\n  const theme = useTheme();\n\n  // sliderValue is an array\n  const [sliderRangeMin, setSliderRangeMin] = useState(invertSelection ? value || defaultValue : min);\n  const [sliderRangeMax, setSliderRangeMax] = useState(invertSelection ? max : value || defaultValue);\n  const [nearestDataIndex, setNearestDataIndex] = useState(-1);\n\n  const [error, setError] = useState(false);\n  const [helperText, setHelperText] = useState('');\n\n  const findNearestDataIndex = useCallback((val) => {\n    if (!marks) return -1;\n\n    // Filter marks to get those with values greater than currentVal\n    const greaterMarks = marks.filter(mark => mark.value >= val);\n\n    // If no marks are greater, return -1\n    if (greaterMarks.length === 0) {\n      return -1;\n    }\n\n    // Find the mark with the nearest value greater than val\n    const nearestMark = greaterMarks.reduce((prev, curr) => {\n      return (curr.value - val) < (prev.value - val) ? curr : prev;\n    });\n\n    // Return the index of the nearest mark in the original marks array\n    const index = marks.indexOf(nearestMark)\n    return invertSelection ? index - 1 : index;\n  }, [marks, invertSelection]);\n\n  useEffect(() => {\n    const localSliderRangeMin = invertSelection ? value : min;\n    const localSliderRangeMax = invertSelection ? max : value;\n    setSliderRangeMin(localSliderRangeMin);\n    setSliderRangeMax(localSliderRangeMax);\n\n    setNearestDataIndex(findNearestDataIndex(invertSelection ? localSliderRangeMin : localSliderRangeMax));\n  }, [findNearestDataIndex, invertSelection, value, max, min]);\n\n  const handleSliderChange = (event, newValue) => {\n    const val = newValue[invertSelection ? 0 : 1];\n\n    setSliderRangeMin(invertSelection ? val : min);\n    setSliderRangeMax(invertSelection ? max : val);\n\n    handleChange(val);\n    setNearestDataIndex(findNearestDataIndex(val));\n  };\n\n  const handleInputChange = (event) => {\n    const val = event.target.value === '' ? '' : Number(event.target.value);\n\n    // Empty val\n    if (!val || val === '') {\n      handleChange(val);\n    }\n\n    // Non-empty val\n    if (val !== '' && (val >= min && val <= max)) {\n      setSliderRangeMin(invertSelection ? val : min);\n      setSliderRangeMax(invertSelection ? max : val);\n\n      handleChange(val);\n      setNearestDataIndex(findNearestDataIndex(val));\n\n      setError(false);\n      setHelperText('');\n    } else {\n      setError(true);\n      setHelperText(`Threshold must be between ${min} and ${max}`);\n    }\n  };\n\n  const stripedGradient = `repeating-linear-gradient(-45deg, ${colors.grey[800]}, ${colors.grey[800]} 4px, ${colors.common.white} 4px, ${colors.common.white} 8px)`;\n\n  const sliderSX = {\n    height: \"20vh\",\n    minHeight: \"250px\",\n    maxHeight: \"500px\",\n    cursor: disabled ? 'not-allowed' : 'inherit',\n    pointerEvents: 'all',\n    '& *': {\n      transition: 'none !important'\n    },\n    '& .MuiSlider-thumb': {\n      width: '2rem',\n      height: '4px',\n      borderRadius: 1,\n      color: colors.common.black,\n    },\n    [`& .MuiSlider-thumb[data-index=\"${invertSelection ? 1 : 0}\"]`]: {\n      display: 'none',\n    },\n    '& .MuiSlider-mark, .MuiSlider-markActive': {\n      width: '2rem',\n      height: '3px',\n      background: theme.palette.background.paper,\n      backgroundImage: theme.palette.background.paperBackgroundGradient\n    },\n    '& .MuiSlider-thumb, .MuiSlider-mark': {\n      transform: `translate(-50%,50%})`\n    },\n    '& .MuiSlider-rail, .MuiSlider-track': {\n      width: '1rem',\n      opacity: 0.75,\n      border: 'none'\n    },\n    '& .MuiSlider-rail': {\n      background: disabled ? colors.grey[400] : backgroundCssGradient,\n    },\n    '& .MuiSlider-track': {\n      background: stripedGradient,\n      ...(invertSelection ? {\n        borderBottomLeftRadius: 0,\n        borderBottomRightRadius: 0\n      } : {\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0\n      })\n    },\n    [`& .MuiSlider-markLabel, .MuiSlider-markLabel[data-index=\"${nearestDataIndex}\"]`]: {\n      color: theme.palette.text.primary,\n      fontWeight: 500,\n      textDecoration: 'underline',\n    },\n    '& .MuiSlider-markLabelActive': {\n      color: theme.palette.text.secondary,\n      fontWeight: 'inherit',\n      textDecoration: 'inherit',\n    },\n    '& .MuiSlider-valueLabel': {\n      transform: 'translate(-10px, -50%)',\n    }\n  };\n\n  return (\n    <>\n      <Grid container item xs=\"auto\" alignItems=\"end\" spacing={0.5}>\n        <Grid item xs=\"auto\" minWidth=\"4.5rem\">\n          {showInput ? (\n            <TextField\n              variant='standard'\n              type=\"number\"\n              label=\"Threshold\"\n              value={invertSelection ? sliderRangeMin : sliderRangeMax}\n              onChange={handleInputChange}\n              error={error}\n              helperText={helperText}\n              size='small'\n              fullWidth\n              disabled={disabled}\n              inputProps={{\n                step: stepsForThreshold,\n                min,\n                max,\n                type: 'number',\n                'aria-labelledby': 'input-threshold-slider'\n              }}\n            />\n          ) : null}\n        </Grid>\n\n        {\n          inputUnit ? (\n            <Grid item>\n              <Typography variant='body2'>\n                {inputUnit}\n              </Typography>\n            </Grid>\n          ) : null\n        }\n      </Grid>\n\n      <Grid item xs={12} sx={{ mt: 2, ml: 7.5 }}>\n        <Slider\n          getAriaLabel={() => 'Alert Threshold Slider'}\n          aria-labelledby=\"input-threshold-slider\"\n          value={[sliderRangeMin, sliderRangeMax]}\n          step={marks === null ? stepsForThreshold : null} // only allow discrete equal step if marks are not provided\n          marks={marks}\n          disabled={disabled}\n          min={min}\n          max={max}\n          onChange={handleSliderChange}\n          valueLabelDisplay={valueLabelDisplay}\n          orientation=\"vertical\"\n          sx={sliderSX} />\n      </Grid>\n\n      <Grid item sx={{ mt: 1, ml: 1, visibility: showTip === true ? 'visible' : 'hidden' }}>\n        <Typography color=\"text.secondary\" variant='caption' display='block'>\n          Move the slider to change the alert's threshold value or use the text input box for more precise control.\n        </Typography>\n      </Grid>\n    </>\n  );\n};","import { ThresholdSlider } from \"./ThresholdSlider\";\nimport { DataTypeKeys, DataTypes } from \"../../../../../../Utils/AirQuality/DataTypes\";\nimport { AirQualityAlertKeys, useAirQualityAlert } from \"../../../../../../ContextProviders/AirQualityAlertContext\";\nimport { AQI_Database, HeatIndex_Database, VOC_Database } from \"../../../../../../Utils/AirQuality/AirQualityIndexHelper\";\nimport { useTheme } from '@mui/material';\nimport { generateCssBackgroundGradient } from \"../../../../../../Utils/Gradient/GradientUtils\";\nimport { getTranslation } from \"../../../../../../Utils/UtilFunctions\";\nimport { useContext } from \"react\";\nimport { PreferenceContext } from \"../../../../../../ContextProviders/PreferenceContext\";\n\nexport const ThresholdComponentWrapper = (props) => {\n    const {\n        value,\n        invertSelection,\n        handleValueChange,\n        placeholderValueBeforeDataTypeSelection = 0.5,\n        disabledSlider,\n        showTip = true\n    } = props;\n\n    const { editingAlert } = useAirQualityAlert();\n    const theme = useTheme();\n    const { language } = useContext(PreferenceContext);\n\n    let thresholdSlider = null;\n\n    const currentDataTypeKey = editingAlert[AirQualityAlertKeys.datatypekey];\n    if (currentDataTypeKey && DataTypes[currentDataTypeKey]) {\n        const dataType = DataTypes[currentDataTypeKey];\n        const dataTypeColorAxis = theme.palette.chart.colorAxes[dataType.color_axis];\n        const { colors, minValue, maxValue, defaultValueForAlert, stepsForThreshold } = dataTypeColorAxis;\n\n        const backgroundCssGradient = generateCssBackgroundGradient({\n            gradientDirection: 'to top',\n            colors: colors\n        });\n\n        // Check if this dataType exists in the AQI_Database\n        // If yes, return value and label accordingly to the marks\n        let marks, database;\n\n        switch (currentDataTypeKey) {\n            case DataTypeKeys.voc:\n                database = VOC_Database;\n                break;\n            case DataTypeKeys.aqi:\n            case DataTypeKeys.pm2_5:\n            case DataTypeKeys.pm10_raw:\n            case DataTypeKeys.co2:\n                database = AQI_Database;\n                break;\n            case DataTypeKeys.heat_index_C:\n                database = HeatIndex_Database;\n                break;\n            default:\n                database = null;\n        }\n\n        if (database) {\n            marks = database\n                .filter((_, index) => index !== 0) // do not return the lowest category\n                .map((element) => {\n                    const val = element[dataType.threshold_mapping_name].low;\n                    return {\n                        value: val,\n                        label: getTranslation(element.category, language)\n                    }\n                })\n        }\n\n        const inputUnit = Object.keys(DataTypes)\n            .filter(key => key === editingAlert[AirQualityAlertKeys.datatypekey])\n            .map(key => DataTypes[key].unit)[0]\n\n        thresholdSlider = (\n            <ThresholdSlider\n                min={minValue}\n                max={maxValue}\n                marks={marks}\n                defaultValue={defaultValueForAlert}\n                value={value}\n                stepsForThreshold={stepsForThreshold}\n                disabled={disabledSlider}\n                backgroundCssGradient={backgroundCssGradient}\n                invertSelection={invertSelection}\n                handleChange={handleValueChange}\n                inputUnit={inputUnit}\n                showTip={showTip}\n            />\n        )\n    } else {\n        thresholdSlider = (\n            <ThresholdSlider\n                min={0}\n                max={1}\n                value={placeholderValueBeforeDataTypeSelection}\n                disabled={true}\n                showInput={false}\n                invertSelection={invertSelection}\n                valueLabelDisplay=\"off\"\n                showTip={showTip}\n            />\n        )\n    }\n\n    return thresholdSlider;\n}","import { FormControl, FormGroup, FormControlLabel, FormHelperText, Checkbox, Typography } from '@mui/material';\n\nexport const MaxOnceADayCheckbox = ({ value, handleChange, disabled }) => {\n\n  const returnHelperText = () => {\n    if (value === true) {\n      return (\n        <>\n          Send alert <strong>at most once a day</strong> when the threshold is breached\n        </>\n      );\n    } else {\n      return (\n        <>\n          Send alert <strong>every hour</strong> for as long as the threshold is breached\n        </>\n      );\n    }\n  };\n  return (\n    <FormControl\n      component=\"fieldset\"\n      variant=\"standard\"\n      sx={{ mt: { md: -1 } }}\n      disabled={disabled}\n    >\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={value}\n              onChange={handleChange}\n              size='small'\n            />\n          }\n          label={<Typography color=\"text.secondary\" fontWeight={500}>Max Once a Day</Typography>}\n          color=\"text.secondary\"\n        />\n      </FormGroup>\n      <FormHelperText sx={{ mt: -0.5 }}>{returnHelperText()}</FormHelperText>\n    </FormControl>\n  );\n};\n","import { ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { ThresholdAlertTypes } from '../../../AlertTypes';\n\nexport const ThresholdTypeToggle = ({ currentAlertType, handleChange, disabled, ...others }) => {\n  return (\n    <ToggleButtonGroup\n      color={disabled ? \"standard\" : \"primary\"}\n      disabled={disabled}\n      defaultValue={ThresholdAlertTypes.above_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"toggle to choose alert below or above a threshold\"\n      size=\"small\"\n      onChange={handleChange}\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n};\n\nexport const ThresholdType = ({ currentAlertType, ...others }) => {\n\n  return (\n    <ToggleButtonGroup\n      color={\"standard\"}\n      disabled={true}\n      defaultValue={ThresholdAlertTypes.below_threshold.id}\n      value={currentAlertType}\n      exclusive\n      aria-label=\"non-interactive button displaying threshold type\"\n      size=\"small\"\n      {...others}\n    >\n      {Object.keys(ThresholdAlertTypes).map((key) => {\n        const thresholdAlertType = ThresholdAlertTypes[key];\n        if (thresholdAlertType.id !== currentAlertType) return null;\n\n        return (\n          <ToggleButton\n            key={thresholdAlertType.id}\n            size=\"small\"\n            sx={{\n              textTransform: \"capitalize !important\",\n              px: 1.25\n            }}\n            value={thresholdAlertType.id}\n            aria-label={thresholdAlertType.id}\n          >\n            {thresholdAlertType.sign}&nbsp;{thresholdAlertType.name}\n          </ToggleButton>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n}\n","import { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from \"../../../../../ContextProviders/AirQualityAlertContext\";\nimport AlertTypes, { ThresholdAlertTypes } from \"../../AlertTypes\";\nimport { SimplePicker } from \"./SimplePicker\";\n\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { SharedColumnHeader } from \"../../Utils\";\nimport TimeRangeSelector from \"../../../../TimeRange/TimeRangeSelector\";\nimport { DataTypes } from \"../../../../../Utils/AirQuality/DataTypes\";\nimport { capitalizePhrase } from \"../../../../../Utils/UtilFunctions\";\nimport { HOURS } from \"../../../../TimeRange/TimeRangeUtils\";\nimport { Checkbox, DialogContentText, FormControlLabel, FormGroup, Grid, Stack, Switch, Typography, useTheme } from \"@mui/material\";\n\nimport OptionalMessage from \"./OptionalMessage\";\nimport DateSelector from \"./DaySelector\";\nimport { ThresholdComponentWrapper } from \"./ThresholdAlertComponents/ThresholdComponentWrapper\";\n\nimport { DialogData } from \"../DialogData\";\nimport { MaxOnceADayCheckbox } from \"./MaxOnceADayCheckbox\";\nimport { ThresholdType, ThresholdTypeToggle } from \"./ThresholdAlertComponents/ThresholdTypeToggle\";\n\nimport useSchoolMetadata from \"../../../../../hooks/useSchoolMetadata\";\n\nconst returnFormattedStatusString = (editingAlert) => {\n    const status = editingAlert[AirQualityAlertKeys.is_enabled] ? \"enabled\" : \"disabled\";\n    const tense = editingAlert[AirQualityAlertKeys.id] ? \"is\" : \"will be\"; // if this alert doesn't have id, it's not d in DB yet, thus we use future tense \n\n    return `This alert ${tense} ${status}`;\n}\n\nexport const AlertPropertyComponents = ({ alertTypeKey, crudType }) => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n    const { editingAlert, allowedDataTypesForSensor, setEditingAlert } = useAirQualityAlert();\n\n    const theme = useTheme();\n\n    // Get the available sensors (locations) for this school\n    const allSensorsOfSchool = schoolMetadata?.sensors?.map(sensor => (\n        {\n            value: sensor.sensor_id,\n            label: capitalizePhrase(sensor.location_short)\n        }\n    ));\n\n    // Helper function to check if the previous field has a value to disable this field\n    const isDisabled = (key) => {\n        switch (key) {\n            case AirQualityAlertKeys.sensor_id:\n            case AirQualityAlertKeys.is_enabled:\n                // sensor_id and is_enabled can never be disabled because it's the first field\n                return false;\n\n            case AirQualityAlertKeys.datatypekey:\n                // datatypekey depends on sensor_id having a placeholder value\n                return editingAlert[AirQualityAlertKeys.sensor_id] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.sensor_id];\n\n            case AirQualityAlertKeys.child_alert:\n                // child_alert depends on has_child_alert being true\n                return editingAlert[AirQualityAlertKeys.has_child_alert] !== true;\n\n            default:\n                // all other fields depends on datatypekey having a placeholder value\n                return editingAlert[AirQualityAlertKeys.datatypekey] === getAlertDefaultPlaceholder(alertTypeKey)[AirQualityAlertKeys.datatypekey];\n        }\n    };\n\n    const displayHourPicker = () => {\n        switch (alertTypeKey) {\n            case AlertTypes.daily.id:\n                return (\n                    <SimplePicker\n                        icon={<AccessTimeIcon />}\n                        label={AlertTypes.daily.tableColumnHeader}\n                        value={editingAlert[AirQualityAlertKeys.minutespastmidnight]}\n                        options={HOURS}\n                        disabled={isDisabled(AirQualityAlertKeys.minutespastmidnight)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.minutespastmidnight]: event.target.value\n                            });\n                        }}\n                    />\n                );\n            case AlertTypes.threshold.id:\n                return (\n                    <Grid container columnSpacing={2} rowSpacing={0.5}>\n                        <Grid item xs={12} md={6}>\n                            <TimeRangeSelector\n                                timeRange={editingAlert[AirQualityAlertKeys.time_range]}\n                                defaultTimeRange={getAlertDefaultPlaceholder(AlertTypes.threshold.id)[AirQualityAlertKeys.time_range]}\n                                disabled={isDisabled(AirQualityAlertKeys.time_range)}\n                                handleChange={(newRange) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.time_range]: newRange\n                                    });\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} md={6}>\n                            <MaxOnceADayCheckbox\n                                value={editingAlert[AirQualityAlertKeys.max_once_a_day]}\n                                handleChange={(event) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.max_once_a_day]: event.target.checked\n                                    })\n                                }}\n                                disabled={isDisabled(AirQualityAlertKeys.max_once_a_day)}\n                            />\n                        </Grid>\n                    </Grid>\n                );\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <Stack\n            direction=\"column\"\n            gap={2}\n            mt={1}\n            width=\"100%\"\n        >\n            {\n                DialogData[crudType]?.contentText ?\n                    (\n                        <DialogContentText fontWeight=\"500\">\n                            {DialogData[crudType].contentText}\n                        </DialogContentText>\n                    ) : null\n            }\n\n            <Stack\n                direction=\"row\"\n                gap={1}\n                alignItems=\"center\"\n                mb={2}\n            >\n                <Switch\n                    size='small'\n                    checked={editingAlert[AirQualityAlertKeys.is_enabled]}\n                    onChange={(event) => {\n                        setEditingAlert({\n                            ...editingAlert,\n                            [AirQualityAlertKeys.is_enabled]: event.target.checked\n                        });\n                    }}\n                    disabled={isDisabled(AirQualityAlertKeys.is_enabled)}\n                />\n                <Typography\n                    fontWeight={500}\n                    color=\"text.secondary\"\n                >\n                    {returnFormattedStatusString(editingAlert)}\n                </Typography>\n            </Stack>\n\n            <Grid\n                container\n                columnSpacing={2}\n                alignItems=\"center\"\n            >\n                <Grid item xs={6}>\n                    <SimplePicker\n                        icon={<PlaceIcon />}\n                        label={SharedColumnHeader.location}\n                        value={editingAlert[AirQualityAlertKeys.sensor_id]}\n                        options={allSensorsOfSchool}\n                        disabled={isDisabled(AirQualityAlertKeys.sensor_id)}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.sensor_id]: event.target.value,\n                                [AirQualityAlertKeys.datatypekey]: ''\n                            });\n                        }}\n                    />\n                </Grid>\n\n                <Grid item xs={6}>\n                    <SimplePicker\n                        label={SharedColumnHeader.dataType}\n                        value={editingAlert[AirQualityAlertKeys.datatypekey]}\n                        options={allowedDataTypesForSensor}\n                        disabled={isDisabled(AirQualityAlertKeys.datatypekey)}\n                        handleChange={(event) => {\n                            const selectedDataTypeKey = event.target.value;\n                            const dataType = DataTypes[selectedDataTypeKey];\n\n                            // After data type is determined, set the threshold value to defaultValueForAlert\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.datatypekey]: selectedDataTypeKey,\n                                [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForAlert,\n                                [AirQualityAlertKeys.child_alert]: {\n                                    ...editingAlert[AirQualityAlertKeys.child_alert],\n                                    [AirQualityAlertKeys.threshold_value]: theme.palette.chart.colorAxes[dataType.color_axis]?.defaultValueForChildAlert\n                                }\n                            });\n                        }}\n                        flex={1}\n                    />\n                </Grid>\n            </Grid>\n\n            <DateSelector\n                daysOfWeek={editingAlert[AirQualityAlertKeys.days_of_week]}\n                excludedDates={editingAlert[AirQualityAlertKeys.excluded_dates] || []}\n                disabled={isDisabled(AirQualityAlertKeys.days_of_week)}\n                handleDaysOfWeekChange={(_, newValue) => {\n                    const validDaysOfWeek = Array.isArray(newValue) ? newValue : [];\n\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.days_of_week]: validDaysOfWeek.sort()\n                    });\n                }}\n                handleExcludedDatesChange={(valueArray) => {\n                    // Get the current excluded dates or initialize as an empty array\n                    const currentExcludedDates = editingAlert[AirQualityAlertKeys.excluded_dates] || [];\n\n                    // Create a new array that updates the excluded dates\n                    const updatedExcludedDates = valueArray.reduce((acc, date) => {\n                        // Check if the date is already excluded\n                        if (acc.includes(date)) {\n                            // If it exists, filter it out (remove the date)\n                            return acc.filter(excludedDate => excludedDate !== date);\n                        } else {\n                            // If it doesn't exist, add the date to the array\n                            return [...acc, date];\n                        }\n                    }, currentExcludedDates); // Start with the current excluded dates\n\n                    // Update the state with the new excluded_dates array\n                    setEditingAlert({\n                        ...editingAlert,\n                        [AirQualityAlertKeys.excluded_dates]: updatedExcludedDates\n                    });\n                }}\n            />\n\n\n            {displayHourPicker(alertTypeKey)}\n\n            {alertTypeKey === AlertTypes.threshold.id ?\n                (\n                    <Grid container alignItems=\"start\" spacing={2}>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='body1'\n                                    fontWeight={500}\n                                    color=\"text.secondary\"\n                                    sx={{ mt: \"2px\", mb: \"12px\" }} // absolute value to align with the other side\n                                >\n                                    1. Alert if it is:\n                                </Typography>\n                            </Grid>\n\n                            <Grid item sx={{ mr: 2 }}>\n                                <ThresholdTypeToggle\n                                    currentAlertType={editingAlert[AirQualityAlertKeys.alert_type]}\n                                    handleChange={(event) => {\n                                        const selectedAlertType = event.target.value;\n                                        const oppositeAlertTypeForChildAlert = selectedAlertType === ThresholdAlertTypes.above_threshold.id\n                                            ? ThresholdAlertTypes.below_threshold.id\n                                            : ThresholdAlertTypes.above_threshold.id;\n\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.alert_type]: selectedAlertType,\n                                            [AirQualityAlertKeys.child_alert]: {\n                                                ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                [AirQualityAlertKeys.alert_type]: oppositeAlertTypeForChildAlert\n                                            }\n                                        });\n                                    }}\n                                    disabled={isDisabled(AirQualityAlertKeys.alert_type)}\n                                    sx={{\n                                        height: \"100%\"\n                                    }}\n                                />\n                            </Grid>\n\n                            <ThresholdComponentWrapper\n                                value={editingAlert[AirQualityAlertKeys.threshold_value]}\n                                invertSelection={editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id}\n                                handleValueChange={(value) => {\n                                    setEditingAlert({\n                                        ...editingAlert,\n                                        [AirQualityAlertKeys.threshold_value]: value\n                                    });\n                                }}\n                                disabledToggle={isDisabled(AirQualityAlertKeys.alert_type)}\n                                disabledSlider={isDisabled(AirQualityAlertKeys.threshold_value)}\n                                placeholderValueBeforeDataTypeSelection={2 / 3}\n                            />\n\n                            <Grid item xs={12} mt={2}>\n                                <OptionalMessage\n                                    value={editingAlert[AirQualityAlertKeys.message]}\n                                    handleChange={(event) => {\n                                        setEditingAlert({\n                                            ...editingAlert,\n                                            [AirQualityAlertKeys.message]: event.target.value\n                                        });\n                                    }}\n                                    maxLength={200}\n                                    label=\"Optional Message for Main Alert\"\n                                    disabled={isDisabled(AirQualityAlertKeys.message)}\n                                />\n                            </Grid>\n\n                        </Grid>\n                        <Grid container item xs={12} sm={6}>\n                            <Grid item xs={12}>\n                                <FormGroup>\n                                    <FormControlLabel\n                                        disabled={isDisabled(AirQualityAlertKeys.has_child_alert)}\n                                        control={\n                                            <Checkbox\n                                                checked={!!editingAlert[AirQualityAlertKeys.has_child_alert]} // fallback in case undefined in first render\n                                                onChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.has_child_alert]: event.target.checked\n                                                    });\n                                                }}\n                                                size=\"small\"\n                                            />\n                                        }\n                                        label={\n                                            <Typography\n                                                variant={'body1'}\n                                                fontWeight={500}\n                                                color=\"text.secondary\"\n                                            >\n                                                2. [Optional] Follow-up alert if it changes to:\n                                            </Typography>\n                                        }\n                                        color=\"text.secondary\"\n                                    />\n                                </FormGroup>\n                            </Grid>\n\n                            {\n                                editingAlert[AirQualityAlertKeys.child_alert] && (\n                                    <>\n                                        <Grid item sx={{ mr: 2 }}>\n                                            <ThresholdType\n                                                currentAlertType={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type]}\n                                                sx={{\n                                                    height: \"100%\"\n                                                }}\n                                            />\n                                        </Grid>\n\n                                        <ThresholdComponentWrapper\n                                            value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.threshold_value]}\n                                            invertSelection={editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.below_threshold.id || true}\n                                            handleValueChange={(value) => {\n                                                setEditingAlert({\n                                                    ...editingAlert,\n                                                    [AirQualityAlertKeys.child_alert]: {\n                                                        ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                        [AirQualityAlertKeys.threshold_value]: value\n                                                    }\n                                                });\n                                            }}\n                                            disabledToggle={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            disabledSlider={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            showTip={false}\n                                            placeholderValueBeforeDataTypeSelection={1 / 3}\n                                        />\n\n                                        <Grid item xs={12} mt={2}>\n                                            <OptionalMessage\n                                                value={editingAlert[AirQualityAlertKeys.child_alert][AirQualityAlertKeys.message]}\n                                                handleChange={(event) => {\n                                                    setEditingAlert({\n                                                        ...editingAlert,\n                                                        [AirQualityAlertKeys.child_alert]: {\n                                                            ...editingAlert[AirQualityAlertKeys.child_alert],\n                                                            [AirQualityAlertKeys.message]: event.target.value\n                                                        }\n                                                    });\n                                                }}\n                                                maxLength={200}\n                                                label=\"Optional Message for Follow-up Alert\"\n                                                showTip={false}\n                                                disabled={isDisabled(AirQualityAlertKeys.child_alert)}\n                                            />\n                                        </Grid>\n                                    </>\n                                )\n                            }\n                        </Grid>\n                    </Grid>\n\n                ) : (\n                    <OptionalMessage\n                        value={editingAlert[AirQualityAlertKeys.message]}\n                        handleChange={(event) => {\n                            setEditingAlert({\n                                ...editingAlert,\n                                [AirQualityAlertKeys.message]: event.target.value\n                            });\n                        }}\n                        maxLength={200}\n                        disabled={isDisabled(AirQualityAlertKeys.message)}\n                    />\n                )}\n        </Stack>\n    );\n}","import { Button, Dialog, DialogTitle, DialogActions, DialogContent, Stack, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material';\nimport AlertTypes, { ThresholdAlertTypes } from '../AlertTypes';\nimport { CrudTypes } from '../Utils';\n\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../../ContextProviders/AirQualityAlertContext';\n\nimport { useContext, useEffect, useState } from 'react';\nimport { DashboardContext } from '../../../../ContextProviders/DashboardContext';\nimport { fetchDataFromURL } from '../../../../API/ApiFetch';\nimport { RESTmethods } from \"../../../../API/Utils\";\nimport { getAlertsApiUrl } from '../../../../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../../../../API/Utils\";\n\nimport { SnackbarMetadata } from '../../../../Utils/SnackbarMetadata';\n\nimport isEqual from 'lodash.isequal';\nimport AlertDeletionDialog from './AlertDeletionDialog';\nimport { useSnackbar } from 'notistack';\n\nimport { DialogData } from './DialogData';\nimport { AlertPropertyComponents } from './AlertPropertyComponents/AlertPropertyComponents';\n\nconst AlertModificationDialog = (props) => {\n  const {\n    alertTypeKey,\n    openAlertModificationDialog,\n    crudType,\n    handleClose\n  } = props;\n\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  const { selectedAlert, setSelectedAlert, editingAlert, setEditingAlert, setAlerts, addChildToAlerts } = useAirQualityAlert();\n\n  const [shouldDisableButton, setShouldDisableButton] = useState(false);\n\n  const { enqueueSnackbar } = useSnackbar()\n\n  const theme = useTheme();\n\n  const sanityCheckAlertBeforeSaving = () => {\n    if (alertTypeKey === AlertTypes.daily.id) return { valid: true };\n\n    if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return { valid: true };\n\n    const isAbove = editingAlert[AirQualityAlertKeys.alert_type] === ThresholdAlertTypes.above_threshold.id;\n    const threshold = editingAlert[AirQualityAlertKeys.threshold_value];\n    const childThreshold = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.threshold_value];\n\n    if (childThreshold === undefined) return { valid: true };\n\n    if (\n      (isAbove && threshold <= childThreshold) ||\n      (!isAbove && threshold >= childThreshold)\n    ) {\n      return {\n        valid: false,\n        message: `The follow-up alert must have a ${isAbove ? \"lower\" : \"higher\"} threshold than the first alert`\n      };\n    }\n\n    return { valid: true };\n  };\n\n  const removeChildAlertFromParentAlertBody = (body) => {\n    const newBody = { ...body };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n    return newBody;\n  }\n\n  const formatChildAlertBody = (body, parent_alert_id) => {\n    const newBody = {\n      ...body, // copy all properties from parent\n      ...body[AirQualityAlertKeys.child_alert], // but then, override with child's unique properties\n      [AirQualityAlertKeys.parent_alert_id]: parent_alert_id, // finally, link child to parent\n      [AirQualityAlertKeys.id]: null // destroy parent's id just in case\n    };\n    delete newBody[AirQualityAlertKeys.child_alert];\n    delete newBody[AirQualityAlertKeys.has_child_alert];\n\n    return newBody;\n  };\n\n  const handleAlertModification = ({ passedCrudType }) => {\n    const handleFetchError = (error) => {\n      enqueueSnackbar(DialogData[passedCrudType].errorMessage, SnackbarMetadata.error);\n    };\n\n    const handleFetchSuccess = () => {\n      enqueueSnackbar(DialogData[passedCrudType].successMessage, SnackbarMetadata.success);\n      handleClose();\n    }\n\n    switch (passedCrudType) {\n      case CrudTypes.add: {\n        const result = sanityCheckAlertBeforeSaving();\n        if (!result.valid) {\n          enqueueSnackbar(result.message, SnackbarMetadata.error);\n          return;\n        }\n\n        // 1. POST to create the main alert (always run)\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID\n          }),\n          restMethod: RESTmethods.POST,\n          body: removeChildAlertFromParentAlertBody(editingAlert)\n        }).then((createdAlert) => {\n          setAlerts(prevAlerts => {\n            const updatedAlerts = [...prevAlerts, createdAlert];\n            return addChildToAlerts(updatedAlerts);\n          });\n          handleFetchSuccess();\n\n          const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n          setSelectedAlert(placeholder);\n          setEditingAlert(placeholder);\n\n          // 2. POST for child alert associated with this main alert (only if it exists)\n          if (!editingAlert[AirQualityAlertKeys.has_child_alert]) return;\n\n          const parent_alert_id = createdAlert[AirQualityAlertKeys.id];\n          if (parent_alert_id === null || parent_alert_id === undefined) return;\n\n          fetchDataFromURL({\n            url: getAlertsApiUrl({\n              endpoint: GeneralAPIendpoints.alerts,\n              school_id: currentSchoolID\n            }),\n            restMethod: RESTmethods.POST,\n            body: formatChildAlertBody(editingAlert, parent_alert_id)\n          }).then((createdChildAlert) => {\n            setAlerts(prevAlerts => {\n              const updatedAlerts = [...prevAlerts, createdChildAlert];\n              return addChildToAlerts(updatedAlerts);\n            });\n          }).catch((childError) => handleFetchError(childError));\n\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      }\n      case CrudTypes.edit: {\n        const result = sanityCheckAlertBeforeSaving();\n        if (!result.valid) {\n          enqueueSnackbar(result.message, SnackbarMetadata.error);\n          return;\n        }\n\n        // 1. PUT to modify the main alert (always run)\n        const alert_id = selectedAlert[AirQualityAlertKeys.id];\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID,\n            alert_id: alert_id\n          }),\n          restMethod: RESTmethods.PUT,\n          body: removeChildAlertFromParentAlertBody(editingAlert)\n        }).then((updatedAlert) => {\n          setAlerts(prevAlerts => {\n            const updatedAlerts = prevAlerts.map(alert =>\n              alert.id === alert_id ? updatedAlert : alert\n            );\n            return addChildToAlerts(updatedAlerts);\n          });\n          handleFetchSuccess();\n\n          // 2. Editing for child alert associated with this main alert\n          const child_alert_id = editingAlert[AirQualityAlertKeys.child_alert]?.[AirQualityAlertKeys.id];\n          // 2.1. There should NOT be child alert\n          if (!editingAlert[AirQualityAlertKeys.has_child_alert]) {\n            // If child alert existed before but now is removed, then trigger deletion\n            if (child_alert_id !== null && child_alert_id !== undefined) {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID,\n                  alert_id: child_alert_id\n                }),\n                restMethod: RESTmethods.DELETE\n              }).then(() => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = prevAlerts.filter(alert => alert.id !== child_alert_id)\n                  return addChildToAlerts(updatedAlerts);\n                });\n                handleFetchSuccess();\n              }).catch((error) => handleFetchError(error));\n            }\n          }\n          // 2.2. There should be child alert\n          else {\n            // 2.2.1. If there is no child alert id before, create one\n            if (child_alert_id === null || child_alert_id === undefined) {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID\n                }),\n                restMethod: RESTmethods.POST,\n                body: formatChildAlertBody(editingAlert, alert_id)\n              }).then((createdChildAlert) => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = [...prevAlerts, createdChildAlert];\n                  return addChildToAlerts(updatedAlerts);\n                });\n              }).catch((childError) => handleFetchError(childError));\n            }\n\n            // 2.2.2. Else, update that child alert\n            else {\n              fetchDataFromURL({\n                url: getAlertsApiUrl({\n                  endpoint: GeneralAPIendpoints.alerts,\n                  school_id: currentSchoolID,\n                  alert_id: child_alert_id\n                }),\n                restMethod: RESTmethods.PUT,\n                body: formatChildAlertBody(editingAlert, alert_id)\n              }).then((updatedChildAlert) => {\n                setAlerts(prevAlerts => {\n                  const updatedAlerts = prevAlerts.map(alert =>\n                    alert.id === child_alert_id ? updatedChildAlert : alert\n                  );\n\n                  return addChildToAlerts(updatedAlerts);\n                });\n              }).catch((childError) => handleFetchError(childError));\n            }\n          }\n\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      }\n      case CrudTypes.delete:\n        fetchDataFromURL({\n          url: getAlertsApiUrl({\n            endpoint: GeneralAPIendpoints.alerts,\n            school_id: currentSchoolID,\n            alert_id: selectedAlert.id\n          }),\n          restMethod: RESTmethods.DELETE\n        }).then(() => {\n          setAlerts(prevAlerts => prevAlerts.filter(alert => alert.id !== selectedAlert.id));\n          handleFetchSuccess();\n        }).catch((error) => handleFetchError(error));\n\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Disable / Enable save button depends on context\n  useEffect(() => {\n    // startTime cannot be larger than endTime\n    if (editingAlert[AirQualityAlertKeys.time_range]?.[0] > editingAlert[AirQualityAlertKeys.time_range]?.[1]) {\n      setShouldDisableButton(true);\n      return;\n    }\n\n    switch (crudType) {\n      case CrudTypes.add:\n        const placeholder = getAlertDefaultPlaceholder(alertTypeKey);\n\n        if (editingAlert[AirQualityAlertKeys.sensor_id] === placeholder[AirQualityAlertKeys.sensor_id] ||\n          editingAlert[AirQualityAlertKeys.datatypekey] === placeholder[AirQualityAlertKeys.datatypekey]) {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(true);\n          }\n        } else {\n          if (alertTypeKey === AlertTypes.daily.id) {\n            setShouldDisableButton(editingAlert[AirQualityAlertKeys.minutespastmidnight] === placeholder[AirQualityAlertKeys.minutespastmidnight]);\n          } else {\n            setShouldDisableButton(false);\n          }\n        }\n        break;\n\n      case CrudTypes.edit:\n        // Case empty editing value\n        let alertVal;\n        if (alertTypeKey === AlertTypes.daily.id) {\n          alertVal = editingAlert[AirQualityAlertKeys.minutespastmidnight]\n        } else {\n          alertVal = editingAlert[AirQualityAlertKeys.threshold_value]\n        }\n        const datatypeKeyVal = editingAlert[AirQualityAlertKeys.datatypekey];\n\n        if (!alertVal || alertVal === '' || !datatypeKeyVal || datatypeKeyVal === '') {\n          setShouldDisableButton(true);\n          break;\n        }\n\n        setShouldDisableButton(isEqual(selectedAlert, editingAlert));\n        break;\n      default:\n        setShouldDisableButton(false);\n        break;\n    }\n  }, [crudType, selectedAlert, editingAlert, alertTypeKey]);\n\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('md'));\n\n  return (\n    <Dialog\n      open={openAlertModificationDialog}\n      onClose={handleClose}\n      aria-labelledby=\"alert-modification-dialog\"\n      maxWidth=\"md\"\n      fullWidth\n      fullScreen={smallScreen}\n    >\n      <DialogTitle id=\"alert-modification-dialog\">\n        {DialogData[crudType]?.title}\n      </DialogTitle>\n\n      <DialogContent>\n        <AlertPropertyComponents\n          alertTypeKey={alertTypeKey}\n          crudType={crudType}\n        />\n      </DialogContent>\n      <DialogActions sx={{\n        justifyContent: \"space-between\"\n      }}>\n        {\n          crudType === CrudTypes.edit ? (\n            <AlertDeletionDialog\n              onConfirmedDelete={() => {\n                handleAlertModification({ passedCrudType: CrudTypes.delete })\n              }}\n            />\n          ) : null\n        }\n\n        <Stack direction=\"row\" width=\"100%\" justifyContent=\"end\">\n          <Button\n            onClick={handleClose}\n            sx={{\n              color: theme.palette.text.secondary\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              handleAlertModification({ passedCrudType: crudType });\n            }}\n            color=\"primary\"\n            disabled={shouldDisableButton}\n          >\n            Save Edit\n          </Button>\n        </Stack>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AlertModificationDialog;\n\n\n","import { useContext, useState } from 'react';\nimport { Box, Button, IconButton, Stack, Table, TableBody, TableCell, TableHead, TableRow, Tooltip, Alert, Grow, Switch, Chip } from '@mui/material';\n\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddAlarmIcon from '@mui/icons-material/AddAlarm';\n\nimport { useTheme } from '@mui/material';\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\n\nimport AlertTypes from './AlertTypes';\nimport { ThresholdAlertTypes } from './AlertTypes';\n\nimport { isValidArray } from '../../../Utils/UtilFunctions';\nimport AlertModificationDialog from './AlertModificationDialog/AlertModificationDialog';\n\nimport { CrudTypes, SharedColumnHeader } from './Utils';\nimport { TransitionGroup } from 'react-transition-group';\n\nimport { fetchDataFromURL } from '../../../API/ApiFetch';\nimport { GeneralAPIendpoints, RESTmethods } from '../../../API/Utils';\nimport { DashboardContext } from '../../../ContextProviders/DashboardContext';\nimport { SnackbarMetadata } from '../../../Utils/SnackbarMetadata';\nimport { getAlertsApiUrl } from '../../../API/ApiUrls';\nimport { useSnackbar } from 'notistack';\nimport { UserRoles } from '../../Account/Utils';\nimport { DataTypes } from '../../../Utils/AirQuality/DataTypes';\nimport { DAYS_OF_WEEK } from './AlertModificationDialog/AlertPropertyComponents/DAYS_OF_WEEK';\nimport { returnHoursFromMinutesPastMidnight } from '../../TimeRange/TimeRangeUtils';\n\nconst returnDaysOfWeekString = (days_of_week) => {\n  if (!days_of_week || !isValidArray(days_of_week)) return \"N/A\";\n\n  // Case where all days are selected\n  if (days_of_week.length === DAYS_OF_WEEK.length) return \"Everyday\";\n\n  // Check if two days are missing and if both are weekend days\n  const missingDays = DAYS_OF_WEEK.filter(d => !days_of_week.includes(d.value));\n  if (missingDays.length === 2 && missingDays.every(d => [5, 6].includes(d.value))) {\n    return \"Only weekdays\";\n  }\n\n  // Default case: map the selected days to their short labels\n  return days_of_week\n    .map(day => DAYS_OF_WEEK.find(d => d.value === day)?.label.slice(0, 2))\n    .join(', ');\n};\n\nconst returnCreatedByString = (owner_role, self_is_owner) => {\n  if (self_is_owner === true) return \"You\";\n\n  if (owner_role) return UserRoles[owner_role].name;\n  else return \"N/A\";\n}\n\nconst returnAlertNotModifiableString = (owner_role, is_allowed_to_modify) => {\n  if (is_allowed_to_modify) return \"\";\n\n  if (owner_role && UserRoles[owner_role]) {\n    return `${UserRoles[owner_role].name} added your email to this school-wide alert. For edit or removal, please reach out to ${UserRoles[owner_role].name}.`;\n  }\n};\n\nconst AlertsTable = (props) => {\n  const { selectedAlert, setSelectedAlert, setAlerts, addChildToAlerts } = useAirQualityAlert();\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { enqueueSnackbar } = useSnackbar()\n\n  const { alertTypeKey, alertsForTable } = props;\n\n  const theme = useTheme();\n\n  const [openAlertModificationDialog, setOpenAlertModificationDialog] = useState(false);\n  const [crudType, setCrudType] = useState(null);\n\n  const handleModifyClick = ({ alert, crudType }) => {\n    setSelectedAlert(alert);\n    setCrudType(crudType);\n    setOpenAlertModificationDialog(true);\n  };\n\n  const handleClose = () => {\n    setOpenAlertModificationDialog(false);\n    setSelectedAlert(getAlertDefaultPlaceholder(alertTypeKey));\n  }\n\n  const handleEnableClick = ({ alert }) => {\n    const currentIsEnabled = alert[AirQualityAlertKeys.is_enabled];\n    const newIsEnabled = !currentIsEnabled;\n\n    fetchDataFromURL({\n      url: getAlertsApiUrl({\n        endpoint: GeneralAPIendpoints.alerts,\n        school_id: currentSchoolID,\n        alert_id: alert[AirQualityAlertKeys.id]\n      }),\n      restMethod: RESTmethods.PUT,\n      body: {\n        ...alert,\n        [AirQualityAlertKeys.is_enabled]: newIsEnabled\n      }\n    }).then((data) => {\n      setAlerts(prevAlerts => {\n        const updatedAlerts = prevAlerts.map(prevAlert =>\n          prevAlert[AirQualityAlertKeys.id] === alert[AirQualityAlertKeys.id] ? data : prevAlert\n        )\n        return addChildToAlerts(updatedAlerts);\n      }\n      );\n      enqueueSnackbar(`This alert will be ${newIsEnabled ? \"enabled\" : \"disabled\"}`, SnackbarMetadata.success);\n    }).catch((error) => {\n      enqueueSnackbar(error.message || `There was an error ${newIsEnabled ? \"enabling\" : \"disabling\"} this alert, try again!`, SnackbarMetadata.error);\n    });\n  }\n\n  return (\n    <>\n      <Stack spacing={2} alignItems=\"center\">\n        <Box sx={{ width: \"100%\", overflowX: 'auto' }}>\n          {\n            isValidArray(alertsForTable) ?\n              (\n                <Table size=\"small\" sx={{ my: 1 }}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ px: 0 }} />\n\n                      <TableCell>\n                        {SharedColumnHeader.location}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.dataType}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.selectedDaysOfWeek}\n                      </TableCell>\n\n                      <TableCell>\n                        {AlertTypes[alertTypeKey]?.tableColumnHeader || \"\"}\n                      </TableCell>\n\n                      <TableCell>\n                        {SharedColumnHeader.createdBy}\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n\n                  <TransitionGroup component={TableBody}>\n                    {isValidArray(alertsForTable) ? alertsForTable.map((alert, index) => (\n                      <Grow key={index}>\n                        <TableRow\n                          sx={{\n                            background: alert[AirQualityAlertKeys.id] === selectedAlert[AirQualityAlertKeys.id] && theme.palette.background.NYUpurpleLight,\n                            textDecoration: alert[AirQualityAlertKeys.is_enabled] === false ? \"line-through\" : \"none\"\n                          }}\n                        >\n                          <TableCell sx={{ px: 0 }}>\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Click to ${alert[AirQualityAlertKeys.is_enabled] ? \"disable\" : \"enable\"} alert`\n                              }\n                            >\n                              {/* Wrap <Switch> in a <span> so that <Tooltip> will still display even if it's disabled */}\n                              <span\n                                onClick={() => {\n                                  if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n                                    enqueueSnackbar(\n                                      returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify]),\n                                      SnackbarMetadata.warning\n                                    );\n                                    return;\n                                  }\n                                  handleEnableClick({ alert });\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <Switch\n                                  size='small'\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  checked={alert[AirQualityAlertKeys.is_enabled]}\n                                />\n                              </span>\n                            </Tooltip>\n\n                            <Tooltip\n                              title={\n                                alert[AirQualityAlertKeys.is_allowed_to_modify] === false\n                                  ? returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify])\n                                  : `Edit alert`\n                              }\n                            >\n                              <span\n                                onClick={() => {\n                                  if (alert[AirQualityAlertKeys.is_allowed_to_modify] === false) {\n                                    enqueueSnackbar(\n                                      returnAlertNotModifiableString(alert[AirQualityAlertKeys.owner_role], alert[AirQualityAlertKeys.is_allowed_to_modify]),\n                                      SnackbarMetadata.warning\n                                    );\n                                    return;\n                                  }\n                                  handleModifyClick({ alert, crudType: CrudTypes.edit })\n                                }}\n                                style={{ display: 'inline-block' }}\n                              >\n                                <IconButton\n                                  aria-label=\"edit\"\n                                  size=\"small\"\n                                  disabled={alert[AirQualityAlertKeys.is_allowed_to_modify] === false}\n                                  sx={{ \"&:hover,:focus\": { color: theme.palette.primary.main } }}\n                                >\n                                  <EditIcon />\n                                </IconButton>\n                              </span>\n                            </Tooltip>\n                          </TableCell>\n\n                          <TableCell sx={{ textTransform: 'capitalize' }}>\n                            {alert[AirQualityAlertKeys.location_short]}\n                          </TableCell>\n\n                          <TableCell>\n                            {\n                              Object.keys(DataTypes)\n                                .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                .map(key => DataTypes[key].name_title)[0]\n                            }\n                          </TableCell>\n\n                          <TableCell>\n                            {returnDaysOfWeekString(alert[AirQualityAlertKeys.days_of_week])}\n                          </TableCell>\n\n                          {alertTypeKey === AlertTypes.threshold.id ? (\n                            <TableCell>\n                              {ThresholdAlertTypes[alert[AirQualityAlertKeys.alert_type]].sign} {alert[AirQualityAlertKeys.threshold_value]}\n                              &nbsp;\n                              {\n                                Object.keys(DataTypes)\n                                  .filter(key => key === alert[AirQualityAlertKeys.datatypekey])\n                                  .map(key => DataTypes[key].unit)[0]\n                              }\n                            </TableCell>\n                          ) : null}\n\n                          {alertTypeKey === AlertTypes.daily.id ? (\n                            <TableCell>\n                              {returnHoursFromMinutesPastMidnight(alert[AirQualityAlertKeys.minutespastmidnight])}\n                            </TableCell>\n                          ) : null}\n\n                          <TableCell>\n                            <Chip\n                              label={\n                                returnCreatedByString(\n                                  alert[AirQualityAlertKeys.owner_role],\n                                  alert[AirQualityAlertKeys.self_is_owner]\n                                )\n                              }\n                              size='small'\n                            />\n                          </TableCell>\n                        </TableRow>\n                      </Grow>\n                    )) : null\n                    }\n                  </TransitionGroup>\n                </Table>\n              ) : (\n                <Alert\n                  severity='warning'\n                  sx={{\n                    mt: 2\n                  }}>\n                  No {AlertTypes[alertTypeKey].name.toLowerCase()} alert has been set up\n                </Alert>\n              )\n          }\n        </Box>\n\n        <Button\n          variant=\"outlined\"\n          startIcon={<AddAlarmIcon />}\n          fullWidth\n          sx={{ maxWidth: \"sm\", textTransform: 'uppercase' }}\n          onClick={() => handleModifyClick({\n            alert: getAlertDefaultPlaceholder(alertTypeKey), crudType: CrudTypes.add\n          })}\n        >\n          Add Alert\n        </Button>\n      </Stack>\n\n      <AlertModificationDialog\n        alertTypeKey={alertTypeKey}\n        crudType={crudType}\n        openAlertModificationDialog={openAlertModificationDialog}\n        handleClose={handleClose}\n      />\n    </>\n  );\n};\n\nexport default AlertsTable;","import { useState } from 'react';\nimport { Box, Tab, useMediaQuery } from '@mui/material';\n\nimport StyledTabs from '../../StyledTabs';\nimport AlertsTable from './AlertsTable';\n\nimport { AirQualityAlertKeys, getAlertDefaultPlaceholder, useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\nimport AlertTypes from './AlertTypes';\nimport { isValidArray } from '../../../Utils/UtilFunctions';\n\nfunction AlertTab(props) {\n  const { children, value, index, alertType, alertsArray, ...other } = props;\n\n  return (\n    <Box\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`alert-tabpanel-${alertType.id}`}\n      aria-labelledby={`alert-tab-${alertType.id}`}\n      width=\"100%\"\n      {...other}\n    >\n      <AlertsTable\n        alertTypeKey={alertType.id}\n        alertsForTable={alertsArray}\n      />\n    </Box>\n  );\n}\n\nexport default function AlertsTabs() {\n  const smallScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'));\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const { setSelectedAlert } = useAirQualityAlert();\n\n  const handleTabChange = (_, newVal) => {\n    setCurrentTab(newVal);\n    setSelectedAlert(\n      getAlertDefaultPlaceholder(AlertTypes[Object.keys(AlertTypes)?.[newVal]]?.id)\n    );\n  };\n\n  const { alerts } = useAirQualityAlert();\n\n  // Helper function to return filered alert:\n  // - based on alert_type (threshold or daily, depends on which alert tab is visible)\n  // - only return alert that is not child to another alert\n  const returnFilteredAlerts = (alertTypeKey) => {\n    const filteredAlerts = alerts.filter((alert) => {\n      if (!alert) return null;\n\n      const alertType = alert[AirQualityAlertKeys.alert_type]?.toLowerCase();\n      const parentAlertId = alert[AirQualityAlertKeys.parent_alert_id];\n\n      if (alertType.includes(alertTypeKey) && (parentAlertId === null || parentAlertId === undefined)) return alert;\n      else return null;\n    });\n\n    const alertsLength = isValidArray(filteredAlerts) ? filteredAlerts.length : \"0\";\n\n    return {\n      array: filteredAlerts,\n      alertsLength\n    }\n  }\n\n  return (\n    <Box>\n      <StyledTabs\n        value={currentTab}\n        onChange={handleTabChange}\n        variant={smallScreen ? 'fullWidth' : 'standard'}\n        smallFontSize=\"0.825rem\"\n      >\n        {Object.values(AlertTypes).map((type) => {\n          const filteredAlerts = returnFilteredAlerts(type.id);\n          return (\n            <Tab\n              key={type.id}\n              value={type.index}\n              icon={type.icon}\n              label={`${type.name} (${filteredAlerts?.alertsLength})`}\n              iconPosition=\"start\"\n              sx={{ py: 0 }}\n            />\n          )\n        }\n        )}\n      </StyledTabs>\n\n      {Object.values(AlertTypes).map((type) => {\n        const filteredAlerts = returnFilteredAlerts(type.id);\n        return (\n          <AlertTab\n            key={type.id}\n            alertType={type}\n            value={currentTab}\n            index={type.index}\n            alertsArray={filteredAlerts.array}\n          />\n        )\n      }\n      )}\n    </Box>\n  );\n}\n","import { Stack, Typography } from '@mui/material';\nimport NotificationImportantIcon from '@mui/icons-material/NotificationImportant';\n\nimport CustomDialog from '../../CustomDialog/CustomDialog';\nimport EmailsInput from './EmailsInput';\nimport AlertsTabs from './AlertsTabs';\nimport { useAirQualityAlert } from '../../../ContextProviders/AirQualityAlertContext';\nimport useLoginHandler from '../../Account/useLoginHandler';\nimport { useContext } from 'react';\nimport { UserContext } from '../../../ContextProviders/UserContext';\nimport { UserRoles } from '../../Account/Utils';\n\n\nexport default function AirQualityAlerts({ onButtonClick }) {\n  const { handleRestrictedAccess } = useLoginHandler(onButtonClick);\n\n  const { fetchAlerts, hasFetchedAlerts, setHasFetchedAlerts } = useAirQualityAlert();\n\n  const { user } = useContext(UserContext);\n\n  const isModifiable = [UserRoles.admin.id, UserRoles.school.id].includes(user?.user_role);\n\n  return (\n    <CustomDialog\n      buttonIcon={<NotificationImportantIcon sx={{ fontSize: '1rem' }} />}\n      buttonLabel=\"Alerts\"\n      dialogTitle=\"Air quality alerts\"\n      dialogOpenHandler={(action) => {\n        const isLoggedIn = handleRestrictedAccess(action);\n        if (isLoggedIn && !hasFetchedAlerts) {\n          fetchAlerts();\n          setHasFetchedAlerts(true);\n        }\n      }}\n    >\n      <Stack width=\"100%\" spacing={isModifiable ? 5 : 2}>\n        <AlertsTabs />\n\n        {isModifiable ? <EmailsInput /> : (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Alerts will be sent to your email address: <b>{user?.email}</b>\n          </Typography>\n        )}\n      </Stack>\n    </CustomDialog>\n  );\n}\n","import { useEffect, useRef, useCallback, useContext, useState } from \"react\";\nimport { AppRoutes } from \"../../Utils/AppRoutes\";\nimport { LoginTypes } from \"../Account/Utils\";\nimport { SnackbarMetadata } from '../../Utils/SnackbarMetadata';\nimport { UserContext } from \"../../ContextProviders/UserContext\";\nimport EmailVerificationDialog from \"./EmailVerificationDialog\";\nimport { useSnackbar } from \"notistack\";\n\nconst LoginPopupHandler = ({ onLoginSuccess, children }) => {\n    const popupRef = useRef(null);\n    const { enqueueSnackbar } = useSnackbar()\n    const { setAuthenticationState, setUser } = useContext(UserContext);\n\n    const [showVerificationDialog, setShowVerificationDialog] = useState(false);\n    const [email, setEmail] = useState(\"\");\n\n    const openLoginPopup = useCallback(() => {\n        const width = 500;\n        const height = 600;\n        const left = (window.screen.width - width) / 2;\n        const top = (window.screen.height - height) / 2;\n\n        const popup = window.open(\n            AppRoutes.login,\n            \"Login\",\n            `width=${width},height=${height},top=${top},left=${left}`\n        );\n\n        if (popup) {\n            popup.focus();\n            popupRef.current = popup;\n\n            const intervalId = setInterval(() => {\n                if (popup.closed) {\n                    clearInterval(intervalId);\n                    window.removeEventListener(\"message\", handleMessage);\n                    popupRef.current = null;\n                }\n            }, 500);\n        } else {\n            alert(\"Popup blocked. Please enable popups for login.\");\n        }\n    }, []);\n\n    const handleMessage = useCallback(\n        (event) => {\n            if (event.origin === window.location.origin && event.data.type === LoginTypes.password) {\n                if (event.data.success) {\n                    const user = event.data.user;\n\n                    setAuthenticationState({\n                        checkedAuthentication: true,\n                        authenticated: true,\n                    });\n                    setUser(user);\n\n                    if (user.message) {\n                        enqueueSnackbar(user.message, SnackbarMetadata.success);\n                    }\n\n                    if (user.is_verified === false) {\n                        setShowVerificationDialog(true);\n                        setEmail(user.email);\n                    }\n\n                    onLoginSuccess?.();\n                }\n            }\n        },\n        [onLoginSuccess]\n    );\n\n    useEffect(() => {\n        window.addEventListener(\"message\", handleMessage);\n        return () => {\n            window.removeEventListener(\"message\", handleMessage);\n        };\n    }, [handleMessage]);\n\n    return (\n        <>\n            {children({\n                openLoginPopup,\n            })}\n            <EmailVerificationDialog\n                open={showVerificationDialog}\n                email={email}\n            />\n        </>\n    );\n};\n\nexport default LoginPopupHandler;\n","import { Grid } from \"@mui/material\";\nimport ScreenDropDownMenu from \"../../Components/AirQuality/AirQualityScreen/ScreenDropDownMenu\";\nimport DatasetDownloadDialog from \"../../Components/DatasetDownload/DatasetDownloadDialog\";\nimport AirQualityAlerts from \"../../Components/AirQuality/AirQualityAlerts/AirQualityAlert\";\nimport LoginPopupHandler from \"../../Components/Account/LoginPopupHandler\";\nimport useLoginHandler from \"../../Components/Account/useLoginHandler\";\nimport { SnackbarMetadata } from \"../../Utils/SnackbarMetadata\";\nimport { AirQualityAlertProvider } from \"../../ContextProviders/AirQualityAlertContext\";\nimport { useSnackbar } from \"notistack\";\n\nconst ProjectReservedArea = () => {\n    const { loggedIn } = useLoginHandler();\n    const { enqueueSnackbar } = useSnackbar()\n\n    const handleLoginSuccess = () => {\n        enqueueSnackbar(\"You can now access TV Screens, Dataset, and Alerts.\", {\n            variant: SnackbarMetadata.success.name,\n            duration: SnackbarMetadata.success.duration * 2\n        });\n    };\n\n    return (\n        <LoginPopupHandler\n            onLoginSuccess={handleLoginSuccess}\n        >\n            {({ openLoginPopup }) => (\n                <Grid container spacing={1} justifyContent=\"center\" alignItems=\"center\">\n                    <Grid item>\n                        <ScreenDropDownMenu onButtonClick={loggedIn ? null : openLoginPopup} />\n                    </Grid>\n                    <Grid item>\n                        <DatasetDownloadDialog onButtonClick={loggedIn ? null : openLoginPopup} />\n                    </Grid>\n                    <Grid item>\n                        <AirQualityAlertProvider>\n                            <AirQualityAlerts onButtonClick={loggedIn ? null : openLoginPopup} />\n                        </AirQualityAlertProvider>\n                    </Grid>\n                </Grid>\n            )}\n        </LoginPopupHandler>\n    );\n};\n\nexport default ProjectReservedArea;\n","import { Chip, Tooltip, Skeleton } from '@mui/material';\n\n// Custom Chip component to display metadata\nconst CustomChip = (props) => {\n    const { tooltipTitle, label, ...otherProps } = props;\n\n    const chip = (\n        <Chip\n            size=\"small\"\n            label={label || <Skeleton variant=\"text\" sx={{ minWidth: '5rem' }} />}\n            sx={{\n                userSelect: 'text',\n                '& .MuiChip-label': {\n                    userSelect: 'text'\n                }\n            }}\n            {...otherProps}\n        />\n    );\n\n\n    return tooltipTitle ? (\n        <Tooltip title={tooltipTitle} enterDelay={0} leaveDelay={200}>\n            {chip}\n        </Tooltip>\n    ) : chip;\n}\n\nexport default CustomChip;","import { useContext, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { Box, Menu, MenuItem, MenuList } from \"@mui/material\";\nimport CustomChip from \"./CustomChip\";\n\nimport PlaceIcon from '@mui/icons-material/Place';\nimport { LocalStorage } from \"../Utils/LocalStorage\";\nimport { AppRoutes } from \"../Utils/AppRoutes\";\n\nimport * as Tracking from '../Utils/Tracking';\n\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\nimport { UserContext } from \"../ContextProviders/UserContext\";\n\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\nimport useSchoolMetadata from \"../hooks/useSchoolMetadata\";\n\nconst SchoolSelector = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n  const { data: schoolMetadata } = useSchoolMetadata();\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleItemSelect = (newSchoolID) => () => {\n    if (currentSchoolID !== newSchoolID) {\n      localStorage.setItem(LocalStorage.schoolID, newSchoolID)\n\n      Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n        {\n          origin_school: currentSchoolID,\n          destination_school_id: newSchoolID,\n          origin_id: 'school_selector'\n        });\n\n      navigate(`${AppRoutes.dashboard}/${newSchoolID}`)\n    }\n    handleClose();\n  };\n\n  if (!schoolMetadata) return;\n\n  // If there is only one school, return a Chip displaying the name of that school\n  if (!Array.isArray(user.allowedSchools) || user.allowedSchools.length <= 1)\n    return (\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={schoolMetadata.name || \"No School Name Given\"}\n        tooltipTitle={\"School\"}\n      />\n    );\n\n  // Else, display a drop down menu that allows choosing between different schools\n  return (\n    <>\n      <CustomChip\n        icon={<PlaceIcon />}\n        label={returnChipLabel(schoolMetadata.name, open)}\n        tooltipTitle={\"Click to Select School\"}\n        clickable\n        onClick={handleClick}\n        aria-controls={open ? 'basic-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n      />\n      <Menu\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n        <MenuList dense>\n          {user.allowedSchools.map((school, index) => (\n            <MenuItem\n              key={index}\n              onClick={handleItemSelect(school.school_id)}\n            >\n              {school.name}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Menu>\n    </>\n  );\n};\n\nconst returnChipLabel = (name, open) => {\n  return (\n    <Box sx={{\n      '& svg': {\n        fontSize: \"1rem\", verticalAlign: \"sub\", marginLeft: \"0.25rem\"\n      }\n    }\n    }>\n      {name || \"Loading...\"}\n      {open ? (\n        <ArrowDropUpIcon />\n      ) : (\n        <ArrowDropDownIcon />\n      )}\n    </Box>\n  );\n};\n\nexport default SchoolSelector;","// import { MetadataContext } from \"../../ContextProviders/MetadataContext\";\nimport { Grid } from \"@mui/material\";\n\nimport SchoolSelector from \"../../Components/SchoolSelector\";\nimport CustomChip from \"../../Components/CustomChip\";\n\nimport PersonIcon from '@mui/icons-material/Person';\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n// import BarChartIcon from '@mui/icons-material/BarChart';\n// import CommentIcon from '@mui/icons-material/Comment';\n// import * as Tracking from '../../Utils/Tracking';\n// import { scrollToSection } from \"../../Components/Header/MenuItemAsNavLink\";\n// import sectionData from '../../section_data.json';\n// import { HYVOR_PAGE_NAME, NYUAD } from \"../../Utils/GlobalVariables\";\n\n// Temporarily not using HyvorTalk comment anymore\n// const GridOfMetadataChips = ({ displayCommentSection }) => {\n\n\nconst GridOfMetadataChips = () => {\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (!schoolMetadata) return;\n\n    // Temporarily not using HyvorTalk comment anymore\n    // const { commentCounts, fetchCommentCounts, setCommentCounts } = useContext(MetadataContext);\n    // Fetch comment count for NYUAD\n    // useEffect(() => {\n    //     if (!schoolMetadata) return;\n\n    //     const isNYUAD = schoolMetadata.school_id === NYUAD;\n    //     if (isNYUAD && !commentCounts) {\n    //         fetchCommentCounts().then((data) => {\n    //             setCommentCounts(data);\n    //         });\n    //     }\n    // }, [schoolMetadata])\n\n    return (\n        <Grid container item spacing={1} justifyContent=\"center\">\n            <Grid item>\n                <SchoolSelector />\n            </Grid>\n\n            <Grid item>\n                <CustomChip\n                    icon={<PersonIcon />}\n                    label={`${schoolMetadata.contactPerson} <${schoolMetadata.contactEmail}>`}\n                    tooltipTitle=\"Main Contact\"\n                    component=\"a\"\n                    href={`mailto:${schoolMetadata?.contactEmail}`}\n                    clickable\n                />\n            </Grid>\n\n            {/* Temporarily not using HyvorTalk comment anymore\n            {(displayCommentSection === true && commentCounts !== null) ?\n                (\n                    <Grid item>\n                        <CustomChip\n                            icon={<CommentIcon />}\n                            label={`${commentCounts[HYVOR_PAGE_NAME]} Comment${commentCounts[HYVOR_PAGE_NAME] > 1 ? \"s\" : \"\"}`}\n                            tooltipTitle=\"Number of Comments\"\n                            onClick={() => {\n                                scrollToSection(sectionData.commentSection.id);\n                                Tracking.sendEventAnalytics(Tracking.Events.internalNavigation,\n                                    {\n                                        destination_id: sectionData.commentSection.id,\n                                        destination_label: sectionData.commentSection.toString(),\n                                        origin_id: 'chip'\n                                    })\n                            }}\n                        />\n                    </Grid>\n                ) : null} */}\n        </Grid>\n    )\n}\n\nexport default GridOfMetadataChips;","import { Skeleton, Typography, useTheme } from \"@mui/material\";\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from \"../../Utils/UtilFunctions\";\nimport useSchoolMetadata from \"../../hooks/useSchoolMetadata\";\n\nconst ProjectDescription = () => {\n    const theme = useTheme();\n    const { data: schoolMetadata } = useSchoolMetadata();\n\n    if (schoolMetadata) return (\n        <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{\n                textAlign: 'justify', pb: 2, mb: 0, \"& table *\": {\n                    color: `${theme.palette.text.secondary}`\n                }\n            }}\n            gutterBottom\n        >\n            {\n                parse(schoolMetadata.description || '', {\n                    replace: replacePlainHTMLWithMuiComponents,\n                })\n            }\n        </Typography>\n    )\n    else {\n        return (\n            Array.from({ length: 3 }).map((_, index) => (\n                <Skeleton key={index} variant='text' />\n            ))\n        )\n    }\n}\n\nexport default ProjectDescription;","import { Stack, Button } from \"@mui/material\";\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport { useContext } from \"react\";\nimport { DashboardContext } from \"../../ContextProviders/DashboardContext\";\n\nconst LoadMoreButton = () => {\n    const { loadMoreCharts, setLoadMoreCharts } = useContext(DashboardContext);\n\n    if (loadMoreCharts === false) {\n        return (\n            <Stack sx={{ mt: 6, mx: 'auto', maxWidth: 'sm' }}>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setLoadMoreCharts(true);\n                    }}\n                >\n                    <KeyboardArrowDownIcon sx={{ fontSize: '1rem' }} />&nbsp;Load More Charts\n                </Button>\n            </Stack>\n        )\n    }\n    else {\n        return null;\n    }\n}\n\nexport default LoadMoreButton;","import { useContext } from 'react';\nimport ChartComponentWrapper from '../../Graphs/ChartComponentWrapper';\nimport UppercaseTitle from '../../Components/UppercaseTitle';\n\nimport { Box, Container, Divider, Grid } from '@mui/material';\n\nimport ThemePreferences from '../../Themes/ThemePreferences';\n\nimport AirQualityIndexLegendQuickGlance from '../../Components/AirQuality/AirQualityIndexLegendQuickGlance';\n\nimport sectionData from '../../section_data.json';\n\nimport FullWidthBox from '../../Components/FullWidthBox';\n\nimport CurrentAQIGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIGrid';\n\nimport { DashboardContext } from '../../ContextProviders/DashboardContext';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport AQIexplanation from '../../Components/AirQuality/AQIexplanation';\nimport { AxesPickerProvider } from '../../ContextProviders/AxesPickerContext';\nimport { KAMPALA, NUMBER_OF_CHARTS_TO_LOAD_INITIALLY } from '../../Utils/GlobalVariables';\n\nimport ProjectReservedArea from './ProjectReservedArea';\nimport GridOfMetadataChips from './GridOfMetadataChips';\nimport ProjectDescription from './ProjectDescription';\nimport LoadMoreButton from './LoadMoreButton';\nimport CurrentAQIMapWithGrid from '../../Components/AirQuality/CurrentAQI/CurrentAQIMapWithGrid';\nimport { ChartAPIendpointsOrder } from '../../API/Utils';\nimport useCurrentSensorsData from '../../hooks/useCurrentSensorsData';\nimport useSchoolMetadata from '../../hooks/useSchoolMetadata';\n\n// Temporarily not using HyvorTalk comment anymore\n// import CommentSection from '../../Components/CommentSection';\n// import { HYVOR_PAGE_NAME } from '../../Utils/GlobalVariables';\n\nconst Project = () => {\n  const { currentSchoolID, loadMoreCharts } = useContext(DashboardContext);\n  const { data: currentSensorsData } = useCurrentSensorsData();\n  const { data: schoolMetadata } = useSchoolMetadata();\n\n  const chartsToRender = loadMoreCharts\n    ? ChartAPIendpointsOrder.length\n    : NUMBER_OF_CHARTS_TO_LOAD_INITIALLY;\n\n  const { themePreference, temperatureUnitPreference } = useContext(PreferenceContext);\n\n  // Temporarily not using HyvorTalk comment anymore\n  // const [displayCommentSection, setDisplayCommentSection] = useState(false);\n\n  const getDashboardTitle = () => {\n    if (schoolMetadata?.school_id) return `Air Quality | ${schoolMetadata?.school_id}`\n  }\n\n  return (\n    <Box width=\"100%\">\n      <AirQualityIndexLegendQuickGlance />\n\n      <FullWidthBox backgroundColor='customAlternateBackground'>\n        <Container sx={{ pt: 2, pb: 2 }}>\n          <Grid container spacing={1.5} sx={{ mb: 4 }}>\n            <Grid item xs={12}>\n              <UppercaseTitle\n                text={getDashboardTitle()}\n                textAlign=\"center\"\n                sx={{ pb: 0 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <GridOfMetadataChips\n              // Temporarily not using HyvorTalk comment anymore\n              // displayCommentSection={displayCommentSection}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              {/* Reserved area that requires an account, even for public schools */}\n              <ProjectReservedArea />\n            </Grid>\n          </Grid>\n\n          {schoolMetadata?.has_map === true ?\n            (\n              <CurrentAQIMapWithGrid\n                currentSensorsData={currentSensorsData}\n                schoolID={currentSchoolID}\n                isOnBannerPage={false}\n                minMapHeight={\"250px\"}\n              />\n            ) : (\n              <Box textAlign=\"center\" sx={{ mb: 2 }}>\n                <CurrentAQIGrid\n                  currentSensorsData={currentSensorsData}\n                  isScreen={false}\n                  temperatureUnitPreference={temperatureUnitPreference}\n                  showHeatIndex={currentSchoolID === KAMPALA && false}\n                  showWeather={currentSchoolID === KAMPALA && false}\n                />\n              </Box>\n            )\n          }\n\n          <ProjectDescription />\n\n          <AQIexplanation />\n\n        </Container>\n      </FullWidthBox>\n\n      <Box id={sectionData.charts.id}>\n        {ChartAPIendpointsOrder.slice(0, chartsToRender).map((_, index) => (\n          <FullWidthBox\n            key={index}\n            backgroundColor={index % 2 !== 0 ? 'customAlternateBackground' : ''}\n          >\n            <Container\n              sx={{ pt: 4, pb: 4 }}\n              height=\"auto\"\n              className={themePreference === ThemePreferences.dark ? 'dark' : ''}\n              id={`chart-${index + 1}`}\n            >\n\n              <AxesPickerProvider>\n                <ChartComponentWrapper chartID={index} />\n              </AxesPickerProvider>\n\n              {\n                // Optionally display the button to load more charts at the bottom of the last chart\n                // (if not already fetched every chart)\n                index === chartsToRender - 1 && !loadMoreCharts && <LoadMoreButton />\n              }\n            </Container>\n          </FullWidthBox>\n        ))}\n      </Box>\n      <Divider />\n\n      {/* Temporarily not using HyvorTalk comment anymore\n      {displayCommentSection === true &&\n        <FullWidthBox id={sectionData.commentSection.id} sx={{ pt: 3, pb: 4 }}>\n          <CommentSection pageID={HYVOR_PAGE_NAME} />\n        </FullWidthBox>\n      } */}\n    </Box >\n  );\n};\n\nexport default Project;\n\n","import { useEffect, useContext } from \"react\";\n\nimport Project from \"./Project/Project\";\n\nimport { MetadataContext } from \"../ContextProviders/MetadataContext\";\n\nimport { AppRoutes } from \"../Utils/AppRoutes\";\nimport { CITIESair } from \"../Utils/GlobalVariables\";\nimport { DashboardContext } from \"../ContextProviders/DashboardContext\";\n\nconst Dashboard = () => {\n  const { currentSchoolID } = useContext(DashboardContext);\n\n  // Update the page's title based on currentSchoolID\n  useEffect(() => {\n    if (!currentSchoolID) return;\n\n    document.title = `${CITIESair} | ${currentSchoolID.toUpperCase()}`;\n  }, [currentSchoolID]);\n\n  // Update current page type\n  const { setCurrentPage } = useContext(MetadataContext);\n  useEffect(() => {\n    setCurrentPage(AppRoutes.dashboard);\n  }, [setCurrentPage]);\n\n  return (\n    <Project />\n  )\n};\n\nexport default Dashboard;","import { Skeleton, Typography } from '@mui/material';\n\nexport default function UppercaseTitle({ text, sx, ...otherProps }) {\n  return (\n    <Typography\n      variant=\"h4\"\n      color=\"text.primary\"\n      sx={{\n        fontWeight: 'medium',\n        display: 'block',\n        textTransform: 'uppercase',\n        pb: 3,\n        lineHeight: 1,\n        ...sx\n      }}\n      {...otherProps}\n    >\n      {text || <Skeleton variant='text' />}\n    </Typography>\n  );\n}\n","import { Box, Table, TableBody, TableCell, TableHead, TableRow, styled } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { getTranslation, replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport { AQI_Database } from '../../Utils/AirQuality/AirQualityIndexHelper';\nimport { useContext } from 'react';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\nimport { CITIESair } from '../../Utils/GlobalVariables';\n\nexport const StyledTable = styled(Table, {\n  shouldForwardProp: (prop) => prop !== 'tiny',\n})(({ theme, tiny }) => ({\n  minWidth: tiny || 700,\n  '& th, td': {\n    fontSize: tiny ? '0.625rem' : '0.6875rem',\n    color: theme.palette.text.secondary,\n    [theme.breakpoints.down('sm')]: {\n      fontSize: tiny ? '0.5rem' : '0.6875rem',\n    },\n  },\n  '& th': {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    lineHeight: '1rem'\n  }\n}));\n\nfunction AirQualityIndexTable(props) {\n  const { themePreference, language } = useContext(PreferenceContext);\n\n  const { tiny, hideAQIDescription } = props;\n\n  const returnFormattedBreakpoints = (low, high) => {\n    if (high === Infinity) return `${low}+`;\n    else return `${low} - ${high}`;\n  }\n\n  return (\n    <>\n      <Box overflow=\"auto\">\n        <StyledTable size=\"small\" tiny={tiny}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ pr: 0 }}>\n                <Box sx={{ width: '1em', height: '1em' }} />\n              </TableCell>\n              <TableCell sx={{ pl: 1 }}>\n                Category\n              </TableCell>\n              <TableCell align=\"right\">US AQI</TableCell>\n              <TableCell align=\"right\">\n                PM2.5\n                (µg/m\n                <sup>3</sup>\n                )\n              </TableCell>\n              {!hideAQIDescription && <TableCell align=\"left\">Description</TableCell>}\n\n              {!hideAQIDescription &&\n                <TableCell align=\"left\">\n                  {CITIESair}&apos; Suggested Actions\n                </TableCell>\n              }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {AQI_Database.map((element, index) => (\n              <TableRow\n                key={index}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ pr: 0 }}>\n                  <Box sx={{ width: '1em', height: '1em', backgroundColor: element.color[themePreference] }} />\n                </TableCell>\n                <TableCell sx={{ pl: 1 }}>\n                  {getTranslation(element.category, language)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.aqiUS.low, element.aqiUS.high)}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ whiteSpace: \"nowrap\" }}>\n                  {returnFormattedBreakpoints(element.rawPM2_5.low, element.rawPM2_5.high)}\n                </TableCell>\n                {!hideAQIDescription && <TableCell align=\"left\">{element.description}</TableCell>}\n                {!hideAQIDescription\n                  && (\n                    <TableCell align=\"left\">\n                      {\n                        parse(getTranslation(element.healthSuggestions.outdoors, language), {\n                          replace: replacePlainHTMLWithMuiComponents,\n                        })\n                      }\n                    </TableCell>\n                  )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </StyledTable>\n      </Box>\n    </>\n  );\n}\n\nexport default AirQualityIndexTable;\n","// disable eslint for this file\n/* eslint-disable */\nimport { useState } from 'react';\nimport { styled } from '@mui/material/styles';\n\nimport MuiAccordion from '@mui/material/Accordion';\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\nimport { Box, Typography, Tooltip } from '@mui/material';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport * as Tracking from '../../Utils/Tracking';\n\nconst StyledAccordion = styled(MuiAccordion)(({ theme, expanded }) => ({\n  color: theme.palette.text.secondary,\n  backgroundImage: 'none',\n  backgroundColor: expanded ? theme.palette.background.default : 'transparent',\n  boxShadow: expanded ? theme.shadows : 'none',\n  transition: 'none',\n}));\n\nconst StyledAccordionSummary = styled(MuiAccordionSummary)(({ theme, expanded }) => ({\n  marginTop: expanded ? theme.spacing(1) : 0,\n  flexDirection: 'row-reverse',\n  paddingLeft: expanded ? theme.spacing(1) : 0,\n  '& .MuiTypography-root': {\n    color: theme.palette.text.primary,\n    textDecoration: 'underline',\n    transition: 'none',\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n  '& .MuiAccordionSummary-content.Mui-expanded': {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst TooltipText = {\n  expand: \"Click to expand section\",\n  collapse: \"Click to collapse section\"\n}\n\nconst ExpandableSection = (props) => {\n  const { title, content, icon, disabled } = props;\n  const [expanded, setExpanded] = useState(undefined);\n\n  const handleAccordionChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : undefined);\n    Tracking.sendEventAnalytics(\n      isExpanded ? Tracking.Events.expandSection : Tracking.Events.collapseSection,\n      {\n        section: title\n      }\n    );\n  };\n\n  return (\n    <Box sx={{\n      '& .MuiAccordion-root.Mui-disabled': {\n        backgroundColor: \"transparent\"\n      }\n    }}>\n      <StyledAccordion\n        expanded={expanded === \"panel1\"}\n        onChange={handleAccordionChange(\"panel1\")}\n        disabled={disabled}\n      >\n        <StyledAccordionSummary expanded={expanded} expandIcon={<ArrowDropDownIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          <Tooltip title={expanded ? TooltipText.collapse : TooltipText.expand} enterDelay={0} leaveDelay={200}>\n            <Typography component=\"a\" variant=\"body1\">\n              {title}\n              <Box component=\"span\" sx={{ ml: 0.25 }}>\n                {icon}\n              </Box>\n            </Typography>\n          </Tooltip>\n        </StyledAccordionSummary>\n        <MuiAccordionDetails sx={{ pt: 0 }}>\n          {content}\n        </MuiAccordionDetails>\n      </StyledAccordion>\n    </Box>\n  );\n}\n\nexport default ExpandableSection;","import { useContext } from 'react';\nimport { Typography, Box } from '@mui/material';\nimport parse from 'html-react-parser';\nimport { replacePlainHTMLWithMuiComponents } from '../../Utils/UtilFunctions';\nimport AirQualityIndexTable from './AirQualityIndexTable';\nimport ExpandableSection from '../ExpandableSection/ExpandableSection';\nimport { PreferenceContext } from '../../ContextProviders/PreferenceContext';\n\nimport InfoIcon from '@mui/icons-material/Info';\n\nconst Explanation = {\n  title: \"Explanation of the US Air Quality Index (AQI) for PM2.5\",\n  subtitle: \"CITIESair uses the <a href='https://www.airnow.gov/aqi/aqi-basics/'>Air Quality Index (AQI)</a> developed by the United States Environmental Protection Agency (EPA) to effectively communicate different levels of PM2.5 air pollution. To calculate the AQI from the raw measurement of PM2.5 concentration (µg/m³), different breakpoints and piecewise linear function are utilized (read more <a href='https://en.wikipedia.org/wiki/Air_quality_index#United_States'>here</a>). Higher AQI values correspond to poorer air quality and greater heath risks to humans.<br><br>The US EPA sets thresholds for PM2.5 concentration, recently updated in February 2024: <sup>[1]</sup><ul><li><b>Annual average</b>: 9.0 µg/m³, corresponding to US AQI <b>50</b></li><li><b>24-hour average</b>: 35.0 µg/m³, corresponding to US AQI <b>100</b></li></ul>In 2021, the World's Heath Organization (WHO) proposed a new guideline for PM2.5<sup>[2]</sup> with stricter thresholds than those of the US EPA:<ul><li><b>Annual average</b>: 5.0 µg/m³, corresponding to US AQI <b>21</b></li><li><b>24-hour average</b>: 15.0 µg/m³, corresponding to US AQI <b>56</b></li></ul>\",\n  reference: \"[1] \\\"National Ambient Air Quality Standards (NAAQS) for PM.\\\" EPA, Environmental Protection Agency, https://www.epa.gov/pm-pollution/national-ambient-air-quality-standards-naaqs-pm.<br>[2] World Health Organization. \\\"WHO global air quality guidelines: particulate matter (PM2. 5 and PM10), ozone, nitrogen dioxide, sulfur dioxide and carbon monoxide: executive summary.\\\" (2021).\",\n}\n\nconst AQIexplanation = () => {\n  const { themePreference } = useContext(PreferenceContext);\n\n  return (\n    <ExpandableSection\n      title={Explanation.title}\n      icon={<InfoIcon sx={{ fontSize: \"1rem\" }} />}\n      content={(\n        <Box>\n          <AirQualityIndexTable themePreference={themePreference} />\n          <Typography\n            component=\"div\"\n            variant=\"body1\"\n            color=\"text.secondary\"\n            sx={{ mt: 2 }}\n          >\n            {parse(Explanation.subtitle, {\n              replace: replacePlainHTMLWithMuiComponents,\n            })}\n          </Typography>\n          <ExpandableSection\n            title={\"Reference\"}\n            content={(\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {parse(Explanation.reference, {\n                  replace: replacePlainHTMLWithMuiComponents,\n                })}\n              </Typography>\n            )}\n          />\n        </Box>\n      )}\n    />\n  )\n};\n\nexport default AQIexplanation;"],"names":["useSchoolMetadata","currentSchoolID","useContext","DashboardContext","useQuery","queryKey","queryFn","async","url","getApiUrl","endpoint","GeneralAPIendpoints","schoolmetadata","school_id","fetchDataFromURL","enabled","staleTime","placeholderData","prev","SELECT_ALL","SeriesSelector","props","items","itemsFromChart","selectorID","allowMultiple","seriesLabel","onSeriesSelection","displayChip","theme","useTheme","isLargeScreen","useMediaQuery","breakpoints","up","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","overflow","background","palette","customAlternateBackground","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","setItems","useState","selectAll","setSelectAll","useEffect","every","item","selected","handleChange","event","target","value","includes","updatedItems","map","index","_objectSpread","newDataColumns","selectedItems","filter","label","some","selectedItem","handleItemToggle","existingItem","_jsxs","Stack","direction","alignItems","gap","width","children","_jsx","Typography","color","sx","textTransform","spacing","FormControl","minWidth","borderRadius","concat","shape","size","Select","labelId","id","multiple","onChange","renderValue","VisibilityIcon","fontSize","text","secondary","variant","length","renderedLabel","py","MenuItem","disabled","backgroundColor","Checkbox","checked","onClick","p","transform","Radio","borderTop","borderColor","position","bottom","zIndex","marginBottom","justifyContent","fontWeight","pl","Switch","Grid","container","down","display","Chip","onDelete","ChartControlType","CategoryFilter","stackDirection","DateRangeFilter","ChartRangeFilter","NumberRangeFilter","hideAnnotations","stem","textStyle","opacity","boxStyle","returnResponsiveFontSizeInPixels","_ref","isPortrait","isSmaller","returnChartControlUI","_chartControl$options","chartControl","mainChartData","mainChartOptions","subchartIndex","chartControlUI","options","ui","snapToData","controlType","chartType","chartView","columns","subcharts","chartOptions","hAxis","textPosition","chart","axisText","title","vAxis","annotations","legend","pointSize","styled","Box","shouldForwardProp","prop","gradientBackgroundId","fill","fillOpacity","maxWidth","height","padding","boxShadow","mozBoxShadow","webkitBoxShadow","border","secondaryRGB","tooltip","margin","primary","marginTop","verticalAlign","paper","paddingTop","paddingBottom","paddingLeft","paddingRight","borderWidth","top","left","right","main","stroke","strokeWidth","cursor","normalizeColorStops","_ref2","colors","optionalMinValue","optionalMaxValue","isValidArray","offset","totalColors","clampedStops","colorStop","offsets","normalizedOffsets","minOffset","maxOffset","normalizeColorStopOffsets","Math","min","max","rgbToHex","r","g","b","x","hex","toString","join","interpolateColor","color1","color2","factor","element","result","slice","i","round","generateDiscreteColorGradientArray","_ref3","numSteps","normalizedColors","forEach","replace","m","exec","parseInt","hexToRgb","colorArray","stepPositions","Array","from","_","pos","offset1","offset2","j","interpolatedColor","push","generateCssBackgroundGradient","_ref4","gradientDirection","BackgroundGradient","_ref6","visibility","x1","y1","x2","y2","stopColor","valueRange","colorAxis","minValue","maxValue","rangeBoxMinValue","rangeBoxMaxValue","undefined","calculateMarkerPositionOnRangeBox","labelStyle","lineHeight","textAlign","whiteSpace","bottomLabelStyle","triangleStyle","borderLeft","borderRight","topTriangleStyle","bottomTriangleStyle","borderBottom","my","float","day","tooltipText","dateRange","inFirstTwoRowsOfChart","tooltipBoxRef","useRef","current","parentDiv","parentElement","ref","className","mr","parse","replacePlainHTMLWithMuiComponents","getCalendarChartMargin","_options$legend","_options$colorAxis","_options$colorAxis2","_options$colorAxis3","_options$colorAxis4","dataArray","valueRangeBoxTitle","windowSize","setDateRange","setValueRange","calendarHeight","setCalendarHeight","thisDateRange","dateStrings","reduce","getDateRangeForCalendarChart","values","getValueRangeForCalendarChart","numberOfYears","Date","getFullYear","calendarChartMargin","totalHeight","displayLegend","dateStr","date","dayOfWeek","getDay","isFirstTwoDaysOfWeek","firstYear","isInFirstYear","calendarCellColors","gradientSteps","GoogleChartStyleWrapper","ValueRangeBox","overflowY","ResponsiveCalendar","data","to","emptyColor","align","yearSpacing","monthBorderColor","monthBorderWidth","daySpacing","dayBorderWidth","tooltipData","find","DOMParser","parseFromString","body","innerHTML","TooltipCalendarChart","today","yesterday","range","startDate","startOfDay","addDays","endDate","endOfDay","last14Days","last30Days","last365Days","allTime","minDateOfDataset","formattedMinDate","format","returnCustomStaticRanges","aggregationType","AggregationType","minute","month","year","AggregationTypeMetadata","maxDays","hour","Infinity","StyledDateRangePicker","Paper","showPickerPanel","smallScreen","action","flexDirection","customBackground","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","content","backgroundImage","pulse","keyframes","_templateObject","_taggedTemplateLiteral","AggregationTypeToggle","setAggregationType","extraSmallScreen","aggregationTypesToShow","Object","type","KAMPALA","ToggleButtonGroup","fullWidth","exclusive","newType","orientation","_AggregationTypeMetad","ToggleButton","px","RadioButtonCheckedIcon","AQI_Database","Light","animation","chartID","allChartsConfigs","chartConfig","getChartApiUrl","queryParams","chartIndex","isFirstRequest","setIsFirstRequest","enqueueSnackbar","useSnackbar","isFetching","useChartData","updateIndividualChartConfigQueryParams","key","defaultRange","isSameDay","maxAllowedDays","differenceInDays","SnackbarMetadata","error","formattedDates","startDateObject","endDateObject","returnFormattedDates","setShowPickerPanel","paperRef","handleClickOutside","contains","document","addEventListener","removeEventListener","_Fragment","xs","sm","lg","flex","minHeight","elevation","transition","DateRangePicker","ranges","selection","staticRanges","createStaticRanges","inputRanges","rangeColors","minDate","maxDate","months","showMonthAndYearPickers","fixedHeight","preventSnapRefocus","startDatePlaceholder","endDatePlaceholder","editableDateInputs","showMonthArrow","weekStartsOn","AxesPickerContext","createContext","AxesPickerProvider","setHAxis","setVAxis","contextValue","useMemo","Provider","LeftSelect","RightSelect","setIndividualChartConfig","allowedAxes","selectedAxes","dataType","isFetchingData","setIsFetchingData","shouldDisableApplyButton","setShouldDisableApplyButton","receivedHAxis","receivedVAxis","shouldDisableOption","option","allowedDataTypes","InputLabel","autoWidth","sensor","Button","applyChanges","ChartAPIendpointsOrder","sensorX","sensorY","CircularProgress","disableShrink","customMessage","selectableAxes","messagePrefix","messageSuffix","Alert","severity","component","returnHoursFromMinutesPastMidnight","minutes","floor","padStart","HOURS","minutesPastMidnight","PREDEFINED_TIMERANGES","allday","start","end","timeRangeLabel","schoolHour","custom","SimplePicker","icon","isExtraSmall","otherProps","_objectWithoutProperties","_excluded","marginLeft","is","timeRange","defaultTimeRange","isResponsive","hasTitle","displayFromToPickers","setDisplayFromToPickers","startTime","endTime","predefinedRange","setPredefinedRange","match","handleModeChange","useCallback","newMode","WatchLaterIcon","mt","idx","arr","e","h","setTimeRange","TimeRangeSelector","newRange","SubChart","_chartData$subcharts","chartData","selectedDataType","google","GoogleContext","dataTable","setDataTable","chartWrapper","setChartWrapper","controlWrapper","setControlWrapper","previousChartData","setPreviousChartData","isFirstRender","setIsFirstRender","shouldRenderChart","setShouldRenderChart","renderChartNow","setRenderChartNow","allInitialColumns","setAllInitialColumns","dataColumns","setDataColumns","initialVAxisRange","setInitialVAxisRage","__","random","substr","_chartData$subcharts$","_chartData$options","_chartData$options2","_chartData$options2$b","_chartData$options3","_chartData$options4","_chartData$options4$c","_chartData$options4$c2","_chartData$options5","_chartData$options5$c","_chartData$options5$c2","_chartData$options6","_chartData$options6$c","_chartData$options6$c2","_chartData$options7","_chartData$options7$c","_chartData$options7$c2","_chartData$options8","_chartData$options8$w","_chartData$options9","_chartData$options9$w","_chartData$options$le","_chartData$options0","_chartData$options0$l","_options$vAxis$format","_options$vAxis","_options$vAxis$title","_options$vAxis2","_options$vAxis$viewWi","_options$vAxis3","_options$vAxis3$viewW","_options$vAxis$viewWi2","_options$vAxis4","_options$vAxis4$viewW","_options$vAxis$viewWi3","_options$vAxis5","_options$vAxis5$viewW","_options$hAxis$title","_options$hAxis","_options$vAxis6","_options$vAxis7","_options$vAxis7$gridl","_options$hAxis2","_options$hAxis3","_options$hAxis3$gridl","_options$hAxis4","_options$hAxis5","_options$hAxis5$gridl","_options$annotations","axisTitleTextStyle","italic","bold","axisTitle","axisTextStyle","curveType","crosshair","trigger","chartArea","portrait","landscape","isHtml","showColorCode","alignment","scrollArrows","activeColor","inactiveColor","pagingTextStyle","viewWindow","slantedText","slantedTextAngle","optionsColors","series","_serie","serie","trendlines","_item","colorAxisFirstColor","multiColor","colorIndex","NYUpurple","colorAxes","_unused","titleTextStyle","gridlines","minorGridlines","count","highContrast","contrastText","thickness","rx","ry","annotationBoxFill","returnGenericOptions","calendarDataArray","setCalendarDataArray","NivoCalendarChart","returnSelectedDataType","dataTypeKey","dataTypes","showUnit","NoChartToRender","LoadingAnimation","chartControlOptions","hasChartControl","control","cleanupTouchEventListener","touchHandler","first","changedTouches","simulatedEvent","MouseEvent","bubbles","cancelable","view","window","detail","screenX","screenY","clientX","clientY","button","relatedTarget","dispatchEvent","preventDefault","isMounted","controlDOM","querySelector","touchEvent","capture","addTouchEventListenerForChartControl","seriesSelector","dateRangePicker","timeRangeSelector","formatters","handleSeriesSelection","setOptions","draw","method","setInitialColumnsColors","col","_options$series2","seriesIndex","serieAttribute","getInitialVAxisRange","vAxisMin","vAxisMax","getColumnRange","sourceColumn","isNaN","_allInitialColumns","_chartWrapper","_controlWrapper","hiddenSeriesObject","enableInteractivity","visibleInLegend","currentControlOptions","getOptions","newViewColumns","dataColumn","indexIn_","role","setView","newOptions","selectedSeriesCount","JSON","stringify","_shouldRenderChart","visualization","arrayToDataTable","hasOwnProperty","numberFormat","NumberFormat","numberFormatter","reconstructedColumns","evaluatedColumns","column","calc","calcFunction","Function","reconstructFunctionFromJSONstring","thisChartWrapper","ChartWrapper","containerId","thisControlWrapper","thisDashboardWrapper","Dashboard","getElementById","events","addListener","onChartReady","ControlWrapper","bind","initAllInitialColumns","initDataColumns","initialView","getView","viewFromDataTable","DataView","shouldAssignDomainRoleToFistColumn","dataSeriesIndex","getColumnLabel","indexInAllInitialColumns","defaultSeriesToDisplayInitially","_options$series","_options$series$col$s","getInitialColumns","gradientBackgroundColor","svgFillGradient","_options$vAxis2$viewW","_ref5","generateSvgFillGradient","ml","CustomDateRangePicker","AxesPicker","TimeRangeSelectorWrapperForDataHook","renderChart","chartContainer","_ChartControlType$cha","parseFloat","wordLimit","reference","isExpanded","setIsExpanded","isMobile","subtitleRef","words","split","displayText","lastFullStop","lastIndexOf","ClickAwayListener","onClickAway","subtitleParent","closest","chartElements","Set","_target","has","tagName","parentNode","isClickWithinSharedParent","textDecoration","anchorEl","setAnchorEl","name_title","open","Boolean","handleClose","currentTarget","ArrowDropDownIcon","Menu","onClose","MenuListProps","handleMenuItemClick","Tabs","smallFontSize","ChartStyleWrapper","mode","overflowX","scrollbarGutter","StyledMenuItem","isLoading","isSmallWidth","setIsPortrait","matchMedia","matches","setWindowSize","innerWidth","innerHeight","currentTab","setCurrentTab","previousTab","setPreviousTab","dropdownMenuTabIndex","setDropdownMenuTabIndex","dropdownMenuCurrentTitle","setDropdownMenuCurrentTitle","setAllowedDataTypes","setSelectedDataType","chartHeight","chartMaxHeight","initializeAllowedDataTypes","name_short","unit","DataTypes","cleanupResize","setupResizeListener","DEBOUNCE_IN_MILLISECONDS","timeoutID","handleWindowResize","clearTimeout","setTimeout","optionalText","DataTypeDropDownMenu","pointerEvents","renderMultipleSubcharts","needsDropdownMenu","MAX_NUM_TABS_TO_DISPLAY","subchartsDataForTabs","subchartsDataForDropDownMenu","shouldDisplayThisSubchart","StyledTabs","handleTabChange","newIndex","Tab","subchartTitle","ExpandMoreIcon","subchartTitleShort","handleDropdownMenuSelection","WebkitOverflowScrolling","currentSubchart","mb","CollapsibleSubtitle","getSubtitles","subtitle","subchartSubtitle","getReferences","_chartData$subcharts$2","AirQualityIndexLegendQuickGlance","handlePopperOpen","Tracking","airQualityIndexLegendQuickGlance","handlePopperClose","FadeInButtonForSpeedDial","distanceFromBottomOfWindow","Fab","onMouseEnter","onMouseLeave","AirIcon","Popper","placement","keepMounted","TransitionProps","Fade","timeout","mx","AirQualityIndexTable","tiny","hideAQIDescription","openLoginPopup","authenticationState","user","UserContext","loggedIn","authenticated","checkedAuthentication","handleRestrictedAccess","allowedSchools","school","toUpperCase","onButtonClick","schoolMetadata","useLoginHandler","navigate","useNavigate","screens","handleSingleScreenClick","_screens$","screen_name","TvIcon","handleMenuClose","screen","screenName","location_long","buttonIcon","buttonIconAria","buttonLabel","buttonVariant","trackingEvent","dialogTitle","dialogOpenHandler","dialogCloseHandler","displaySchoolID","iconOnly","setOpen","onOpen","Tooltip","IconButton","Dialog","fullScreen","DialogActions","ChevronLeftIcon","DialogTitle","DialogContent","DatasetDownloadDialog","currentSensorsData","useCurrentSensorsData","sensorsDatasets","updateSensorsDatasets","previewingDataset","setPreviewingDataset","acc","_item$sensor$last_see","location_short","location_type","last_seen","rawDatasets","keys","reverse","datasetAcc","datasetKey","sample","full","CustomDialog","DataObjectIcon","rawDatasetButtonClicked","DatasetSelectorAndPreviewer","schoolID","fontStyle","CITIESair","Link","href","firstSensor","initialDatasetType","datasetType","getRawDatasetUrl","sensor_location_short","isSample","extension","SupportedFetchExtensions","csv","needsAuthorization","then","tmp","catch","console","log","md","DatasetsTable","PreviewDataset","Table","tableLayout","TableHead","TableRow","TableCell","TableBody","Dataset","isPreviewing","selectedDatasetType","setSelectedDatasetType","fetchThisDataset","NYUpurpleLight","setThisSensorToPreview","selectedVal","disablePortal","charAt","toLowerCase","previewingDatasetName","setPreviewingDatasetName","csvFileName","setCsvFileName","isDatasetLoading","setIsDatasetLoading","convertCSVforDownload","dataset","blob","Blob","URL","createObjectURL","downloadLink","createElement","download","appendChild","click","revokeObjectURL","removeChild","formattedData","setFormattedData","rowNumber","setRowNumber","_sensorsDatasets$prev","_sensorsDatasets$prev2","csvData","lines","headers","rows","dateString","row","fontFamily","gutterBottom","pt","userSelect","downloadPreviewingDataset","fetchedDataset","rawDatasetDownloaded","dataset_type","DownloadIcon","compareArrays","arr1","arr2","EmailsInput","alertEmails","alertsEmails","queryClient","useQueryClient","saveEmailsMutation","useMutation","mutationFn","restMethod","RESTmethods","POST","emailsToSave","onSuccess","setQueryData","success","onError","localEmails","setLocalEmails","emailsListChanged","setEmailsListChanged","currentEmail","setCurrentEmail","menuAnchor","setMenuAnchor","saveButtonTooltipTitle","setSaveButtonTooltipTitle","handleAddEmail","passedEmail","email","trim","validateEmail","newEmails","warning","handleDeleteEmail","handleBeforeUnload","returnValue","wrap","flexWrap","handleMenuOpen","TextField","onKeyUp","onPaste","pastedText","clipboardData","getData","placeholder","InputProps","disableUnderline","enterTouchDelay","_emails","mutate","isPending","AlertTypes","threshold","name","tableColumnHeader","SpeedIcon","daily","CalendarMonthIcon","ThresholdAlertTypes","below_threshold","sign","above_threshold","AirQualityAlertContext","AirQualityAlertKeys","getAlertDefaultPlaceholder","localAlertType","localOppositeAlertType","alert_type","arguments","AirQualityAlertProvider","selectedAlert","setSelectedAlert","editingAlert","setEditingAlert","allowedDataTypesForSensor","setAllowedDataTypesForSensor","alerts","setAlerts","hasFetchedAlerts","setHasFetchedAlerts","returnAllowedDataTypesForThisSensor","sensors","sensorData","elem","sensor_id","allowedDataTypesForThisSensor","addChildToAlerts","processed","alert","parent","a","fetchAlerts","getAlertsApiUrl","useAirQualityAlert","CrudTypes","SharedColumnHeader","AlertDeletionDialog","onConfirmedDelete","DialogContentText","DialogData","primaryButtonLabel","errorMessage","successMessage","contentText","maxLength","showTip","currentLength","multiline","minRows","maxRows","inputProps","DAYS_OF_WEEK","CustomPickersDay","PickersDay","common","white","dark","CustomDayComponent","selectedDates","other","isSelected","dayjs","MultiDaysCalendarPicker","parsedSelectedDates","len","LocalizationProvider","dateAdapter","AdapterDayjs","localeText","calendarWeekNumberHeaderText","calendarWeekNumberText","weekNumber","DateCalendar","displayWeekNumber","slots","dayProps","selectionState","disableHighlightToday","startOf","DateSelector","daysOfWeek","excludedDates","handleDaysOfWeekChange","handleExcludedDatesChange","rowSpacing","columnSpacing","arrow","ThresholdSlider","defaultValue","stepsForThreshold","marks","backgroundCssGradient","invertSelection","showInput","inputUnit","valueLabelDisplay","sliderRangeMin","setSliderRangeMin","sliderRangeMax","setSliderRangeMax","nearestDataIndex","setNearestDataIndex","setError","helperText","setHelperText","findNearestDataIndex","val","greaterMarks","mark","nearestMark","curr","indexOf","localSliderRangeMin","localSliderRangeMax","stripedGradient","sliderSX","black","paperBackgroundGradient","Number","step","Slider","getAriaLabel","handleSliderChange","newValue","ThresholdComponentWrapper","handleValueChange","placeholderValueBeforeDataTypeSelection","disabledSlider","language","PreferenceContext","thresholdSlider","currentDataTypeKey","dataTypeColorAxis","color_axis","defaultValueForAlert","database","DataTypeKeys","voc","VOC_Database","aqi","pm2_5","pm10_raw","co2","heat_index_C","HeatIndex_Database","threshold_mapping_name","low","getTranslation","category","MaxOnceADayCheckbox","FormGroup","FormControlLabel","FormHelperText","ThresholdTypeToggle","currentAlertType","others","thresholdAlertType","ThresholdType","_excluded2","returnFormattedStatusString","status","tense","AlertPropertyComponents","_schoolMetadata$senso","_DialogData$crudType","_editingAlert$AirQual","_editingAlert$AirQual2","alertTypeKey","crudType","allSensorsOfSchool","capitalizePhrase","isDisabled","PlaceIcon","_theme$palette$chart$","_theme$palette$chart$2","selectedDataTypeKey","defaultValueForChildAlert","validDaysOfWeek","isArray","sort","valueArray","currentExcludedDates","updatedExcludedDates","excludedDate","displayHourPicker","AccessTimeIcon","selectedAlertType","oppositeAlertTypeForChildAlert","disabledToggle","OptionalMessage","openAlertModificationDialog","shouldDisableButton","setShouldDisableButton","sanityCheckAlertBeforeSaving","valid","isAbove","childThreshold","message","removeChildAlertFromParentAlertBody","newBody","formatChildAlertBody","parent_alert_id","handleAlertModification","passedCrudType","handleFetchError","handleFetchSuccess","createdAlert","prevAlerts","updatedAlerts","createdChildAlert","childError","alert_id","PUT","updatedAlert","child_alert_id","updatedChildAlert","DELETE","_editingAlert$AirQual3","_editingAlert$AirQual4","alertVal","datatypeKeyVal","isEqual","returnDaysOfWeekString","days_of_week","missingDays","d","_DAYS_OF_WEEK$find","returnAlertNotModifiableString","owner_role","is_allowed_to_modify","UserRoles","_AlertTypes$alertType","alertsForTable","setOpenAlertModificationDialog","setCrudType","handleModifyClick","TransitionGroup","Grow","newIsEnabled","prevAlert","handleEnableClick","EditIcon","self_is_owner","returnCreatedByString","startIcon","AddAlarmIcon","AlertModificationDialog","AlertTab","alertType","alertsArray","hidden","AlertsTable","AlertsTabs","returnFilteredAlerts","filteredAlerts","_alert$AirQualityAler","parentAlertId","array","alertsLength","newVal","_AlertTypes$Object$ke","_Object$keys","iconPosition","AirQualityAlerts","isModifiable","admin","user_role","NotificationImportantIcon","onLoginSuccess","popupRef","setAuthenticationState","setUser","showVerificationDialog","setShowVerificationDialog","setEmail","popup","AppRoutes","login","focus","intervalId","setInterval","closed","clearInterval","handleMessage","origin","location","LoginTypes","password","is_verified","EmailVerificationDialog","ProjectReservedArea","LoginPopupHandler","handleLoginSuccess","duration","ScreenDropDownMenu","tooltipTitle","chip","Skeleton","enterDelay","leaveDelay","returnChipLabel","ArrowDropUpIcon","SchoolSelector","CustomChip","clickable","MenuList","dense","newSchoolID","localStorage","setItem","LocalStorage","internalNavigation","origin_school","destination_school_id","origin_id","dashboard","GridOfMetadataChips","PersonIcon","contactPerson","contactEmail","ProjectDescription","pb","description","LoadMoreButton","loadMoreCharts","setLoadMoreCharts","KeyboardArrowDownIcon","Project","chartsToRender","NUMBER_OF_CHARTS_TO_LOAD_INITIALLY","themePreference","temperatureUnitPreference","FullWidthBox","Container","UppercaseTitle","getDashboardTitle","has_map","CurrentAQIMapWithGrid","isOnBannerPage","minMapHeight","CurrentAQIGrid","isScreen","showHeatIndex","showWeather","AQIexplanation","sectionData","ThemePreferences","ChartComponentWrapper","Divider","setCurrentPage","MetadataContext","StyledTable","returnFormattedBreakpoints","high","pr","aqiUS","rawPM2_5","healthSuggestions","outdoors","StyledAccordion","MuiAccordion","expanded","default","shadows","StyledAccordionSummary","MuiAccordionSummary","TooltipText","setExpanded","panel","expandSection","collapseSection","section","expandIcon","MuiAccordionDetails","Explanation","ExpandableSection","InfoIcon"],"sourceRoot":""}