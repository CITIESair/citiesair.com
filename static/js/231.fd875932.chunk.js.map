{"version":3,"file":"static/js/231.fd875932.chunk.js","mappings":"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","sources":["Components/AirQuality/AirQualityScreen/ScreenUtils.jsx","Components/AirQuality/AirQualityScreen/RecentHistoricalGraph.jsx","Pages/Screen.jsx"],"sourcesContent":["export const getDomainName = (url) => {\n  return new URL(url).hostname;\n}\n\nexport const getUrlAfterScreen = (url) => {\n  const screenString = 'screen';\n  const urlComponents = url.split(screenString);\n  return `${screenString}${urlComponents.pop()}`;\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { AQI_Database } from '../../../Utils/AirQuality/AirQualityIndexHelper';\nimport { SensorStatus } from '../SensorStatus';\nimport { Box } from '@mui/material';\n\nimport { areDOMOverlapped } from './ScreenUtils';\n\nimport ThemePreferences from '../../../Themes/ThemePreferences';\nimport { capitalizePhrase } from '../../../Utils/UtilFunctions';\nimport { INACTIVE_SENSOR_COLORS } from '../../../Themes/CustomColors';\nimport { useTheme } from '@emotion/react';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n  const theme = useTheme();\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let svg, width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi.val);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    svg = d3.select(graphContainer.current);\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp)\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi.val;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQI_Database) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 3. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.max(\n      Math.floor(((AQI_Database[1].aqiUS.high - AQI_Database[0].aqiUS.high) / maxAQItoDisplay) * height / 2),\n      20);\n\n    let marginText = Math.floor(font_size / 5);\n    // 4. Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQI_Database.length; i++) {\n      const category = AQI_Database[i];\n      const upper = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\n      const lower = category.aqiUS.low;\n\n      if (maxAQItoDisplay <= lower) break;\n\n      // Add the rectangles\n      const aqiRange = Math.ceil((upper - lower) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (upper / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", category.color.Light);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (category.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", category.color.Light)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(category.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (category.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", category.color.Light)\n        .attr(\"font-size\", font_size / 2)\n        .text(category.category);\n    };\n\n    // 5. Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 6. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", height / 20)\n      .attr(\"color\", INACTIVE_SENSOR_COLORS.screen)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // 7.1. Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // 7.2. Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (mostRecentData && mostRecentData.aqi.val && mostRecentData.timestamp) {\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi.val) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData?.current?.category ?\n              theme.palette.text.aqi[sensorData.current.category] :\n              INACTIVE_SENSOR_COLORS.screen\n          )\n          ;\n\n        sensorData.sensor?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.sensor?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", height / 25)\n          .text(capitalizePhrase(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from '../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack, List, ListItem, ListItemText } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../Components/Header/CITIESlogoLinkToHome';\n\nimport { SensorStatus } from '../Components/AirQuality/SensorStatus';\nimport { getDomainName, getUrlAfterScreen } from '../Components/AirQuality/AirQualityScreen/ScreenUtils';\n\nimport RecentHistoricalGraph from '../Components/AirQuality/AirQualityScreen/RecentHistoricalGraph';\n\nimport { AQI_Database } from '../Utils/AirQuality/AirQualityIndexHelper';\n\nimport QRCode from \"react-qr-code\";\n\nimport CurrentAQIGrid from '../Components/AirQuality/CurrentAQIGrid';\nimport { CurrentAQIGridSize } from '../Components/AirQuality/CurrentAQIGridSize';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../API/Utils\";\nimport { fetchAndProcessCurrentSensorsData } from '../API/ApiFetch';\nimport { AppRoutes } from '../Utils/AppRoutes';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\nimport { CITIESair } from '../Utils/GlobalVariables';\nimport { INACTIVE_SENSOR_COLORS } from '../Themes/CustomColors';\n\n// Helper function to parse displayHours\nfunction isWithinDisplayHours(location) {\n  const params = new URLSearchParams(location.search);\n  const displayHours = params.get(\"displayHours\");\n  if (!displayHours) return true; // Show screen if no parameter\n\n  const [start, end] = displayHours.split(\"-\").map(time => parseInt(time.replace(\":\", \"\"), 10));\n  const now = parseInt(new Date().toTimeString().slice(0, 5).replace(\":\", \"\"), 10);\n\n  if (start <= end) {\n    // Regular range (same day, e.g., 06:00-20:00)\n    return start <= now && now < end;\n  } else {\n    // Overnight range (e.g., 16:00-01:00)\n    return now >= start || now < end;\n  }\n}\n\n\nconst Screen = ({ title }) => {\n  const { temperatureUnitPreference, themePreference } = useContext(PreferenceContext);\n\n  const { user } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const locationPath = location.pathname;\n\n  const [shouldDisplayScreen, setShouldDisplayScreen] = useState(isWithinDisplayHours(location));\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setShouldDisplayScreen(isWithinDisplayHours(location));\n    }, 60000); // Check every minute\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database, depends on the state of 'user' object\n  useEffect(() => {\n    // Only attempt to fetch data if the user has been authenticated\n    if (user.checkedAuthentication === false) return;\n\n    if (user.authenticated === true) {\n      // Do nothing if the data has been fetched before\n      if (Object.keys(data).length != 0) return;\n\n      const url = getApiUrl({ endpoint: GeneralAPIendpoints.screen });\n      if (!url) return;\n\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n\n      // Create an interval that fetch new data every 5 minute\n      const fetchInterval = 5 * 60 * 1000; // 5min\n      const intervalId = setInterval(() => {\n        fetchAndProcessCurrentSensorsData(url)\n          .then((data) => {\n            setData(data);\n          })\n          .catch((error) => console.log(error))\n      },\n        fetchInterval);\n      // Clean up the interval when the component unmounts\n      return () => {\n        clearInterval(intervalId);\n      };\n    } else {\n      navigate(`${AppRoutes.login}?${AppRoutes.redirectQuery}=${locationPath}`);\n    }\n  }, [user]);\n\n  const AirQualityComparison = () => {\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.sensor?.sensor_status === SensorStatus.active)) return null;\n\n    let outdoorsAQI, indoorsAQI;\n    // Don't display comparison if outdoor air is good\n    for (let i = 0; i < Object.values(data).length; i++) {\n      const sensorData = Object.values(data)[i];\n      if (sensorData.sensor?.location_type === \"outdoors\") {\n        outdoorsAQI = sensorData.current.aqi;\n        if (outdoorsAQI <= AQI_Database[0].aqiUS.high) return null;\n      }\n      else indoorsAQI = sensorData.current.aqi;\n    }\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    let comparison;\n    if (ratio >= 2) comparison = `${parseFloat(ratio).toFixed(1)} times`;\n    else if (ratio > 1.2) comparison = `${Math.round(100 * ((outdoorsAQI - indoorsAQI) / indoorsAQI))}%`;\n    else return null;\n\n    return (\n      <ListItem>\n        <ListItemText primary={\n          <>Indoors air is\n            <Typography\n              component=\"span\"\n              color={`${AQI_Database[0].color[themePreference]} !important`}\n            >\n              {` ${comparison} `}\n            </Typography>\n            better than outdoors</>\n        } />\n      </ListItem>\n    );\n  }\n\n  if (shouldDisplayScreen) return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQI_Database[3].color.Light} !important`,\n            opacity: 0.8\n          },\n          color: `${AQI_Database[3].color.Light} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h3\" fontWeight=\"500\" color=\"white\">\n              AIR QUALITY INDEX\n            </Typography>\n            <Typography variant=\"h4\" className='condensedFont' color={INACTIVE_SENSOR_COLORS.screen}>\n              Particulate Matter PM2.5\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid\n              currentSensorsData={data}\n              temperatureUnitPreference={temperatureUnitPreference}\n              isScreen={true}\n              size={CurrentAQIGridSize.large}\n            />\n          </Grid>\n\n          <List\n            className='condensedFont'\n            sx={{\n              listStyleType: 'disclosure-closed',\n              '& .MuiTypography-root': {\n                fontSize: '1.5rem',\n              },\n              '& .MuiListItem-root': {\n                display: 'list-item',\n                ml: 3,\n                p: 0,\n                pr: 3,\n              },\n              '& .MuiTypography-root, .MuiListItem-root': {\n                color: INACTIVE_SENSOR_COLORS.screen\n              }\n            }}>\n            <AirQualityComparison />\n            {\n              Object.entries(data).map(([key, sensorData]) => (\n                sensorData.current?.healthSuggestion &&\n                <ListItem\n                  key={key}\n                  className={sensorData.current?.aqi >= AQI_Database[2].aqiUS.low ? 'flashingRed' : ''}\n                >\n                  <ListItemText\n                    primary={sensorData.current?.healthSuggestion}\n                  />\n                </ListItem>\n              ))\n            }\n          </List>\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h3\" fontWeight=\"500\" sx={{ color: 'black' }}>\n              {CITIESair}\n            </Typography>\n          </Grid>\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"100%\">\n              <QRCode\n                size={256}\n                style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n                value={\n                  `${getDomainName(document.location.href)}?source=${getUrlAfterScreen(document.location.href)}`\n                } viewBox={`0 0 256 256`}\n              />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid>\n  );\n  else return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"black\",\n      }}\n    />\n  )\n};\n\nexport default Screen;\n"],"names":["getUrlAfterScreen","url","screenString","urlComponents","split","concat","pop","props","data","theme","useTheme","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","svg","width","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","val","curve","tension","useEffect","current","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","_ref","_sensorData$historica","key","sensorData","historical","Date","Array","isArray","max","Math","ceil","category","AQI_Database","aqiUS","low","high","Infinity","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","length","upper","lower","aqiRange","append","color","Light","text","formatHour","call","tickSize","ticks","every","tickFormat","INACTIVE_SENSOR_COLORS","screen","select","_ref2","_sensorData$sensor","_sensorData$historica2","_sensorData$historica3","datum","sensor","location_type","mostRecentData","_sensorData$current","_sensorData$sensor2","_sensorData$sensor3","_sensorData$sensor4","markerWrapper","palette","sensor_status","SensorStatus","active","dotRadius","capitalizePhrase","location_short","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","rect1","getBoundingClientRect","rect2","bottom","top","setAttribute","areDOMOverlapped","_jsx","Box","sx","animation","transform","opacity","filter","children","_jsxs","id","ref","isWithinDisplayHours","location","displayHours","URLSearchParams","search","get","start","end","map","time","parseInt","replace","now","toTimeString","slice","title","temperatureUnitPreference","themePreference","useContext","PreferenceContext","user","UserContext","navigate","useNavigate","useLocation","locationPath","pathname","shouldDisplayScreen","setShouldDisplayScreen","useState","intervalId","setInterval","clearInterval","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","checkedAuthentication","authenticated","keys","getApiUrl","endpoint","GeneralAPIendpoints","fetchAndProcessCurrentSensorsData","then","catch","error","console","log","AppRoutes","login","redirectQuery","AirQualityComparison","values","outdoorsAQI","indoorsAQI","ratio","comparison","parseFloat","toFixed","round","ListItem","ListItemText","primary","_Fragment","Typography","component","Grid","container","alignContent","alignItems","overflow","background","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","className","CurrentAQIGrid","currentSensorsData","isScreen","size","CurrentAQIGridSize","large","List","listStyleType","fontSize","display","ml","p","pr","_sensorData$current2","_sensorData$current3","healthSuggestion","position","right","left","m","CITIESlogoLinkToHome","pt","CITIESair","QRCode","style","maxWidth","value","href","URL","hostname","viewBox","RecentHistoricalGraph"],"sourceRoot":""}