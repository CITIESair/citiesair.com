{"version":3,"file":"static/js/275.f38b77df.chunk.js","mappings":"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","sources":["Components/AirQuality/AirQualityScreen/ScreenUtils.jsx","Components/AirQuality/AirQualityScreen/RecentHistoricalGraph.jsx","Components/AirQuality/AirQualityScreen/ScreenQRcode.jsx","Components/AirQuality/AirQualityScreen/ScreenHealthSuggestions.jsx","Pages/Screen.jsx"],"sourcesContent":["export const TypesOfScreen = {\n  bothIndoors: 1,\n  bothOutdoors: 2,\n  indoorsVsOutdoors: 3\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useContext } from 'react';\nimport * as d3 from 'd3';\nimport { AQI_Database } from '../../../Utils/AirQuality/AirQualityIndexHelper';\nimport { SensorStatus } from '../SensorStatus';\nimport { Box } from '@mui/material';\n\nimport { areDOMOverlapped } from './ScreenUtils';\n\nimport { capitalizePhrase, getTranslation } from '../../../Utils/UtilFunctions';\nimport { INACTIVE_SENSOR_COLORS } from '../../../Themes/CustomColors';\nimport { useTheme } from '@mui/material';\nimport { PreferenceContext } from '../../../ContextProviders/PreferenceContext';\nimport AggregationType from '../../DateRangePicker/AggregationType';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n  const { language } = useContext(PreferenceContext);\n  const theme = useTheme();\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi.val);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    const viewHours = data?.[0]?.metadata?.viewHours || numberOfHoursForHistoricalData;\n    const aggregationType = data?.[0]?.metadata?.aggregationType;\n    const xTickInterval = aggregationType === AggregationType.hour ? 4 : 1; // every 4 hours for .hour and 1 hour otherwise\n\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp)\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi.val;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQI_Database) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - viewHours);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 3. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.max(\n      Math.floor(((AQI_Database[1].aqiUS.high - AQI_Database[0].aqiUS.high) / maxAQItoDisplay) * height / 2),\n      20);\n\n    let marginText = Math.floor(font_size / 5);\n    // 4. Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQI_Database.length; i++) {\n      const element = AQI_Database[i];\n      const upper = element.aqiUS.high === Infinity ? maxAQItoDisplay : element.aqiUS.high;\n      const lower = element.aqiUS.low;\n\n      if (maxAQItoDisplay <= lower) break;\n\n      // Add the rectangles\n      const aqiRange = Math.ceil((upper - lower) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (upper / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", element.color.Light);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (element.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", element.color.Light)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(element.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (element.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", element.color.Light)\n        .attr(\"font-size\", font_size / 2)\n        .text(getTranslation(element.category, language));\n    };\n\n    // 5. Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 6. Add the X Axis on top of the graph, as well as ticks\n    // Floor xAxisMax to the top of the hour (e.g. 11:34 → 11:00)\n    xAxisMax.setMinutes(0, 0, 0);\n    // Generate tick array starting from floored max\n    const ticks = [];\n    for (let t = new Date(xAxisMax); t >= xAxisMin; t.setHours(t.getHours() - xTickInterval)) {\n      ticks.push(new Date(t));\n    }\n    ticks.reverse(); // earliest → latest\n    // Now apply these ticks to the axis\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3.axisTop(xAxis)\n          .tickSize(-height)\n          .tickValues(ticks)\n          .tickFormat(d3.timeFormat(\"%H:%M\"))\n      )\n      .attr(\"font-size\", height / 20)\n      .attr(\"color\", INACTIVE_SENSOR_COLORS.screen)\n      .select(\".domain\")\n      .remove();\n\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // 7.1. Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // 7.2. Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (\n        mostRecentData &&\n        mostRecentData.aqi &&\n        mostRecentData.aqi.val !== undefined &&\n        mostRecentData.aqi.val !== null &&\n        mostRecentData.timestamp\n      ) {\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi.val) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData?.current?.aqi?.categoryIndex !== null ?\n              theme.palette.text.aqi[sensorData.current.aqi.categoryIndex] :\n              INACTIVE_SENSOR_COLORS.screen\n          )\n          ;\n\n        sensorData.sensor?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.sensor?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", height / 25)\n          .text(capitalizePhrase(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data, language])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","import { useContext } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\nimport { CITIESair_HOST_NAME } from \"../../../Utils/GlobalVariables\";\n\nconst ScreenQRcode = () => {\n    const { schoolMetadata, currentSchoolID } = useContext(DashboardContext);\n    const isPublic = schoolMetadata?.is_public;\n\n    const url = document.location.href;\n    const urlComponents = url.split('screen');\n    const urlAfterScreen = `${'screen'}${urlComponents.pop()}`;\n\n    const qrValue = isPublic === true\n        ? `${CITIESair_HOST_NAME}/dashboard/${currentSchoolID}?source=${urlAfterScreen}`\n        : `${CITIESair_HOST_NAME}?source=${urlAfterScreen}`;\n\n    return (\n        <QRCode\n            size={256}\n            style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n            value={qrValue}\n            viewBox={`0 0 256 256`}\n        />\n    );\n};\n\nexport default ScreenQRcode;\n\n","import { List, ListItem, ListItemText, Typography } from \"@mui/material\";\nimport { INACTIVE_SENSOR_COLORS } from \"../../../Themes/CustomColors\";\nimport { AQI_Database } from \"../../../Utils/AirQuality/AirQualityIndexHelper\";\nimport { SensorStatus } from \"../SensorStatus\";\nimport { TypesOfScreen } from \"./ScreenUtils\";\nimport { getTranslation } from \"../../../Utils/UtilFunctions\";\nimport { useContext } from \"react\";\nimport { PreferenceContext } from \"../../../ContextProviders/PreferenceContext\";\n\nimport sectionData from '../../../section_data.json';\nimport parse from 'html-react-parser';\n\nconst Comparison = ({ data }) => {\n    const { language } = useContext(PreferenceContext);\n\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.sensor?.sensor_status === SensorStatus.active)) return null;\n\n    const outdoorsSensor = data.find(d => d.sensor?.location_type === \"outdoors\");\n    const outdoorsAQI = outdoorsSensor.current.aqi.val;\n    // Don’t display comparison if outdoor air is already good\n    if (outdoorsAQI <= AQI_Database[0].aqiUS.high) return null;\n\n    const indoorsSensor = data.find(d => d.sensor?.location_type.startsWith(\"indoors\"));\n    const indoorsAQI = indoorsSensor.current.aqi.val;\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    const comparison =\n        ratio >= 2\n            ? `${ratio.toFixed(1)}x`\n            : ratio > 1.2\n                ? `${Math.round(((outdoorsAQI - indoorsAQI) / indoorsAQI) * 100)}%`\n                : null;\n\n    if (!comparison) return null;\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={getTranslation(sectionData.screen.content.indoorsVsOutdoors, language, {\n                    value: (\n                        <Typography\n                            component=\"span\"\n                            color={`${AQI_Database[0].color.Light} !important`}\n                        >\n                            {comparison}\n                        </Typography>\n                    ),\n                })}\n            />\n        </ListItem>\n    );\n}\n\nconst ScreenHealthSuggestions = ({ typeOfScreen, data }) => {\n    const { language } = useContext(PreferenceContext);\n\n    const getHealthSuggestion = (sensorData) => {\n        if (sensorData?.current?.aqi?.categoryIndex !== undefined) {\n            const { healthSuggestions, category } =\n                AQI_Database[sensorData.current.aqi.categoryIndex];\n            const healthSuggestionText = getTranslation(\n                healthSuggestions[sensorData.sensor?.location_type],\n                language\n            )\n\n            switch (typeOfScreen) {\n                case TypesOfScreen.indoorsVsOutdoors:\n                    return healthSuggestionText;\n                default:\n                    const categoryText = getTranslation(category, language);\n                    return `${categoryText}: ${healthSuggestionText}`\n            }\n        }\n        return null;\n    };\n\n    // Collect unique suggestions + whether they are unhealthy\n    const suggestionsMap = new Map();\n    Object.values(data).forEach((sensorData) => {\n        const suggestion = getHealthSuggestion(sensorData);\n        if (!suggestion) return;\n\n        const isUnhealthy =\n            sensorData.current?.aqi?.val >= AQI_Database[2].aqiUS.low;\n\n        // If suggestion already exists, keep it unhealthy if ANY sensor was unhealthy\n        if (suggestionsMap.has(suggestion)) {\n            suggestionsMap.set(\n                suggestion,\n                suggestionsMap.get(suggestion) || isUnhealthy\n            );\n        } else {\n            suggestionsMap.set(suggestion, isUnhealthy);\n        }\n    });\n\n    return (\n        <List\n            className=\"condensedFont\"\n            sx={{\n                listStyleType: \"disclosure-closed\",\n                \"& .MuiTypography-root\": { fontSize: \"2rem\" },\n                \"& .MuiListItem-root\": { display: \"list-item\", ml: 3, p: 0, pr: 3 },\n                \"& .MuiTypography-root, .MuiListItem-root\": {\n                    color: INACTIVE_SENSOR_COLORS.screen,\n                },\n            }}\n        >\n            {typeOfScreen === TypesOfScreen.indoorsVsOutdoors && (\n                <Comparison data={data} />\n            )}\n\n            {[...suggestionsMap.entries()].map(([text, isUnhealthy], idx) => (\n                <ListItem\n                    key={idx}\n                    className={isUnhealthy ? \"flashingRed\" : \"\"}\n                >\n                    <ListItemText primary={parse(text)} />\n                </ListItem>\n            ))}\n        </List>\n    );\n};\n\nexport default ScreenHealthSuggestions;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { UserContext } from '../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../Components/Header/CITIESlogoLinkToHome';\n\nimport RecentHistoricalGraph from '../Components/AirQuality/AirQualityScreen/RecentHistoricalGraph';\n\nimport { AQI_Database } from '../Utils/AirQuality/AirQualityIndexHelper';\n\nimport CurrentAQIGrid from '../Components/AirQuality/CurrentAQIGrid';\nimport { CurrentAQIGridSize } from '../Components/AirQuality/CurrentAQIGridSize';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../API/Utils\";\nimport { fetchAndProcessCurrentSensorsData } from '../API/ApiFetch';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\nimport { CITIESair, KAMPALA } from '../Utils/GlobalVariables';\nimport { INACTIVE_SENSOR_COLORS } from '../Themes/CustomColors';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getTranslation, isValidArray } from '../Utils/UtilFunctions';\n\nimport sectionData from '../section_data.json';\n\nimport ScreenQRcode from '../Components/AirQuality/AirQualityScreen/ScreenQRcode';\nimport ScreenHealthSuggestions from '../Components/AirQuality/AirQualityScreen/ScreenHealthSuggestions';\nimport { TypesOfScreen } from '../Components/AirQuality/AirQualityScreen/ScreenUtils';\nimport AggregationType from '../Components/DateRangePicker/AggregationType';\n\n// Helper function to parse displayHours\nfunction isWithinDisplayHours(location) {\n  const params = new URLSearchParams(location.search);\n  const displayHours = params.get(\"displayHours\");\n  if (!displayHours) return true; // Show screen if no parameter\n\n  const [start, end] = displayHours.split(\"-\").map(time => parseInt(time.replace(\":\", \"\"), 10));\n  const now = parseInt(new Date().toTimeString().slice(0, 5).replace(\":\", \"\"), 10);\n\n  if (start <= end) {\n    // Regular range (same day, e.g., 06:00-20:00)\n    return start <= now && now < end;\n  } else {\n    // Overnight range (e.g., 16:00-01:00)\n    return now >= start || now < end;\n  }\n}\n\nconst Screen = ({ title }) => {\n  const { school_id_param, screen_id_param } = useParams()\n\n  const { temperatureUnitPreference, language, setLanguage } = useContext(PreferenceContext);\n  const { schoolMetadata, currentSchoolID } = useContext(DashboardContext);\n\n  const location = useLocation();\n\n  const [shouldDisplayScreen, setShouldDisplayScreen] = useState(isWithinDisplayHours(location));\n  const [typeOfScreen, setTypeOfScreen] = useState(isWithinDisplayHours(TypesOfScreen.indoorsVsOutdoors));\n\n  // Timer loop:\n  // - Check if the screen should be displayed (or black screen to save energy)\n  // - Rotate between different languages (if exists)\n  useEffect(() => {\n    if (!schoolMetadata || !isValidArray(schoolMetadata.languages)) return;\n\n    const languages = schoolMetadata.languages;\n    if (languages.length <= 1) return;\n\n    // Update display check\n    setShouldDisplayScreen(isWithinDisplayHours(location));\n\n    // Rotate language once per minute\n    const minute = new Date().getMinutes();\n    setLanguage(languages[minute % languages.length]);\n\n    const intervalId = setInterval(() => {\n      // Update display check\n      setShouldDisplayScreen(isWithinDisplayHours(location));\n\n      // Rotate language once per minute\n      const minute = new Date().getMinutes();\n      setLanguage(languages[minute % languages.length]);\n    }, 1000 * 60); // check once per minute\n\n    return () => clearInterval(intervalId);\n  }, [schoolMetadata, location, setLanguage]);\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    // Do nothing if the data has been fetched before\n    if (Object.keys(data).length != 0) return;\n\n    const school_id = school_id_param || currentSchoolID;\n    const aggregationType = school_id === KAMPALA ? AggregationType.hour : null;\n    const url = getApiUrl({\n      endpoint: GeneralAPIendpoints.screen,\n      school_id,\n      screen_id: screen_id_param,\n      aggregationType\n    });\n\n    fetchAndProcessCurrentSensorsData(url, aggregationType)\n      .then((data) => {\n        setData(data);\n\n        // Determine the type of screen\n        const hasOutdoor = data.some(({ sensor }) => sensor.location_type === \"outdoors\");\n        const hasIndoor = data.some(({ sensor }) => sensor.location_type.startsWith(\"indoors\"));\n\n        const screenType = hasIndoor && hasOutdoor\n          ? TypesOfScreen.indoorsVsOutdoors\n          : hasIndoor\n            ? TypesOfScreen.bothIndoors\n            : hasOutdoor\n              ? TypesOfScreen.bothOutdoors\n              : null;\n\n        if (screenType) setTypeOfScreen(screenType);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(() => {\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data);\n        })\n        .catch((error) => console.log(error))\n    },\n      fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    }\n  }, []);\n\n  const aqiTitle = getTranslation(sectionData.screen.content.aqiTitle, language);\n  const pm25Title = getTranslation(sectionData.screen.content.pm25Title, language);\n\n  if (shouldDisplayScreen) return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQI_Database[3].color.Light} !important`,\n            opacity: 0.8\n          },\n          color: `${AQI_Database[3].color.Light} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h2\" fontWeight=\"500\" color=\"white\">\n              {aqiTitle}\n            </Typography>\n            <Typography variant=\"h3\" className='condensedFont' color={INACTIVE_SENSOR_COLORS.screen}>\n              {pm25Title}\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid\n              currentSensorsData={data}\n              temperatureUnitPreference={temperatureUnitPreference}\n              isScreen={true}\n              size={CurrentAQIGridSize.large}\n              showWeather={currentSchoolID === KAMPALA ? false : true}\n              showHeatIndex={currentSchoolID === KAMPALA ? false : true}\n              showLastUpdate={currentSchoolID === KAMPALA ? true : false}\n            />\n          </Grid>\n\n          <ScreenHealthSuggestions typeOfScreen={typeOfScreen} data={data} />\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h2\" sx={{ color: 'black' }}>\n              {CITIESair}\n            </Typography>\n            {\n              currentSchoolID === KAMPALA && (\n                <Typography variant=\"h5\" color=\"text.secondary\">\n                  {getTranslation(sectionData.screen.content.dataProvider, language)}: AirQo\n                </Typography>\n              )\n            }\n          </Grid>\n\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"90%\">\n              <ScreenQRcode />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid>\n  );\n  else return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"black\",\n      }}\n    />\n  )\n};\n\nexport default Screen;\n"],"names":["TypesOfScreen","props","data","language","useContext","PreferenceContext","theme","useTheme","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","width","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","val","curve","tension","useEffect","_data$","_data$$metadata","_data$2","_data$2$metadata","current","viewHours","metadata","xTickInterval","aggregationType","AggregationType","hour","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","_ref","_sensorData$historica","key","sensorData","historical","Date","Array","isArray","max","Math","ceil","category","AQI_Database","aqiUS","low","high","Infinity","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","length","element","upper","lower","aqiRange","append","color","Light","text","getTranslation","setMinutes","ticks","t","push","reverse","concat","call","tickSize","tickValues","tickFormat","INACTIVE_SENSOR_COLORS","screen","select","_ref2","_sensorData$sensor","_sensorData$historica2","_sensorData$historica3","datum","sensor","location_type","mostRecentData","undefined","_sensorData$current","_sensorData$current$a","_sensorData$sensor2","_sensorData$sensor3","_sensorData$sensor4","markerWrapper","categoryIndex","palette","sensor_status","SensorStatus","active","dotRadius","capitalizePhrase","location_short","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","rect1","getBoundingClientRect","rect2","bottom","top","setAttribute","areDOMOverlapped","_jsx","Box","sx","animation","transform","opacity","filter","children","_jsxs","id","ref","ScreenQRcode","schoolMetadata","currentSchoolID","DashboardContext","isPublic","is_public","urlComponents","location","href","split","urlAfterScreen","pop","qrValue","CITIESair_HOST_NAME","QRCode","size","style","maxWidth","value","viewBox","Comparison","values","every","outdoorsAQI","find","_d$sensor","indoorsAQI","_d$sensor2","startsWith","ratio","comparison","toFixed","round","ListItem","ListItemText","primary","sectionData","Typography","component","typeOfScreen","suggestionsMap","Map","_sensorData$current2","_sensorData$current2$","suggestion","healthSuggestions","healthSuggestionText","categoryText","getHealthSuggestion","isUnhealthy","has","set","get","List","className","listStyleType","fontSize","display","ml","p","pr","map","_ref3","idx","parse","isWithinDisplayHours","displayHours","URLSearchParams","search","start","end","time","parseInt","replace","now","toTimeString","slice","title","school_id_param","screen_id_param","useParams","temperatureUnitPreference","setLanguage","useLocation","shouldDisplayScreen","setShouldDisplayScreen","useState","setTypeOfScreen","isValidArray","languages","minute","getMinutes","intervalId","setInterval","clearInterval","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","keys","school_id","KAMPALA","url","getApiUrl","endpoint","GeneralAPIendpoints","screen_id","fetchAndProcessCurrentSensorsData","then","hasOutdoor","some","hasIndoor","screenType","catch","error","console","log","aqiTitle","pm25Title","Grid","container","alignContent","alignItems","overflow","background","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","CurrentAQIGrid","currentSensorsData","isScreen","CurrentAQIGridSize","large","showWeather","showHeatIndex","showLastUpdate","ScreenHealthSuggestions","position","right","left","m","CITIESlogoLinkToHome","pt","CITIESair","RecentHistoricalGraph"],"sourceRoot":""}