{"version":3,"file":"static/js/275.23add3a0.chunk.js","mappings":"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","sources":["Components/AirQuality/AirQualityScreen/ScreenUtils.jsx","Components/AirQuality/AirQualityScreen/RecentHistoricalGraph.jsx","Components/AirQuality/AirQualityScreen/ScreenQRcode.jsx","Components/AirQuality/AirQualityScreen/ScreenHealthSuggestions.jsx","Pages/Screen.jsx"],"sourcesContent":["export const TypesOfScreen = {\n  bothIndoors: 1,\n  bothOutdoors: 2,\n  indoorsVsOutdoors: 3\n}\n\nexport const removeLastDirectoryFromURL = (url) => {\n  const urlComponents = url.split('/');\n  // Remove the last component (directory)\n  urlComponents.pop();\n  // Reconstruct the URL with the last directory removed\n  return urlComponents.join('/') + '/';\n}\n\nexport const areDOMOverlapped = (rect1, rect2) => {\n  if (!(rect1.bottom < rect2.top || rect1.top > rect2.bottom)) {\n    if (rect1.top < rect2.top) return -1;\n    else return 1;\n  }\n  else return 0;\n}\n","// disable eslint for this file\n/* eslint-disable */\nimport { useRef, useEffect, useContext } from 'react';\nimport * as d3 from 'd3';\nimport { AQI_Database } from '../../../Utils/AirQuality/AirQualityIndexHelper';\nimport { SensorStatus } from '../SensorStatus';\nimport { Box } from '@mui/material';\n\nimport { areDOMOverlapped } from './ScreenUtils';\n\nimport { capitalizePhrase, getTranslation } from '../../../Utils/UtilFunctions';\nimport { INACTIVE_SENSOR_COLORS } from '../../../Themes/CustomColors';\nimport { useTheme } from '@mui/material';\nimport { PreferenceContext } from '../../../ContextProviders/PreferenceContext';\n\nconst numberOfHoursForHistoricalData = 6;\n\nconst RecentHistoricalGraph = (props) => {\n  const { data } = props;\n  const { language } = useContext(PreferenceContext);\n  const theme = useTheme();\n\n  const graphContainer = useRef();\n  const layerBackground = useRef();\n  const layerTexts = useRef();\n  const layerXaxisWrapper = useRef();\n  const layerLines = useRef();\n\n  let width, height, xAxis, yAxis;\n  let maxAQItoDisplay = 200;\n  const xTickPeriod = 120; // xAxis ticks every 2 hour\n  const dotRadius = 10;\n  const margin = { top: 30, right: 80, bottom: 0, left: 70 };\n\n  // Set up D3's line generator\n  const lineGenerator = d3\n    .line()\n    .x(function (d) {\n      return xAxis(d.timestamp);\n    }) // set the x values for the line generator\n    .y(function (d) {\n      return yAxis(d.aqi.val);\n    }) // set the y values for the line generator\n    .curve(d3.curveCardinal.tension(0)); // apply smoothing to the line\n\n  useEffect(() => {\n    if (!data) return;\n    if (!graphContainer.current) return;\n    if (!layerBackground.current) return;\n    if (!layerTexts.current) return;\n    if (!layerXaxisWrapper.current) return;\n    if (!layerLines.current) return;\n\n    width = graphContainer.current.clientWidth;\n    height = graphContainer.current.clientHeight - margin.top;\n\n    // Clear all previous drawings\n    d3.select(layerBackground.current).selectAll(\"*\").remove();\n    d3.select(layerTexts.current).selectAll(\"*\").remove();\n    d3.select(layerXaxisWrapper.current).selectAll(\"*\").remove();\n    d3.select(layerLines.current).selectAll(\"*\").remove();\n\n    d3.select(layerBackground.current)\n      .attr(\"opacity\", 0.5);\n    d3.select(layerTexts.current)\n      .attr(\"filter\", \"brightness(0.8) contrast(1.2) saturate(1.2)\");\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // Create the JS date object and calculate AQI from raw measurements\n      sensorData.historical?.forEach(function (d) {\n        d.timestamp = new Date(d.timestamp)\n      });\n\n      // Calculate the maximum value AQI of this sensor\n      if (sensorData.historical && Array.isArray(sensorData.historical)) {\n        const max = d3.max(sensorData.historical, function (d) {\n          return d.aqi.val;\n        });\n        if (max > maxAQItoDisplay) maxAQItoDisplay = max;\n      }\n    });\n\n    // Calculate the maximum AQI for the y-axis to display\n    maxAQItoDisplay = Math.ceil(maxAQItoDisplay / 50) * 50; // round to the nearest 50 points\n\n    for (let category of AQI_Database) {\n      if (maxAQItoDisplay >= category.aqiUS.low && maxAQItoDisplay <= category.aqiUS.high) {\n        maxAQItoDisplay = category.aqiUS.high === Infinity ? maxAQItoDisplay : category.aqiUS.high;\n        break;\n      }\n    };\n\n    // 1. Set up the xAxis domain and range\n    let xAxisMax = new Date();\n    let xAxisMin = new Date();\n    xAxisMin.setHours(xAxisMin.getHours() - numberOfHoursForHistoricalData);\n    xAxis = d3.scaleTime().domain([xAxisMin, xAxisMax]).rangeRound([margin.left, width - margin.right]); // width is inclusive of margin\n\n    // 2. Set up the yAxis domain and range\n    yAxis = d3.scaleLinear().domain([0, maxAQItoDisplay]).range([height + margin.top, margin.top]); // height is already exclusive of margin\n\n    // 3. Add the background category layer and the AQI levels (rectangles) and the grids\n    let font_size = Math.max(\n      Math.floor(((AQI_Database[1].aqiUS.high - AQI_Database[0].aqiUS.high) / maxAQItoDisplay) * height / 2),\n      20);\n\n    let marginText = Math.floor(font_size / 5);\n    // 4. Loop through all the aqi_category and add each category into the graph\n    for (let i = 0; i < AQI_Database.length; i++) {\n      const element = AQI_Database[i];\n      const upper = element.aqiUS.high === Infinity ? maxAQItoDisplay : element.aqiUS.high;\n      const lower = element.aqiUS.low;\n\n      if (maxAQItoDisplay <= lower) break;\n\n      // Add the rectangles\n      const aqiRange = Math.ceil((upper - lower) / 50) * 50;\n      d3.select(layerBackground.current)\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height - (upper / maxAQItoDisplay) * height + margin.top)\n        .attr(\"width\", width)\n        .attr(\"height\", aqiRange / maxAQItoDisplay * height)\n        .attr(\"fill\", element.color.Light);\n\n      // Add the AQI categories numbers\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"x\", marginText)\n        .attr(\n          \"y\",\n          height -\n          (element.aqiUS.low / maxAQItoDisplay) * height -\n          3.5 * marginText + margin.top\n        )\n        .attr(\"fill\", element.color.Light)\n        .attr(\"font-size\", font_size)\n        .text(Math.floor(element.aqiUS.low / 50) * 50);\n\n      d3.select(layerTexts.current)\n        .append(\"text\")\n        .attr(\"class\", \"category-text-graph-sm\")\n        .attr(\"x\", marginText + 2)\n        .attr(\n          \"y\",\n          height - (element.aqiUS.low / maxAQItoDisplay) * height - marginText + margin.top\n        )\n        .attr(\"fill\", element.color.Light)\n        .attr(\"font-size\", font_size / 2)\n        .text(getTranslation(element.category, language));\n    };\n\n    // 5. Add the xAxisWrapper and its texts\n    d3.select(layerXaxisWrapper.current)\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"width\", width)\n      .attr(\"height\", margin.top)\n      .attr(\"fill\", \"white\");\n\n    // 6. Add the X Axis on top of the graph, as well as ticks\n    let formatHour = d3.timeFormat(\"%H:%M\");\n    d3.select(layerXaxisWrapper.current)\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${margin.top})`)\n      .call(\n        d3\n          .axisTop(xAxis)\n          .tickSize(-height) // negative length to make vertical lines\n          .ticks(d3.timeMinute.every(xTickPeriod))\n          .tickFormat(function (d) {\n            return formatHour(d);\n          })\n      )\n      .attr(\"font-size\", height / 20)\n      .attr(\"color\", INACTIVE_SENSOR_COLORS.screen)\n      .select(\".domain\")\n      .remove();\n    d3.select(layerXaxisWrapper.current)\n      .selectAll('line')\n      .attr('stroke', 'white')\n      .attr('stroke-width', 2)\n      .attr('opacity', 0.5);\n\n    Object.entries(data).forEach(([key, sensorData]) => {\n      // 7.1. Append the line chart for this location\n      d3.select(layerLines.current)\n        .append(\"path\")\n        .datum(sensorData.historical || [])\n        .attr(\"x\", margin.left)\n        .attr(\"class\", \"line\")\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"transparent\")\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", \"5px\")\n        .attr(\"opacity\", sensorData.sensor?.location_type === \"outdoors\" ? 1 : 0.5);\n\n      // 7.2. Append the circle marker at the end of this line chart to denote its liveness\n      const mostRecentData = sensorData.historical?.length > 0 ? sensorData.historical?.[0] : null;\n      if (\n        mostRecentData &&\n        mostRecentData.aqi &&\n        mostRecentData.aqi.val !== undefined &&\n        mostRecentData.aqi.val !== null &&\n        mostRecentData.timestamp\n      ) {\n        const markerWrapper = d3.select(layerLines.current)\n          .append(\"g\")\n          .attr(\n            \"transform\",\n            \"translate(\" +\n            xAxis(mostRecentData.timestamp) +\n            \",\" +\n            yAxis(mostRecentData.aqi.val) +\n            \")\"\n          )\n          .attr(\"fill\",\n            sensorData?.current?.aqi?.categoryIndex !== null ?\n              theme.palette.text.aqi[sensorData.current.aqi.categoryIndex] :\n              INACTIVE_SENSOR_COLORS.screen\n          )\n          ;\n\n        sensorData.sensor?.sensor_status === SensorStatus.active &&\n          markerWrapper.append(\"circle\")\n            .attr(\"cx\", 0)\n            .attr(\"cy\", 0)\n            .attr(\"filter\", \"brightness(0.5)\")\n            .attr(\"class\", \"pulse-ring\")\n            .attr(\"r\", 2.5 * dotRadius);\n\n        markerWrapper.append(\"circle\")\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n          .attr(\"stroke\", \"#666\")\n          .attr(\"class\", sensorData.sensor?.sensor_status === SensorStatus.active && \"pulse-dot\")\n          .attr(\"r\", dotRadius);\n\n        markerWrapper.append(\"text\")\n          .attr(\"class\", \"location-label\")\n          .attr(\"x\", dotRadius * 1.5)\n          .attr(\"y\", 0)\n          .attr(\"fill\", \"black\")\n          .attr(\"alignment-baseline\", \"middle\")\n          .attr(\"text-anchor\", \"left\")\n          .attr(\"font-size\", height / 25)\n          .text(capitalizePhrase(sensorData.sensor?.location_short));\n\n        const locationLabels = document.getElementsByClassName(\"location-label\");\n        for (let i = 1; i < locationLabels.length; i++) {\n          const locationLabel_1 = locationLabels[i - 1];\n          const locationLabel_2 = locationLabels[i];\n          const overlapped = areDOMOverlapped(locationLabel_1.getBoundingClientRect(), locationLabel_2.getBoundingClientRect());\n\n          if (overlapped !== 0) {\n            locationLabel_1.setAttribute(\"y\", overlapped * dotRadius);\n            locationLabel_2.setAttribute(\"y\", - overlapped * dotRadius);\n          }\n        }\n      }\n    });\n\n  }, [data, language])\n\n  return (\n    <Box\n      sx={{\n        '& .pulse-ring': {\n          animation: 'pulse-ring 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-ring': {\n            '0%': {\n              transform: 'scale(0.2)'\n            },\n            '80%': {},\n            '100%': {\n              opacity: 0\n            }\n          }\n        },\n        '& .pulse-dot': {\n          animation: 'pulse-dot 2s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes pulse-dot': {\n            '0%': {\n              transform: 'scale(0.5)'\n            },\n            '50%': {\n              transform: 'scale(1)',\n              filter: 'brightness(1.2) contrast(1.2) saturate(1.2)'\n            },\n            '100%': {\n              transform: 'scale(0.5)'\n            }\n          }\n        }\n      }}\n      width=\"100%\"\n      height=\"100%\"\n    >\n      <svg\n        id=\"recent-historical-graph\"\n        width=\"100%\"\n        height=\"100%\"\n        ref={graphContainer}\n      >\n        <g ref={layerBackground} />\n        <g ref={layerXaxisWrapper} />\n        <g ref={layerTexts} />\n        <g ref={layerLines} />\n      </svg>\n    </Box>\n\n  );\n}\n\nexport default RecentHistoricalGraph;","import { useContext } from \"react\";\nimport QRCode from \"react-qr-code\";\nimport { DashboardContext } from \"../../../ContextProviders/DashboardContext\";\nimport { CITIESair_HOST_NAME } from \"../../../Utils/GlobalVariables\";\n\nconst ScreenQRcode = () => {\n    const { schoolMetadata, currentSchoolID } = useContext(DashboardContext);\n    const isPublic = schoolMetadata?.is_public;\n\n    const url = document.location.href;\n    const urlComponents = url.split('screen');\n    const urlAfterScreen = `${'screen'}${urlComponents.pop()}`;\n\n    const qrValue = isPublic === true\n        ? `${CITIESair_HOST_NAME}/dashboard/${currentSchoolID}?source=${urlAfterScreen}`\n        : `${CITIESair_HOST_NAME}?source=${urlAfterScreen}`;\n\n    return (\n        <QRCode\n            size={256}\n            style={{ height: \"auto\", maxWidth: \"100%\", width: \"100%\" }}\n            value={qrValue}\n            viewBox={`0 0 256 256`}\n        />\n    );\n};\n\nexport default ScreenQRcode;\n\n","import { List, ListItem, ListItemText, Typography } from \"@mui/material\";\nimport { INACTIVE_SENSOR_COLORS } from \"../../../Themes/CustomColors\";\nimport { AQI_Database } from \"../../../Utils/AirQuality/AirQualityIndexHelper\";\nimport { SensorStatus } from \"../SensorStatus\";\nimport { TypesOfScreen } from \"./ScreenUtils\";\nimport { getTranslation } from \"../../../Utils/UtilFunctions\";\nimport { useContext } from \"react\";\nimport { PreferenceContext } from \"../../../ContextProviders/PreferenceContext\";\n\nimport sectionData from '../../../section_data.json';\nimport parse from 'html-react-parser';\n\nconst Comparison = ({ data }) => {\n    const { language } = useContext(PreferenceContext);\n\n    // Only display air quality comparison if every sensor is currently active\n    if (!Object.values(data).every((sensorData) => sensorData.sensor?.sensor_status === SensorStatus.active)) return null;\n\n    const outdoorsSensor = data.find(d => d.sensor?.location_type === \"outdoors\");\n    const outdoorsAQI = outdoorsSensor.current.aqi.val;\n    // Don’t display comparison if outdoor air is already good\n    if (outdoorsAQI <= AQI_Database[0].aqiUS.high) return null;\n\n    const indoorsSensor = data.find(d => d.sensor?.location_type.startsWith(\"indoors\"));\n    const indoorsAQI = indoorsSensor.current.aqi.val;\n\n    const ratio = outdoorsAQI / indoorsAQI;\n    const comparison =\n        ratio >= 2\n            ? `${ratio.toFixed(1)}x`\n            : ratio > 1.2\n                ? `${Math.round(((outdoorsAQI - indoorsAQI) / indoorsAQI) * 100)}%`\n                : null;\n\n    if (!comparison) return null;\n\n    return (\n        <ListItem>\n            <ListItemText\n                primary={getTranslation(sectionData.screen.content.indoorsVsOutdoors, language, {\n                    value: (\n                        <Typography\n                            component=\"span\"\n                            color={`${AQI_Database[0].color.Light} !important`}\n                        >\n                            {comparison}\n                        </Typography>\n                    ),\n                })}\n            />\n        </ListItem>\n    );\n}\n\nconst ScreenHealthSuggestions = ({ typeOfScreen, data }) => {\n    const { language } = useContext(PreferenceContext);\n\n    const getHealthSuggestion = (sensorData) => {\n        if (sensorData?.current?.aqi?.categoryIndex !== undefined) {\n            const { healthSuggestions, category } =\n                AQI_Database[sensorData.current.aqi.categoryIndex];\n            const healthSuggestionText = getTranslation(\n                healthSuggestions[sensorData.sensor?.location_type],\n                language\n            )\n\n            switch (typeOfScreen) {\n                case TypesOfScreen.indoorsVsOutdoors:\n                    return healthSuggestionText;\n                default:\n                    const categoryText = getTranslation(category, language);\n                    return `${categoryText}: ${healthSuggestionText}`\n            }\n        }\n        return null;\n    };\n\n    // Collect unique suggestions + whether they are unhealthy\n    const suggestionsMap = new Map();\n    Object.values(data).forEach((sensorData) => {\n        const suggestion = getHealthSuggestion(sensorData);\n        if (!suggestion) return;\n\n        const isUnhealthy =\n            sensorData.current?.aqi?.val >= AQI_Database[2].aqiUS.low;\n\n        // If suggestion already exists, keep it unhealthy if ANY sensor was unhealthy\n        if (suggestionsMap.has(suggestion)) {\n            suggestionsMap.set(\n                suggestion,\n                suggestionsMap.get(suggestion) || isUnhealthy\n            );\n        } else {\n            suggestionsMap.set(suggestion, isUnhealthy);\n        }\n    });\n\n    return (\n        <List\n            className=\"condensedFont\"\n            sx={{\n                listStyleType: \"disclosure-closed\",\n                \"& .MuiTypography-root\": { fontSize: \"2rem\" },\n                \"& .MuiListItem-root\": { display: \"list-item\", ml: 3, p: 0, pr: 3 },\n                \"& .MuiTypography-root, .MuiListItem-root\": {\n                    color: INACTIVE_SENSOR_COLORS.screen,\n                },\n            }}\n        >\n            {typeOfScreen === TypesOfScreen.indoorsVsOutdoors && (\n                <Comparison data={data} />\n            )}\n\n            {[...suggestionsMap.entries()].map(([text, isUnhealthy], idx) => (\n                <ListItem\n                    key={idx}\n                    className={isUnhealthy ? \"flashingRed\" : \"\"}\n                >\n                    <ListItemText primary={parse(text)} />\n                </ListItem>\n            ))}\n        </List>\n    );\n};\n\nexport default ScreenHealthSuggestions;","// disable eslint for this file\n/* eslint-disable */\nimport { useState, useEffect, useContext } from 'react';\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { UserContext } from '../ContextProviders/UserContext';\n\nimport { Box, Grid, Typography, Stack } from '@mui/material';\n\nimport CITIESlogoLinkToHome from '../Components/Header/CITIESlogoLinkToHome';\n\nimport RecentHistoricalGraph from '../Components/AirQuality/AirQualityScreen/RecentHistoricalGraph';\n\nimport { AQI_Database } from '../Utils/AirQuality/AirQualityIndexHelper';\n\nimport CurrentAQIGrid from '../Components/AirQuality/CurrentAQIGrid';\nimport { CurrentAQIGridSize } from '../Components/AirQuality/CurrentAQIGridSize';\nimport { getApiUrl } from '../API/ApiUrls';\nimport { GeneralAPIendpoints } from \"../API/Utils\";\nimport { fetchAndProcessCurrentSensorsData } from '../API/ApiFetch';\nimport { PreferenceContext } from '../ContextProviders/PreferenceContext';\nimport { CITIESair, KAMPALA } from '../Utils/GlobalVariables';\nimport { INACTIVE_SENSOR_COLORS } from '../Themes/CustomColors';\nimport { DashboardContext } from '../ContextProviders/DashboardContext';\nimport { getTranslation, isValidArray } from '../Utils/UtilFunctions';\n\nimport sectionData from '../section_data.json';\n\nimport ScreenQRcode from '../Components/AirQuality/AirQualityScreen/ScreenQRcode';\nimport ScreenHealthSuggestions from '../Components/AirQuality/AirQualityScreen/ScreenHealthSuggestions';\nimport { TypesOfScreen } from '../Components/AirQuality/AirQualityScreen/ScreenUtils';\n\n// Helper function to parse displayHours\nfunction isWithinDisplayHours(location) {\n  const params = new URLSearchParams(location.search);\n  const displayHours = params.get(\"displayHours\");\n  if (!displayHours) return true; // Show screen if no parameter\n\n  const [start, end] = displayHours.split(\"-\").map(time => parseInt(time.replace(\":\", \"\"), 10));\n  const now = parseInt(new Date().toTimeString().slice(0, 5).replace(\":\", \"\"), 10);\n\n  if (start <= end) {\n    // Regular range (same day, e.g., 06:00-20:00)\n    return start <= now && now < end;\n  } else {\n    // Overnight range (e.g., 16:00-01:00)\n    return now >= start || now < end;\n  }\n}\n\nconst Screen = ({ title }) => {\n  const { school_id_param, screen_id_param } = useParams()\n\n  const { temperatureUnitPreference, language, setLanguage } = useContext(PreferenceContext);\n  const { schoolMetadata, currentSchoolID } = useContext(DashboardContext);\n\n  const { authenticationState } = useContext(UserContext);\n  const navigate = useNavigate();\n\n  const location = useLocation();\n  const locationPath = location.pathname;\n\n  const [shouldDisplayScreen, setShouldDisplayScreen] = useState(isWithinDisplayHours(location));\n  const [typeOfScreen, setTypeOfScreen] = useState(isWithinDisplayHours(TypesOfScreen.indoorsVsOutdoors));\n\n  // Timer loop:\n  // - Check if the screen should be displayed (or black screen to save energy)\n  // - Rotate between different languages (if exists)\n  useEffect(() => {\n    if (!schoolMetadata || !isValidArray(schoolMetadata.languages)) return;\n\n    const languages = schoolMetadata.languages;\n    if (languages.length <= 1) return;\n\n    // Update display check\n    setShouldDisplayScreen(isWithinDisplayHours(location));\n\n    // Rotate language once per minute\n    const minute = new Date().getMinutes();\n    setLanguage(languages[minute % languages.length]);\n\n    const intervalId = setInterval(() => {\n      // Update display check\n      setShouldDisplayScreen(isWithinDisplayHours(location));\n\n      // Rotate language once per minute\n      const minute = new Date().getMinutes();\n      setLanguage(languages[minute % languages.length]);\n    }, 1000 * 60); // check once per minute\n\n    return () => clearInterval(intervalId);\n  }, [schoolMetadata, location, setLanguage]);\n\n  // Update the page's title\n  useEffect(() => {\n    document.title = title;\n  }, [title]);\n\n  const [isLayoutReversed, setIsLayoutReversed] = useState();\n\n  const [data, setData] = useState({});\n\n  // Tweak the layout of the screen to prevent burn-in\n  useEffect(() => {\n    // Helper function to change layout of the screen based on current's month\n    // (arrange the left and right sections of the screen)\n    // to mitigate burn-in if the same static image is displayed over a long period of time\n    function returnIsLayoutReversed() {\n      let months = [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]; // 12 months of a year, change the layout every two months\n      let now = new Date();\n      let thisMonthIndex = now.getMonth(); // get the index of this Month (0-11)\n      // Return a boolean value if the layout should be reversed\n      return (months[thisMonthIndex] !== 0);\n    }\n\n    setIsLayoutReversed(returnIsLayoutReversed());\n\n    // Set up an interval to call the function every day\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n    const intervalId = setInterval(() => {\n      setIsLayoutReversed(returnIsLayoutReversed());\n    }, oneDayInMilliseconds);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Fetch air quality data from database\n  useEffect(() => {\n    // Do nothing if the data has been fetched before\n    if (Object.keys(data).length != 0) return;\n\n    const url = getApiUrl({\n      endpoint: GeneralAPIendpoints.screen,\n      school_id: school_id_param || currentSchoolID,\n      screen_id: screen_id_param\n    });\n\n    fetchAndProcessCurrentSensorsData(url)\n      .then((data) => {\n        setData(data);\n\n        // Determine the type of screen\n        const hasOutdoor = data.some(({ sensor }) => sensor.location_type === \"outdoors\");\n        const hasIndoor = data.some(({ sensor }) => sensor.location_type.startsWith(\"indoors\"));\n\n        const screenType = hasIndoor && hasOutdoor\n          ? TypesOfScreen.indoorsVsOutdoors\n          : hasIndoor\n            ? TypesOfScreen.bothIndoors\n            : hasOutdoor\n              ? TypesOfScreen.bothOutdoors\n              : null;\n\n        if (screenType) setTypeOfScreen(screenType);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    // Create an interval that fetch new data every 5 minute\n    const fetchInterval = 5 * 60 * 1000; // 5min\n    const intervalId = setInterval(() => {\n      fetchAndProcessCurrentSensorsData(url)\n        .then((data) => {\n          setData(data);\n        })\n        .catch((error) => console.log(error))\n    },\n      fetchInterval);\n    // Clean up the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId);\n    }\n  }, []);\n\n  const aqiTitle = getTranslation(sectionData.screen.content.aqiTitle, language);\n  const pm25Title = getTranslation(sectionData.screen.content.pm25Title, language);\n\n  if (shouldDisplayScreen) return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"white\",\n        '& *': {\n          fontWeight: '500 !important'\n        },\n        '& .condensedFont': {\n          fontFamily: 'IBM Plex Sans Condensed, sans-serif !important',\n          '& *': {\n            fontFamily: 'IBM Plex Sans Condensed, sans-serif !important'\n          }\n        },\n        '& .flashingRed': {\n          '& .MuiTypography-root ': {\n            color: `${AQI_Database[3].color.Light} !important`,\n            opacity: 0.8\n          },\n          color: `${AQI_Database[3].color.Light} !important`,\n          animation: 'flashingRed 3s cubic-bezier(0.455, 0.03, 0.515, 0.955) infinite',\n          '@keyframes flashingRed': {\n            '0%': {\n              opacity: 1\n            },\n            '50%': {\n              opacity: 0.5\n            },\n            '100%': {\n              opacity: 1\n            }\n          }\n        }\n      }}\n    >\n      <Grid\n        item\n        xs={6}\n        sx={{\n          py: 3,\n          px: 2,\n          order: isLayoutReversed ? 1 : 0,\n          background: '#212529'\n        }}\n      >\n        <Stack\n          direction=\"column\"\n          justifyContent=\"space-between\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Box>\n            <Typography variant=\"h2\" fontWeight=\"500\" color=\"white\">\n              {aqiTitle}\n            </Typography>\n            <Typography variant=\"h3\" className='condensedFont' color={INACTIVE_SENSOR_COLORS.screen}>\n              {pm25Title}\n            </Typography>\n          </Box>\n\n          <Grid\n            container\n            justifyContent=\"space-around\"\n          >\n            <CurrentAQIGrid\n              currentSensorsData={data}\n              temperatureUnitPreference={temperatureUnitPreference}\n              isScreen={true}\n              size={CurrentAQIGridSize.large}\n              showWeather={currentSchoolID === KAMPALA ? false : true}\n              showHeatIndex={currentSchoolID === KAMPALA ? false : true}\n            />\n          </Grid>\n\n          <ScreenHealthSuggestions typeOfScreen={typeOfScreen} data={data} />\n        </Stack>\n      </Grid>\n\n      <Grid item xs={6} sx={{ order: isLayoutReversed ? 0 : 1 }}>\n        <Box\n          sx={{\n            position: 'absolute',\n            top: 0,\n            right: !isLayoutReversed && 0,\n            left: isLayoutReversed && 0,\n            width: '5vw',\n            height: '5vw',\n            m: 1\n          }}\n        >\n          <CITIESlogoLinkToHome />\n        </Box>\n        <Grid\n          container\n          alignContent=\"space-between\"\n          justifyContent=\"center\"\n          height=\"100%\"\n          textAlign=\"center\"\n        >\n          <Grid item xs={12} sx={{ pt: 3, px: 2 }}>\n            <Typography variant=\"h2\" sx={{ color: 'black' }}>\n              {CITIESair}\n            </Typography>\n            {\n              currentSchoolID === KAMPALA && (\n                <Typography variant=\"h5\" color=\"text.secondary\">\n                  {getTranslation(sectionData.screen.content.dataProvider, language)}: AirQo\n                </Typography>\n              )\n            }\n          </Grid>\n\n          <Grid item xs={2}>\n            <Box height=\"auto\" width=\"90%\">\n              <ScreenQRcode />\n            </Box>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            height=\"70%\"\n            className='condensedFont'\n            sx={{ '& *': { fontWeight: '600 !important' } }}\n          >\n            <RecentHistoricalGraph data={data} />\n          </Grid>\n        </Grid>\n\n      </Grid>\n    </Grid>\n  );\n  else return (\n    <Grid\n      container\n      alignContent=\"stretch\"\n      alignItems=\"stretch\"\n      height=\"100vh\"\n      sx={{\n        overflow: 'hidden',\n        background: \"black\",\n      }}\n    />\n  )\n};\n\nexport default Screen;\n"],"names":["TypesOfScreen","props","data","language","useContext","PreferenceContext","theme","useTheme","graphContainer","useRef","layerBackground","layerTexts","layerXaxisWrapper","layerLines","width","height","xAxis","yAxis","maxAQItoDisplay","margin","lineGenerator","d3","x","d","timestamp","y","aqi","val","curve","tension","useEffect","current","clientWidth","clientHeight","selectAll","remove","attr","Object","entries","forEach","_ref","_sensorData$historica","key","sensorData","historical","Date","Array","isArray","max","Math","ceil","category","AQI_Database","aqiUS","low","high","Infinity","xAxisMax","xAxisMin","setHours","getHours","domain","rangeRound","range","font_size","floor","marginText","i","length","element","upper","lower","aqiRange","append","color","Light","text","getTranslation","formatHour","concat","call","tickSize","ticks","every","tickFormat","INACTIVE_SENSOR_COLORS","screen","select","_ref2","_sensorData$sensor","_sensorData$historica2","_sensorData$historica3","datum","sensor","location_type","mostRecentData","undefined","_sensorData$current","_sensorData$current$a","_sensorData$sensor2","_sensorData$sensor3","_sensorData$sensor4","markerWrapper","categoryIndex","palette","sensor_status","SensorStatus","active","dotRadius","capitalizePhrase","location_short","locationLabels","document","getElementsByClassName","locationLabel_1","locationLabel_2","overlapped","rect1","getBoundingClientRect","rect2","bottom","top","setAttribute","areDOMOverlapped","_jsx","Box","sx","animation","transform","opacity","filter","children","_jsxs","id","ref","ScreenQRcode","schoolMetadata","currentSchoolID","DashboardContext","isPublic","is_public","urlComponents","location","href","split","urlAfterScreen","pop","qrValue","CITIESair_HOST_NAME","QRCode","size","style","maxWidth","value","viewBox","Comparison","values","outdoorsAQI","find","_d$sensor","indoorsAQI","_d$sensor2","startsWith","ratio","comparison","toFixed","round","ListItem","ListItemText","primary","sectionData","Typography","component","typeOfScreen","suggestionsMap","Map","_sensorData$current2","_sensorData$current2$","suggestion","healthSuggestions","healthSuggestionText","categoryText","getHealthSuggestion","isUnhealthy","has","set","get","List","className","listStyleType","fontSize","display","ml","p","pr","map","_ref3","idx","parse","isWithinDisplayHours","displayHours","URLSearchParams","search","start","end","time","parseInt","replace","now","toTimeString","slice","title","school_id_param","screen_id_param","useParams","temperatureUnitPreference","setLanguage","authenticationState","UserContext","useNavigate","useLocation","shouldDisplayScreen","setShouldDisplayScreen","pathname","useState","setTypeOfScreen","isValidArray","languages","minute","getMinutes","intervalId","setInterval","clearInterval","isLayoutReversed","setIsLayoutReversed","setData","returnIsLayoutReversed","getMonth","keys","url","getApiUrl","endpoint","GeneralAPIendpoints","school_id","screen_id","fetchAndProcessCurrentSensorsData","then","hasOutdoor","some","hasIndoor","screenType","catch","error","console","log","aqiTitle","pm25Title","Grid","container","alignContent","alignItems","overflow","background","fontWeight","fontFamily","item","xs","py","px","order","Stack","direction","justifyContent","textAlign","variant","CurrentAQIGrid","currentSensorsData","isScreen","CurrentAQIGridSize","large","showWeather","KAMPALA","showHeatIndex","ScreenHealthSuggestions","position","right","left","m","CITIESlogoLinkToHome","pt","CITIESair","RecentHistoricalGraph"],"sourceRoot":""}